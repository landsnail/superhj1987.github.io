<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pje-book | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/pje-book/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2019-05-09T16:05:08+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何学习后端技术？]]></title>
    <link href="http://www.rowkey.me/blog/2018/04/13/how-to-study-tech/"/>
    <updated>2018-04-13T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/04/13/how-to-study-tech</id>
    <content type="html"><![CDATA[<p>最新内容见:<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter1-servertech/how-to-study.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter1-servertech/how-to-study.md</a></p>

<p>学习后端技术和学习其他的技术并没有什么大的不同。因此，题目换做如何学习技术也是讲的通的。概括来讲，有以下几点建议：</p>

<ul>
<li>扎实的计算机基础知识</li>
<li>知其然更要知其所以然</li>
<li>动手实践、频繁练习</li>
<li>持续学习</li>
<li>计算机思维</li>
<li>自我总结</li>
<li>学会规划</li>
</ul>


<!--more-->


<h2>扎实的计算机基础知识</h2>

<ul>
<li>数据结构和算法：程序是由数据和算法组成的，因此这两个东西是计算机软件的基础。诸如B树、哈希表、栈以及七大排序算法、查找算法这些，在很多软件的代码中都可以看得到。有时候，一个优秀的工程师和一个普通工程师的区别也就在于是否能够合理使用合适的数据结构和算法。</li>
<li>计算机操作系统：操作系统可以说是集大成于一身的一个软件程序。资源调度、任务调度、IO调度、进程通信等等，每一个设计都是很精华的，也是很多其他应用软件设计的思想来源。</li>
<li>计算机网络：目前只要有数据传输功能的程序绝大多数都是离不开网络的。网络七层或者四层协议栈的设计非常精妙。了解网络连接如何建立、断开以及每个连接状态的意义都有助于对程序网络问题的排查。</li>
<li>计算机组成原理：这是计算机最底层的设计，也是计算机一切的基础。了解这些有助于消除你对计算机的神秘感，毕竟符合冯诺依曼原理的计算机无非就是存储数据、程序按序运行。</li>
</ul>


<p>以上是计算机专业的一些比较普遍的基础知识课程。这里不得不说的一点是，虽然现在各大高校的计算机专业课程是比较落后的，但是这些基础课程，由于多少年也没有怎么变过，因此不管怎样都是需要扎实掌握的。也许上学的时候你感觉不到有多大的用处。但是进入实际的开发工作中，是否能够掌握扎实的基础知识往往决定了一个开发工程师的上限，这也是很多大的互联网公司无论是校招还是社招，都侧重于一些底层知识考察的原因。毕竟，你会使用什么东西只能决定你的下限，而你的基础知识和学习能力才决定了你的上限。</p>

<p>此外，其实很多平时开发中的一些技术都可以类比到一些基础知识的。比如，我们经常为了提高查询性能而使用的缓存技术，和为了兼容CPU和IO速度不匹配的而设计的CPU Cache就是同样的东西；操作系统中的进程间通信方式和服务之间的异步同步通信也是差不多的道理。诸如此类，其实计算机科学基础凝聚了很多精华的设计，无论是计算机硬件架构、计算机操作系统还是计算网络。</p>

<h2>知其然更要知其所以然</h2>

<p>经常遇到来面试的工程师，他们简历上写了很多项目，也用过很多技术，怎么看都是非常不错的候选人。但是面试一旦深入到原理或者是优化层面，很多工程师甚至是一些公司的资深架构师都会支支吾吾，答非所问或者说是没关注过。听到最多的解释就是业务压力太忙，没有时间去研究这个。其实，自我经历来看，业务忙是原因，但是没有时间却肯定是借口，毕竟阅读一个项目的源码虽然比较耗费时间，但是去网上看看已有的原理分析其实是花不了太多的时间的。归根结底，还是没有一种知其然更要知其所以然的基本意识。很多东西，你学会了使用会很兴奋，但是你有没有想过这么兴奋的功能是如何实现的呢？最简单的例子，Java中的HashMap，大家都在用，但是他到底是怎么实现的呢？很多人甚至都不知道这和数据结构课程上的哈希表是什么关系，更别说让他说出解决冲突的方式了。</p>

<p>这也可以映射到现在的一种现象：很多开发工程师工作了很久，看着经验丰富，但基本都是拿着一年的工作经验重复n年的。基本上每一份工作，每一个项目都在那里做重复劳动，而且也并不去考虑如何避免重复劳动这件事。</p>

<p>进一步的，除了遇到问题再去看源码、究底层，主动阅读经典类库、高质量开源项目的源码以及其他同事写的代码，学习其中好的架构、设计、编码风格以及类库的使用也是促进自身技术进步的一个非常有效的方式。</p>

<p>这也牵扯到了技术的广度和深度的问题。就我自己来看，对于刚刚毕业或者刚刚入职的工程师来说，首要的是深度问题，只有你在某一领域有了深入的研究和造诣了，你才能融汇贯通，迅速地扩大自己的知识面，在广度上做到突破。而对于有一定工作经验的工程师来说，虽然深度不是那么必须了，但是遇到的问题、新学到的东西还是刨根问底才好，否则一旦出现问题再去盲羊补牢会让你显得非常被动，也不利于自己的技术发展。毕竟，一个什么都做过、什么都用过却什么也不精的人可替代性太强了。</p>

<h2>动手实践</h2>

<p>学习领域有所谓721模型：个人的成长70%来自于岗位实践，20%来自向他人学习，10%来自于培训。虽然这种理论存在争议，但在笔者看来对于程序员来说按照实践、学习和培训的方式进行重要性排序是合理的。普遍公认的一种学习技术的最佳实践-“项目驱动型学习”，也就是这里说的动手实践。很多技术，只是看书，你会云里雾里，看了就忘。必须要经过你自己的实践或者项目中使用到了这种技术，你才能很快地掌握并熟练。此外，现在朋友圈、微博上都充斥各种所谓干货，很多人阅读大量的资料自以为收货满满，其实对于里面的东西根本就没有去实践过。甚至有时候就是感叹一下别人真厉害而已。真正的干货是需要自己消化的，消化的一种最好的模式就是实践，无论是对资料中的例子还是一笔带过的知识。</p>

<p>动手实践能够让你快速入门，但只有频繁练习才能让你熟练使用。“一万小时”理论讲的是任何一个行业都至少需要一万小时的实践才能成为专家。先不去争论此理论是否正确，可以想想当你长时间不写代码或者不用某个技术后你再去做相关的开发，那种生涩陌生感想必是每个人都有体会的。可见对于研发这个角色，频繁练习是有多么的重要。</p>

<p>当然，这里的频繁练习并非指的重复劳动。应该是带着自己的思考去练习，多去想一下为什么这么做？有没有更好的方式？</p>

<h2>持续学习</h2>

<p>“活到老，学到老”这句话用在程序员这个职业上再合适不过。IT技术尤其是互联网开发中的技术，其迭代是非常迅速的。也许你今天学的，过不了几年就成了被抛弃的。虽然相比起前端技术，后端技术算是比较稳定的，但相比起其他行业，迭代速度还是非常快的，像Struts这种当年火的一塌糊涂的技术现在也成了过时的东西。因此，一定要对新事物、新技术具有敏感性，要不断地去涉猎业界最新的知识点，扩充自己的知识库。而学习新的知识的时候，与读一些书籍和网上的博文相比，直接阅读相关知识的官方文档是笔者推崇的方式，毕竟经过二次加工的书籍、博文很多时候由于写作者水平或者个人理解的问题会有错误或者偏离原作者的意思。而由于目前IT技术绝大多数都源自欧美，欧美的技术水平也领先国内很多，因此英文对于IT技术从业者的要求也是比较高的，需要达到熟知各种计算机术语，通畅地阅读各类英文资料的水平才不至于在学习方面落后。</p>

<p>这里还需要提到一点就是要“逃离舒适区”。人对自己熟悉的东西都比较亲切，对自己熟练掌握的技术一般也能够自信地使用，然而当需要使用自己没接触过的技术时，很多人就望而却步、不敢尝试，进而也就丧失了学习新的知识、扩充自己知识库的机会。最好的方式应该是敢于“逃离舒适区”、敢于使用新的技术，这样才能让自己具有持续的学习兴趣，促进自己的持续进步。</p>

<p>还需要注意的是，现在业界有很多技术会议，动辄就是全球、全世界这种名头。经常参加这些会议的人肯定是好学的，但是这种会议上都是些流于表面的东西，把精力放在这上面的人的知识也很容易流于表面。笔者比较推荐通过多阅读书籍来学习，喜欢读书的人也习惯于深度思考，深度思考才能更新形成自己的知识体系。尤其对处于技术上升期的程序员，少参加会议，少混圈子，多看书，多做一些能够提升自己技术能力的事情。除非经济压力大，尽量避免去做一些毫无技术含量的外包项目。</p>

<p>此外，学习计算机知识可以多与现实世界类比，能够加强理解，快速掌握。如并发控制的信号量其实和红绿灯本质是一样的原理，银行多窗口服务其实就是负载均衡。</p>

<h2>计算机思维</h2>

<p>这一点主要说的是要学会用计算机思维来思索问题。所谓的计算机思维本质就是冯诺依曼体系所描述：程序存储，顺序执行。</p>

<p>经常听到的程序员买苹果的段子就是按照for循环、if else等逻辑来判断苹果好坏、计数，并做防御性检查等，这就是计算机思维的体现。而之前一个很火的电影《天才枪手》中记忆选择题答案如果使用计算机思维，那么用两位bit可以表示四个答案，再将四位bit转换为一个十六进制数字，记忆答案就可以减少一般的存储量。</p>

<p>如此，诸如二进制存储、防御编程、循环遍历、位运算、多进程/线程以及常用的数据结构和算法等都应该成为不自觉的意识。能够在遇到问题时，下意识地用这些东西来思考，将人类语言的需求转化为计算机语言。</p>

<h2>自我总结</h2>

<p>相信很多人在平常的工作中，经常会遇到一些问题，然后通过查阅网上资料、询问同事、翻看源码等手段解决了，当再次遇到类似的问题甚至是相同的问题时，还是一头雾水。先不提记忆力的问题，造成这种情形的很大一个原因就是没有去总结。当然，这里的总结不仅仅指的是把你平时遇到的问题记录下来，更深一层的是要找到问题发生的本质原因，如何避免发生同样的问题，从中有什么启发和收获。再进一步的则需要经常将自己一段时间内的知识收获组织成体系或者融入到自己的知识体系中，这样才能举一反三，遇到相同的问题可以有据可循。</p>

<p>而自我总结的方式包括记笔记、写博客、做分享。其中，比起记笔记来说，写博客、做分享是笔者更为推荐的方式。毕竟，和别人交流一方面能促使你对总结质量的把控，另一方面分享知识给别人带来的“荣誉感”反过来会产生某种正向反馈让你更加乐于总结和分享。</p>

<h2>学会规划</h2>

<p>平时和不少工程师聊过关于职业规划的事情，其中有些人对自己的职业道路有很清晰的认识，但更多的则是没有任何概念，只是觉得能挣钱养家就好。很明显前者是属于有规划的人，对于这种人来说，其努力是有目标的，因此走的路也会更踏实，更具有可持续性。</p>

<p>对于研发职位来说，学会规划是一个很关键的特质。而规划可以分为长期规划和短期规划。上面说的职业规划就是一种长期规划，需要高瞻远瞩的定下自己前进的方向。如在五年内成长为一个后端服务架构师就可以看做一个长期规划。笔者自己的长期规划如下：</p>

<ul>
<li>35岁之前只做能提高自己技术水平的事情，能够成为公认的某一个技术领域的专家。</li>
<li>绝不为了钱加入自己并不认同的企业或者团队。</li>
</ul>


<p>而对于短期规划来说，则是一些具体技能、晋升、学习方面的规划。如，笔者近一年的学习计划包括：</p>

<ul>
<li>学习机器学习技术，能够成为“调参工程师”。</li>
<li>加强自身的管理技能，能够带领部门有好的业绩。</li>
<li>完成《增长黑客》、《分布式系统概念与设计》等十本书的阅读。</li>
</ul>


<p>需要注意的是，对于这些短期规划，要设定的比较合理，具有可达性，也要设定好优先级，根据优先级逐步去完成。此外，规划不要定死，可以根据实际情况灵活调整。</p>

<h2>如何学习一门新技术</h2>

<p>上面主要讲述了宏观层面的如何学习技术，而具体到学习某一个新技术，其实也是有法可循的。如下图所示：</p>

<p><img src="//post_images/howtostudy/15127185777816.jpg" alt="" /></p>

<p>由于很多技术的模块非常多，源码也非常复杂，很多时候在看源码的时候会陷进去越看越不得章法，因此这里着重说明一下“看源码”的一个典型流程：</p>

<ol>
<li>阅读该技术的架构文档，了解其总体架构和组成。</li>
<li>根据总体架构，将源码文件以模块或者上下层级进行分类。</li>
<li>从未阅读过的模块中选择最独立（依赖性最小）的模块代码读起。</li>
<li>阅读此模块的功能介绍文档。</li>
<li>阅读此模块的源代码。</li>
<li>一边阅读一边整理调用关系（以表或者树的形式）。</li>
<li>转到第三步。</li>
</ol>


<p>第六步中的调用关系表如下所示:</p>

<table>
<thead>
<tr>
<th>. </th>
<th> init </th>
<th> load </th>
<th> set_xx </th>
<th> method1 </th>
<th> &hellip;</th>
</tr>
</thead>
<tbody>
<tr>
<td>init </td>
<td> x </td>
<td>  </td>
<td> 2 </td>
<td> 1</td>
<td></td>
</tr>
<tr>
<td>load </td>
<td> </td>
<td> </td>
<td> 1 </td>
<td> 1 </td>
<td></td>
</tr>
<tr>
<td>set_xx </td>
<td> </td>
<td> </td>
<td> </td>
<td> 2</td>
<td></td>
</tr>
<tr>
<td>method1 </td>
<td> </td>
<td> </td>
<td> </td>
<td> </td>
<td> &hellip;</td>
</tr>
</tbody>
</table>


<p>其中，数字表示调用次数。</p>

<p>调用关系树也就是调用关系图，类似流程图：</p>

<p><img src="//post_images/howtostudy/call_tree.png" alt="" /></p>

<h2>总结</h2>

<p>程序员是一个金字塔结构的职业体系，越往上，人越少也越难达到。如下图所示：
<img src="//post_images/howtostudy/15022677629156.jpg" alt="" /></p>

<p>一步步走到金字塔顶部需要不断的学习和进步，包括正确的态度、正确的方法以及持续的努力。本文所述只是笔者自己的体会，也是自己一直在践行的东西。除此之外，肯定还有很多其他优秀的方法和思想能够促进这个过程。</p>

<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何成为一名合格的Java工程师?]]></title>
    <link href="http://www.rowkey.me/blog/2018/04/01/pje-release/"/>
    <updated>2018-04-01T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/04/01/pje-release</id>
    <content type="html"><![CDATA[<p>Java开发一直是当前互联网领域最火热的开发技能之一，Java工程师也一直是需求量非常大的开发职位。那么如何成为一名合格的Java工程师呢？一名合格的Java工程师又应该具有哪些技能呢？针对这些，笔者的新书《Java工程师修炼之道》做了一些经验性的阐述和讲解。</p>

<p><img src="http://www.rowkey.me/post_images/book.png" width="250"/></p>

<!--more-->


<p>写作此书的想法萌生于2015年，主要是在研发招聘过程中，尤其是校招，感受到了目前后端工程师教育的匮乏。对于一个后端工程师的技术体系，先不说学生，不少工作很长时间的人都没有一个清晰的认识。就打算写一本后端工程师技术体系书籍的想法，希望能够给选择后端这个方向的人一些指导，也算是对自己的一个阶段性总结。</p>

<p>2016年初，博文视点“永恒的侠少”（张春雨编辑）找到我，算是正式开始写作此书。历时一年多的时间，于2017年8月份交稿，中间历经许多次修改，《Java工程师修炼之道》终于出版。这本书是自己出的第一本书，所以写作的过程一直是如履薄冰的，一直害怕写成一本没有任何意义的烂书，因此一遍遍地去读，一遍遍地修正，也一遍遍地更新一些知识点，希望最后不要沦为一本鸡肋无味的技术书。</p>

<p>本书主要针对一名合格的Java工程师的必备技能做了大纲性的总结和阐述。内容主要来自于公司内的后端工程师学习计划、自己以前的一些博客文章和自己从业以来积累的知识库。包括了工程化、常用开发框架、数据存储、数据传输、Java编程高级知识、性能优化、安全技术等，基本涵盖了Java工程师需要掌握的绝大部分技能点。此外，由于笔者的学习、工作笔记是平时工作中查阅网上资料并经过辨伪后记录下来的零散知识点，难免会有一些对网上资料的引用，特别对这些资料的原创者表示感谢，如果有侵权请联系我。</p>

<p>本书可以看作一本Java工程师的入职指南，也可以看作一本串联Java后端技能点的参考手册，同样可以作为创业团队做技术选型的一个参考。通过精心编排的内容，刚入门的Java工程师能够体系化地学习相关开发技能，有经验的Java工程师则能够查漏补缺，进一步加强自身的Java技术体系。</p>

<p>其中的部分内容，会陆续在我的博客和公众号放出。</p>

<p>希望这本书会给想要学习Java后端开发的同学或者还未形成自己技术体系的Java工程师们带来帮助。</p>

<p><strong><em>需要注意的是，本书关于每一技能的知识点并没有讲述的很深，毕竟一方面确实没必要，每一个知识点都有更厉害的专家和更专业的书籍；另一方面，要面面俱到，这本书的厚度估计得翻三倍，自己确实没这精力。因此，本书并不适合对内容深度有要求的同学。</em></strong></p>

<p><strong>购买</strong>: <a href="https://item.jd.com/12325207.html">https://item.jd.com/12325207.html</a></p>

<p><img src="//post_images/book_jd.png" alt="" /></p>

<p><strong>目录</strong></p>

<blockquote><p>第一章 后端技术导言</p>

<p>1.1 后端基础设施</p>

<p>1.2 Java后端技术概览</p>

<p>1.3 如何学习后端技术</p>

<p>第二章 Java项目工程化</p>

<p>2.1 项目构建</p>

<p>2.2 代码版本控制</p>

<p>2.3 代码质量保证</p>

<p>第三章 开发框架</p>

<p>3.1 依赖注入</p>

<p>3.2 对象关系映射</p>

<p>3.3 日志</p>

<p>3.4 Web MVC</p>

<p>第四章 Spring</p>

<p>4.1 Spring核心组件</p>

<p>4.2 Spring数据操作框架</p>

<p>4.3 Spring Boot</p>

<p>4.4 Spring常用组件</p>

<p>4.5 总结</p>

<p>第五章 数据存储</p>

<p>5.1 关系型数据库-MySQL</p>

<p>5.2 非关系型数据库</p>

<p>5.3 缓存</p>

<p>5.4 搜索引擎-Elasticsearch</p>

<p>第六章 数据通信</p>

<p>6.1 RESTful架构风格</p>

<p>6.2 远程过程调用-RPC</p>

<p>6.3 消息中间件</p>

<p>第七章 Java编程进阶</p>

<p>7.1 Java内存管理</p>

<p>7.2 Java网络编程</p>

<p>7.3 Java并发编程</p>

<p>7.4 Java开发利器</p>

<p>7.5 Java新版本特性</p>

<p>7.6 总结</p>

<p>第八章 性能调优</p>

<p>8.1 调优准备</p>

<p>8.2 性能分析</p>

<p>8.3 性能调优</p>

<p>第九章 安全技术</p>

<p>9.1 Java加密</p>

<p>9.2 安全Http - HTTPS</p>

<p>9.3 Web安全</p></blockquote>

<p><strong>推荐</strong></p>

<blockquote><p>2013年，我和本书作者的接触是从基于网易的一个大型互联网应用合作开始的，我见证了从第一行代码到整个系统服务于亿级用户的过程，并且相信这种经历对开发者来说是一笔巨大的财富，其中大量的开发和实战经验都会在本书中得到充分的体现，相信读者能从书中直接领略到丰富的实战知识。在与本书作者的合作过程中，其对Java技术的热爱与追求孜孜不倦，对问题刨根问底，直到理解透彻、灵活应用，这些都令我印象深刻。这些年，我与本书作者一直保持沟通交流、相互学习，他将近十年的实战经验沉底于本书以实现对后端技术的探索、布道，非常值得开发者与近高窗卧听秋。</p>

<p>后端技术涉及内容非常广泛，Java语言也是互联网开发行业使用的主流语言，相信后续也将继续流行很长一段时间，而本书作者也一直从事Java后端开发工作。在本书中作者比较系统地从总体上描述了后端技术相关的理论知识，包括基础设施、网关服务及框架选型等基本原则，然后以实际经验进行示例说明，接着详细梳理了Java的后端技术，相信读者读完本书后会更全面地理解后端技术。互联网的业务建设需要不同角色的开发者共同协作完成，因此，系统工程化是开发者首先要共同遵守的规范或约定，包括代码规范、版本管理和代码质量检查等。</p>

<p>开发框架的选型进一步地为工程化提供了基础，也能加速推进互联网开发，尽管是否重复造轮子是一个恒久的话题，但是没有永远的银弹，只要在合适的时间里根据团队的能力选择合适的技术框架就好。一般来讲，目前常用的框架包括基本的依赖注入、AOP、事务管理、连接池管理、数据操作、日志服务等，在众多的框架中，本书作者选用目前在Java领域使用最广泛的Spring做深入的分析，详细地说明各组件的基础知识、基本原理和实际使用案例，最难得的是把较多开发者遇到的坑都用真实的示例进行了说明，可以帮助开发者快速地跳过这些伤心地带，同时也把最佳实践画龙点睛地带给开发者。</p>

<p>数据存储无疑是所有系统应用中非常重要的一环，应用的场景用例也和数据库的选型有极其重要的关系，开发者选择关系型数据库还是非关系型数据库是需要根据软件成本与人力成本来进行权衡的，比如是选择MySQL、Oracle等开源或商业的数据库。本书重点从数据库的基础知识、索引和表优化等方面以详尽的示例为更好地选择数据库的存储类型提供了更多的知识。</p>

<p>早期的关系型数据库一般能满足数据达到一定规模的企业的需求，而在互联网业务领域，特别是移动互联网领域内的元数据或者日志数据等，达到亿数量级别是很常见的，这时通常使用非关系型数据库，在非关系型数据库里使用非常多的有MongoDB、HBase等分布式数据库系统。作者在自身的企业开发实践中，得到了大量的使用经验和最佳实践。为了加速后端应用，缓存热数据是加速业务、提高业务性能、提升用户体验的重要手段，通过使用本地缓存、远程缓存进行数据加速、数据预热或提高数据的命中率，是开发者在应用开发的过程中常会遇到的场景。</p>

<p>“路漫漫其修远兮，吾将上下而求索”，后端技术每年都在不断发展，所用技术也有变化，近些年Java语言的发展速度不那么快了，但是总体是在不断前进发展的，本书作者带领的团队一直深耕此领域并希望通过本书为技术开发人员带来更多帮助。</p>

<p>&ndash; <strong>尧飘海，网易云基础服务（蜂巢）首席架构师</strong></p></blockquote>

<hr />

<blockquote><p>Hey！新来的读者，为了吸引你的注意力我真是煞费苦心，但最终还是没能写出一句特别吸引眼球的话来，毕竟写序的我不是标题党出生。此刻我真的非常能理解你拿到新书之后那渴望知识的心情，所以你恨不得一个字的“序”也不要看到，直接到达“最有价值”的知识点。但作为一名资深转业码农（对！你没看错，是“转业”，不是“专业”）还是想说一句，你先看完序，5分钟后到达知识的战场，会更稳！</p>

<p>相信你已经在看“序”了，那么我们来说点正经事。</p>

<p>你的知识体系的养成有3个关键阶段：看山是山、看山不是山、看山还是山。本书的适用人群是“看山不是山”的那些人，如果你恰好处于这个阶段，恭喜你！书钱没白花。</p>

<p>Java是一门非常容易入门的语言，初学者经过初期的学习之后基本能掌握DEMO级别的编程应用。相信读者你已经度过了这个阶段，但是Java庞大的体系可能会把你绕晕，又或者你还没看到Java的生态系统有多么复杂。此时，你需要本书。从事程序员这个工作，到比较高阶的时候，其实是不挑语言的，语言只是工具，而你可以在纷繁复杂中游刃有余。但几乎每一位高手都是先深入一个领域，再横向发展的。你可以不用着急后续的横向发展，先坚定自己学习Java的信心！因为，从广泛的应用场景、顶级的开源生态、未来可期的薪水和职位来说，Java都是非常不错的选择。</p>

<p>敲黑板，画重点！下面来解释一下，为什么本书面向的是“看山不是山”的人群。在度过Java的入门期之后，会有一个烦恼，那就是面对Java这么庞大的体系，我们究竟应该学习什么？选择方向，往往比努力更重要！是使用J2SE编写桌面程序？是使用J2ME编写嵌入式应用？还是使用J2EE编写企业级应用？这些是我们那个泛黄的年代特有的烦恼。而现在的烦恼可能是学Android？还是学Java后端？即便大方向你已经十分坚定，而且选择了Java后端编程，但因为复杂的知识体系和Google发布的各种教程文档，眼前看到的已经不再是清晰的山脉，而是一片迷雾。此时，你需要本书，因为它给你指明了努力的方向。</p>

<p>本书的结构、阐述的方式和大部分的“指南”书籍有较大的区别，本书是以笔记和要点的形式进行呈现的，用现在的话说就是捞干货。本书涵盖的知识，是以现代工程实践中的实际案例出发来组织的，所以知识点范围非常广泛，每一个点都对最关键的“Best Practice”简明扼要地进行了说明。你在阅读本书的时候需要一些相关经验，不然无法跟上作者的节奏，建议在有一定的知识准备后再阅读本书，这样你会受益匪浅。从另外一个角度看，在你有了一定的基础积累之后，本书可以帮助你全面地了解一个现代化的最先进的工程实践是怎样的。本书讲述了目前行业中最常用的，经过了实践的工程方案，这将是你快速进阶的最佳指引。</p>

<p>&ndash; <strong>孙建，随身云（中华万年历）联合创始人&amp;CEO</strong></p></blockquote>

<hr />

<blockquote><p>扎实的基础理论知识是内功底子，丰富的实践经验是招式。如本书作者所说，精妙的招式决定了你的武功下限，而深厚的内功底蕴会承载你所能企及的高度。那么，在后端技术栈中，内功与招式之间如何去关联起来，本书作者以其多年的钻研与实践结合心得，通过本书为你一一梳理。</p>

<p>&ndash; <strong>阙杭宁，网易云信CTO</strong></p></blockquote>

<hr />

<blockquote><p>作者是一位技术人,有多年的Java技术积累,是极少数真正热爱技术的人。在随身云架构师的工作让他有机会站在更高的层次进行系统架构的工作,这些实践经验和平时感悟都沉淀在作者的著作和博客中,相信每位Java工程师都能从中获取帮助。</p>

<p>&ndash; <strong>秦绪震，十露盘科技联合创始人，技术负责人</strong></p></blockquote>

<hr />

<blockquote><p>本书作者根据自身多年的JAVA后台开发经验, 提纲挈领的总结JAVA后台开发的各个关键技术点，这些知识点都是一个合格的JAVA工程师必须掌握的技能。它既可以作为新人的技术学习指南，也可以帮助老手对于自己的知识面进行查漏补缺，是一本非常好的技术指南。</p>

<p>&ndash; <strong>饶洵（蜚天），阿里巴巴技术专家</strong></p></blockquote>

<hr />

<blockquote><p>作为一个在后端摸爬多年的Java开发工程师，这本书让我温故而知新。书中介绍的Java相关的知识技能树，不仅涵盖了我个人多年的Java开发技术知识点，也对我所陌生的一些知识点进行了详解，让我突然有一种继续学习的冲动。</p>

<p>一个Java开发工程师的成长，不仅要对Java语言及其特性有深层次的理解，也需要掌握与Java相关的框架、生态及后端开发知识。这本书正是将后端开发工程师需要掌握的技能做了总结，对于提高开发技能有很好的指导作用。</p>

<p>我推荐这本书，对于具有一定Java基础和后端开发知识的读者来说，该书不仅具有仔细学习的价值，同时也是一本可以经常翻阅的工具书籍，对于Java开发工程师的成长和进阶有很大的指导作用。</p>

<p>一本好的技术书籍，不仅要仔细阅读、学习理解，还需要进行较多的实践，将所看所学进行应用，通过不断地实践，加深知识点印象，从而形成永久的记忆和技能。希望各位读者能够通过掌握书中的知识和技能，逐步成长为技术骨干和专家，从而创造更多的技术输出、产品输出，创造更多的财富。</p>

<p>&ndash; <strong>张小川，网易考拉海购架构师，供应链技术主管</strong></p></blockquote>

<p><strong>后续计划</strong></p>

<blockquote><p>此书一开始是计划有一章专门讲述大数据开发技术，毕竟现在越来越多的公司在构建自己的大数据平台，大数据技术也逐渐成了Java工程师的必备技能。但自己此方面经验较少，自认并没有达到可以向别人输出知识的程度，于是暂时搁置此部分。</p></blockquote>

<p>逐步把部分内容开源在笔者的<a href="https://github.com/superhj1987/pragmatic-java-engineer">Github（superhj1987）</a>中，并补充一些新的内容进来。</p>

<ul>
<li>Zookeepr本来是想放在大数据一章，现在会作为数据存储的一节补充进来。</li>
<li>异步响应式Web框架会补充在开发框架一章，以Vert.x为主，Spring Flux为辅。</li>
<li>Redis加入新版本的特性，并补充如何使用Redis实现分布式锁。</li>
<li>Kafka加入最新版本的特性，尤其是Kafka Streams和Exactly one语义。</li>
<li>Elastissearch基于5.0版本更新。</li>
<li>补充协程到并发编程中。</li>
<li>补充Netty到网络编程中。</li>
<li>使用Hystrix做资源隔离和限流会补充在Java开发利器中。</li>
<li>补充RxJava的使用在Java开发利器中。</li>
<li>补充Java10和Kotlin的部分到Java新版本特性。</li>
</ul>

]]></content>
  </entry>
  
</feed>
