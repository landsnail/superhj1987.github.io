<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2019-04-13T16:26:59+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2016年读过的书]]></title>
    <link href="http://www.rowkey.me/blog/2016/12/30/2016books/"/>
    <updated>2016-12-30T09:13:46+00:00</updated>
    <id>http://www.rowkey.me/blog/2016/12/30/2016books</id>
    <content type="html"><![CDATA[<p>16年由于工作、身体等各种原因，阅读的书籍并不多。主要集中在技术方面。</p>

<ul>
<li><p>计算广告</p>

<blockquote><p>广告是什么？广告的效果如何评价？机器学习如何应用在计算广告上？作者从产品、运营、技术角度分别进行了阐述。是其计算广告课程（清华、北航的研究生课程）的总结和输出，推荐广告系统开发工程师学习和参考，个性化推荐系统的开发者也能够从中得到很多启发。</p></blockquote></li>
<li><p>集体智慧编程</p>

<blockquote><p>机器学习的经典书籍。讲述了集体智慧相关的东西，也是推荐系统相关的一本书。可以看做是机器学习的入门书籍。</p></blockquote></li>
<li><p>七周七并发模型</p>

<blockquote><p>多线程、Actor、Lambda架构等八种并发模式。看完此书，确实能够开阔眼界，拓展思路。和系列中的《七周七语言》《七周七数据库》《七周七Web开发框架》都是类似的拓展眼界的佳作。</p></blockquote></li>
<li><p>写给大忙人看的Java SE 8</p>

<blockquote><p>浅显易懂地对JDK 7和8新特性的概括，很薄的书，很快就能够看完，做到对Java新版本特性的了解。</p></blockquote></li>
<li><p>快学Scala</p>

<blockquote><p>Scala这个编程语言的学习曲线很陡，之前找到twitter的scala school，但是发现讲的有点不到位。此书作为Scale学习的入门书籍值得阅读。</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年读过的书]]></title>
    <link href="http://www.rowkey.me/blog/2015/11/20/2015books/"/>
    <updated>2015-11-20T09:13:46+00:00</updated>
    <id>http://www.rowkey.me/blog/2015/11/20/2015books</id>
    <content type="html"><![CDATA[<h2>技术</h2>

<h3>1. 精益数据分析</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/26278639/">http://book.douban.com/subject/26278639/</a></li>
<li>说明：一本讲述数据驱动创业的书籍，比如在你的产品中如何区分虚荣指标，如何抓住关键指标等。对于每一个商业模式都有其特定的关键指标和底线。而且对于一个公司的几个阶段（移情、黏性、病毒性、营收、规模化）指标也不是相同的。商业模式+阶段决定了你需要关注的指标。</li>
<li>进度：100%</li>
</ul>


<h3>2. 推荐系统实践</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/10769749/">http://book.douban.com/subject/10769749/</a></li>
<li>说明：讲述了构建一个推荐系统的基本知识、算法以及架构等。基本涵盖了能实现一个基本的推荐系统所需的相关技术等。看完这本书，基本能对推荐系统入门。</li>
<li>进度：100%</li>
<li>备注：此书上大学时曾经看过，但当时由于没有实战环境，所以没啥印象。此次阅读是基于项目需要，但其中部分牵扯到具体算法的部分没有细看</li>
</ul>


<!--more-->


<h2>非技术</h2>

<h3>1. 他来了，请闭眼</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/25912734/">http://book.douban.com/subject/25912734/</a></li>
<li>说明：犯罪心理学&hellip;</li>
<li>进度：100%</li>
<li>备注：看了电视剧，不过瘾，就直接找书来看了</li>
</ul>


<h3>2. 三体</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/2567698/">http://book.douban.com/subject/2567698/</a></li>
<li>说明：不用多说了，今年最火的小说。一共有三部</li>
<li>进度：30%</li>
<li>备注：看到了第二部《黑暗森林》，然后一直没时间看后面了..</li>
</ul>


<h3>3. 藏地密码</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/2201813/">http://book.douban.com/subject/2201813/</a></li>
<li>说明：一共有十部，讲述了一群人为了一个共同的秘密，在藏地进行探险的故事。</li>
<li>进度：100%</li>
<li>备注：继鬼吹灯、盗墓笔记之后，又一部让我恨不得一口气看完的小说</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术的成长]]></title>
    <link href="http://www.rowkey.me/blog/2014/08/14/grow-up-in-tech/"/>
    <updated>2014-08-14T08:38:01+00:00</updated>
    <id>http://www.rowkey.me/blog/2014/08/14/grow-up-in-tech</id>
    <content type="html"><![CDATA[<p>最近因为一件事情，让自己突然对自己产生了巨大的怀疑。工作一年多，仔细想想貌似真的只是在积累项目经验，而在技术深度上却一直停滞不前。这其中确也有因为之前做产品没有太多空闲时间的缘故，但更多的还是自己一直不得章法。对nginx源码的学习，一拖再拖，想成为这方面的专家却也不知道努力挤出时间或者说没有好的方法让自己合理安排出时间。</p>

<p>毕业的时候自己选择这里，就是想安心的做技术，以求在技术上得到长足的进步。现在却发现在做着一些没那么有技术含量的东西，像某人所说：上学的时候给我一定的时间也能够做出来。虽然我觉得上学的时候，大部分进公司做的东西也能做出来（除非是那种需要基于一定的环境像大数据、高并发才能做的）。但其实我明白，那句话的意思主要强调的是应该潜心去研究一门技术，比如hadoop、storm等，成为一个领域的专家。这也的确是自己的软肋，也的确该好好加强。</p>

<!--more-->


<p>这也牵扯到了技术的广度和深度的问题。这两个的优先级不能一味的说谁优谁劣，技术研究的人肯定倾向于去拓展技术的深度，而面向产品、架构的人应该关心广度多一些吧。当然如果不去精通一门技术，广度却也是无法拓展的。所谓技术上的成长，抛开技术的深度和广度来言，我觉得还是主要指技术思维的拓展和进步。技术领域的很多东西都是触类旁通的，只要你有好的逻辑思维和方法论，那么对于很多东西都是能很快上手直至掌握、运用、精通的。</p>

<p>还有一个上手能力和学习能力的问题，上手能力指的是你掌握然后使用，而学习能力应该是理解并能改进。这两个概念以前没去区分过，现在想想却也是有很大不同的。上手容易，精通难。所谓学习能力，是上手之后能够快速地吸收为自己的东西，能够从自己的角度看待问题，甚至提出自己的改进。很多人接触一个新的技术的确能够很快地上手去运用，但是却很少会深入地去学习这种技术的原理、运行机制之类的东西。这也是优秀开发人员和一般开发人员本质的区别。
学习技术，更是要学习其精髓而非皮毛，知其然更要知其所以然。</p>

<p>其实，总结来看，作为一个技术人，追求的技术上的长进，从多个维度来看，关键的还是项目经验和思维能力的同步提高。当然，如果对某一个领域能深入研究从而成为专家那也是锦上添花的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《白帽子讲Web安全》读书笔记]]></title>
    <link href="http://www.rowkey.me/blog/2013/11/11/web-security-notes/"/>
    <updated>2013-11-11T13:30:20+00:00</updated>
    <id>http://www.rowkey.me/blog/2013/11/11/web-security-notes</id>
    <content type="html"><![CDATA[<p>最近一直在忙着易信公众平台的开发工作，一直没能抽出空来总结一下。周末终于有了一些空闲，就把这本书的笔记写了一下。</p>

<p>整本书四篇十八章，包括世界观安全、客户端脚本安全、服务端应用安全以及互联网公司安全运营四大部分。</p>

<h3>一、世界观安全</h3>

<ol>
<li>黑帽子和白帽子这两个概念，前者指的是利用安全技术进行破坏的哪一类黑客，后者则指的是工作在反黑客领域的安全技术专家。</li>
<li>安全问题的本质是信任的问题。并且安全是一个持续的过程，并不存在所谓的银弹。</li>
<li>安全三要素：机密性、完整性、可用性</li>
<li>一个安全评估的过程可以分为4个阶段：资产等级划分、威胁分析、风险分析、确认解决方案。其中威胁分析的一种建模方法是微软提出的STRIDE模型；风险分析则是DREAD模型，Risk = Probability * Damage Potenial。</li>
<li>白帽子并发有以下几个原则：Secure By Default原则；纵深防御原则（Defense in Depth）；数据与代码分离原则；不可预测性原则。</li>
</ol>


<!--more-->


<h3>二、客户端脚本安全</h3>

<ol>
<li><p>浏览器安全</p>

<p> 同源策略（Same Origin Policy）防止了跨域读写某些资源。
浏览器提供了浏览器沙箱，使进程在一个相对独立的空间运行，能在一定程度上保护浏览器安全。</p></li>
<li><p>跨站脚本攻击</p>

<p> 跨站脚本攻击主要是注入到网站内容中，授权用户访问内容时执行一段恶意代码，从而获取用户的私密信息或者进行破坏。通常叫做XSS攻击，是针对动态网站的攻击。</p></li>
<li><p>跨站点请求伪造</p>

<p> CSRF，指的是伪造出一个请求，诱使授权用户访问，以授权用户的身份去执行请求，从而达到对授权用户信息的读取、攻击等。</p></li>
<li><p>点击劫持</p>

<p> Click jacking，是指将恶意代码隐藏在看似无害的内容后者按钮之下，诱导用户访问的一种手段。</p></li>
<li><p>Html5安全</p>

<ul>
<li>HTML引入了很多新的标签，一些XSS Filter可能并没有覆盖这些新增的标签和功能。比如video、audio、iframe的sandbox。此外使用canvas可以在浏览器环境中实现对验证码的在线破解，大大降低了攻击的门槛。</li>
<li>跨域请求的Orgin Header和Access-Control-Allow-Origin的设置。postMessage的引入，使XSS PayLoad变得更加的灵活。</li>
</ul>
</li>
</ol>


<h3>三、服务端安全</h3>

<ol>
<li><p>注入攻击</p>

<p> 注入攻击是一种普遍的利用数据库SQL语句进行攻击的方式。使用用户提交的数据拼接数据库操作字符串，如果这些字符串中包含一些特殊字符就有可能查询到数据库关键信息。</p></li>
<li><p>文件上传漏洞</p>

<p> 通常的一个问题就是对上传文件的格式控制不严格，并且文件存放的路径可以通过Web路径直接进行访问；另一种方式，就是文件路径是通过表单的方式提交的，可以使用一个特殊字符“\0”截断文件路径，从而实现对脚本文件的上传。</p></li>
<li><p>认证与会话管理</p>

<p> 用户的登录状态一般是进过认证之后保存在服务端的，与服务器端的一系列交互即会话。一般对会话的管理。。。</p></li>
<li><p>访问控制</p>

<p> 对于系统中不同的用户具有不同的权限，对这些权限进行控制即访问控制。如果访问控制不严就容易形成漏洞被利用。</p></li>
<li><p>加密算法与随机数</p>

<p> 系统中对数据进行加密使用的加密算法和随机数生成算法的安全性和健壮性都直接关系到整个系统的安全性。对称加密、非对称加密的密钥的安全性，随机数算法的随机性都是要考虑的问题。</p></li>
<li><p>Web框架安全</p>

<p> 一些经典的使用率较高的Web框架如：Spring、Struts、Hibernate本身会在整个执行体系中有一些安全漏洞。比如前一阵的Struts2的命令执行漏洞，就是因为在OGNL中可以执行JAVA静态方法造成的。</p></li>
<li><p>应用层拒绝服务攻击</p>

<p> DOS，这种攻击是以耗尽服务器资源为目的攻击。DDOS分布式 拒绝服务攻击，是DOS的加强版。防范拒绝服务攻击要从访问入口处进行，限制来自统一IP的访问频率或者就是最大化提升系统的负载能力。</p></li>
<li><p>PHP安全和Web服务器配置安全</p>

<p> 针对与PHP本身的一些API的特点，可以在代码层面进行安全控制。比如，对数据库SQL相关的操作，要对用户输入的参数进行mysql_real_esape等。此外，对于Web Server如Apache http server，对其magic_quote,GLOBAL等配置要权衡关闭和开启是否会对系统的安全造成威胁。</p></li>
</ol>


<h3>四、互联网公司安全运营</h3>

<p>除了在技术层面对安全进行保证外，还可以在业务层面对安全进行最大化的保障。此外，微软提出的 SDL安全开发流程，运用在项目开发过程中能够很好地保障系统的安全。而运营方面的安全保障则能够进一步保证整个系统的安全性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《七周七语言》读后感]]></title>
    <link href="http://www.rowkey.me/blog/2012/11/17/seven-language/"/>
    <updated>2012-11-17T13:39:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2012/11/17/seven-language</id>
    <content type="html"><![CDATA[<p>在微博上看到Robbin老大推荐《七周七语言》一书，去豆瓣上查了一下发现大家对这本书的评价也是非常高，于是就想着去读一下。书买了之后由于找工作一直没有来得及看，随着前段时间把工作定了，就着手对这本书的学习了。从书名来看，顾名思义就是讲了七种不同的编程语言。自己浏览了一下目录，心里也大致衡量了一下，对于这七种语言，我觉得我以后会用到的或者说是能去学的应该也就Ruby、Scala两个，所以就计划大体地浏览一下这七门语言，先有个大概的了解就好。这样每天利用上午的两个小时，一共大约两周的时间，大体把这本书看完了。</p>

<p>这本书一共讲了四种编程范型：面向对象编程、原型编程、约束-逻辑编程、函数式编程。面向对象编程有Ruby和Scala；原型编程是Io；约束-逻辑编程是Prolog;函数式编程有Scala、Erlang、Clojure、Haskell。对于这几种编程范型，书里面最后一章进行了很好的总结，在这里也就不重复了。</p>

<p>在阅读这本书的过程中，经常会在看到某个语言的某个特性时让自己有种狂喜的感觉，让自己感到特别兴奋，有一股强烈的冲动去学习它、去运用到实际中。自己在这过程中也产生了一些想法，思考了一些问题。</p>

<ul>
<li><p>书的一开始是Ruby那一章。其实几年前就曾听闻Ruby on rails的威名，也知道ItEye就是使用的这个技术，知道Ruby以注重程序员效率为主。之前花了点时间进行了学习，但一直没有一个练手的项目，所以也就停留在似懂非懂的地步。这次看这一章，第一感觉仍然是惊喜于Ruby语法的灵活。写Ruby代码就觉得是在说话一样，而且各种方式都可以，让人非常舒服。另外，Ruby的纯面向对象和动态类型特性都极大地提高了编程效率。对于Ruby在性能、并发方面的弱点，随着现在硬件性能的提高以及Ruby自身的改进，已经越来越不是问题。</p></li>
<li><p>对于Io这个语言，自己很陌生，是第一次听说。不过它的原型编程，自己曾在JavaScript中接触过。Io的另一个特色是万事万物皆消息，这个东西确实挺新颖，在处理并发的时候使用actor发送消息、处理消息能达到不错的效果。此外，它的future让我想起了Java中的FutureTask和Future，不知道Java是不是参考Io的。这个机制在多线程环境中也是个很不错的方案。</p></li>
<li><p>Prolog，也是第一次听说，更是第一次听说声明式编程语言和逻辑编程语言。貌似只要描述一个事实和推论，就能写出解决很多难题的程序来。里面对于数独和八皇后问题的编码解决，让我真的是叹为观止。此外，自己也第一次知道了尾递归优化这个技术，对于递归调用，这个优化的确能够大大节省内存占用。但是真的对于这种语言很不适应，也就没太仔细地看。不过，不得不承认的是DSL语言在特定领域确实是无可比拟的。</p></li>
<li><p>Scala，一门混合编程语言，算是面向对象语言与函数式语言之间的桥梁。其运行于JVM之上，加上对函数式编程的支持，使得很多基于Java开发的系统可以在之前的基础上进行改进，极大地提高了编程效率。而且其使用val关键字声明值不可变的变量以及其actor使用了线程池的方式都是对并发不错的解决方案。看到这个语言，我强烈地感觉Scala是一个能够取代Java的高级语言，也特别想去学习一下。也有了计划去进一步接触和使用。</p></li>
<li><p>Erlang，这个语言之前看到过，知道是一个针对并发的编程语言。不过看了书才知道其是基于Prolog而来的。其“就让它崩溃”的错误处理策略显得非常健壮，另外并发方面采用的是开销极小的轻量级进程也是一个优势。最让我惊叹的是它的列表解析功能，一个典型的例子就是能够轻易的向一个列表中加入新的属性。</p></li>
<li><p>Clojure，又一个陌生的语言，一个JVM上的Lisp实现，也就是一个Lisp方言。对于Lisp自己也是从未接触过。不过从Lisp字面上的意思来看就是一个列表语言，即取列表第一个元素作函数，其余元素做参数。另外就是在Lisp中数据即代码、代码即数据。这里最让我惊异的是其采用事务内存STM和原子来解决并发问题，算是一个亮点。此外，使用延迟计算解决斐波那契数列和阶乘问题以及Clojure-Java互操作对Java语言的扩展也都是很突出的优势。</p></li>
<li><p>最后一个语言Haskell是一个纯函数编程语言，也是本书一个让自己看了很久也没搞明白的语言。可能是对于函数式编程自己就是个小白的缘故吧。不过好歹是弄明白了柯里化的意思，也看到了惰性计算的好处。此外，对其中的monad这个为了弥补函数式编程在命令式风格编程方面的缺陷采用的技术，自己看了好几遍还是很迷糊。书上说这是Haskell的精髓，弄懂这个能学到很多东西。自己打算以后有时间再回过头来好好研究一下这个东西。</p></li>
</ul>


<p>总之，这本书确实是一本不可多得的好书，值得好好研读一下。强烈推荐！</p>
]]></content>
  </entry>
  
</feed>
