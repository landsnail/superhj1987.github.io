<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: work | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/work/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2019-03-06T10:38:20+08:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[管理的一些要点]]></title>
    <link href="http://www.rowkey.me/blog/2018/07/28/manage-notes/"/>
    <updated>2018-07-28T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/07/28/manage-notes</id>
    <content type="html"><![CDATA[<p>去年以及今年由于工作需要，参加了公司请的美国管理协会的《高价值经理人》及敏捷OKR绩效管理的培训课程，此外也阅读了《格鲁夫给管理人的第一课》、《架构即未来》、《技术管理之巅》、《OKR：源于英特尔和谷歌的目标管理利器》几本书。总体来看很多管理的理论其实日常自己也在实践，不过这些书的确让自己形成了自己的管理体系，能够有序有法的进行一些管理实践。本文从通用管理和技术管理两部分总结其中最让自己感到受用的几点心得。</p>

<!--more-->


<h2>通用管理</h2>

<ul>
<li><p>管理是推，领导是拉，领导设定目的地和通往目的地的路线图，管理设法达到目的地。</p></li>
<li><p>有效的管理是在期望的时间以可能的最低成本完成期望的品质。</p></li>
<li><p>任何工作都有产出，需要设定好指标衡量产出。疏与度量注定事情永远不会改变。</p></li>
<li><p>在一件事情越早的环节发现问题那么解决问题的成本就越小。</p></li>
<li><p>作为管理人员，要去做高杠杆率的事情，比如传授技能、知识、价值观等。</p></li>
<li><p>会议分为两种：过程导向会议和任务导向性会议。前者是规律化的，是有必要的，可以选择效率高的方式；后者是临时的，需要尽量减少此种会议。</p></li>
<li><p>凡是有会议每个参会者都要有会议记录，可以防止开会的时候开小差。</p></li>
<li><p>全体会议一定要有一个主持者，避免陷入两人交谈。主持者最好是一个职位较高的人，可以避免同级全体综合征。</p></li>
<li><p>规律周期性的一对一沟通是非常有必要的，尤其是对于不喜欢主动沟通的属下。</p></li>
<li><p>需要建立有效沟通机制和处理问题的模式，如例会，避免下属缺乏反应问题的渠道而抱怨。</p></li>
<li><p>将员工可以划分为四象限，不同的人适用的管理方法是不一样的。对于第一象限的人，需要提供其更多的机会，做好适当的监督即可；对于第二象限的人需要给予工作上的指导，使其能够走到第一象限；对于第三象限的人，需要解决其心理问题；对于第四象限的人则需要谈话改进。</p>

<p>  <img src="//post_images/readiness.png" alt="" /></p>

<p>  总体来说，要做第一和第二象限的人。坚决杜绝成为第四象限的人。</p></li>
<li><p>需要根据工作成熟度的不同，适当的干涉下属工作，做好必要的监督。</p></li>
<li><p>可以把权利下放，但必须对其结果承担所有的责任。把赞扬留给团队，承认失败并公开的承担责任。</p></li>
<li><p>推行某种制度/规范的时候合理的做法是先降一个力度，等适应后再100%推行。</p></li>
<li><p>敏捷性组织有利于可扩展的组织架构。</p></li>
<li><p>亚马逊的两张比萨饼团队：任何一个团队的规模不能大过两张比萨所能喂饱的人数，超过则需要拆分。</p></li>
<li><p>AKA（All Know All Things）。要营造一种公开、公平的氛围，不搞遮遮掩掩的事情，让大家都知道所有的事情。</p></li>
<li><p>混血性组织（组织之间有人员交叉，在不同的组织中担任不同的角色）需要双重汇报。</p></li>
<li><p>决策权利不能仅仅靠职位决定，还需要考虑专业技能和知识。</p></li>
<li><p>使用KPI做绩效考核如果遇到诸如难以打分、沟通不畅、抱怨强制分配等问题可以采用OKR做考核管理。</p></li>
<li><p>借鉴Google，可以采取<strong>半年绩效考核（自评+他评）+OKR->总分</strong>的方式做考核。其中采取半年的节奏是一方面是为了和OKR季度回顾的频率错开，另一方面对于某个重大失误可以凭借后续的其他贡献做中和；自评是需要自己陈述考核周期内的工作，他评需要被考核人邀请和自己工作相关的n个人给自己打分/评价；OKR部分的最终得分只是作为参考；总分最后由直属Leader综合考虑几个方面打出。</p></li>
</ul>


<h2>技术管理</h2>

<ul>
<li><p>公司不同时期的重点技术工作</p>

<ul>
<li>初创期：开发产品原型，做技术储备</li>
<li>发展期：保障产品升级、制定技术服务体系，处理业务部门的需求和抱怨</li>
<li>成熟期：技术产品创新效率的提升</li>
</ul>
</li>
<li><p>布鲁克斯定律，研发者的生产力随着团队规模的增加而减少。努力的成本是团队规模的平方。so，技术团队的规模需要控制，人数过多的话需要考虑分拆。</p></li>
<li><p>技术需要与业务高度融合，需要培训懂业务的技术专家，切忌离开业务空谈技术。</p></li>
<li><p>十人以上技术团队可以采取轮岗来提高大家的技术热情和技术广度，但需要做好岗前培训，尤其对于技术门槛较高的岗位。</p></li>
<li><p>理解事故和问题的区别。事故需要立刻解决，而问题是要找到事故的原因。</p></li>
<li><p>以价值为导向，建立需求管理闭环，给业务需求方设定信用分，价值预估，上线后进行价值验证以判定价值达成率，从而直接影响信用分。</p></li>
<li><p>面试可以采取行为面试法，即给予实际案例看其解决问题的专业能力和思维能力。</p></li>
<li><p>技术团队超过300人需要建立职业发展体系、能力发展体系以及培训发展体系。</p></li>
<li><p>技术管理者需要发展三方面能力：专业能力、领导能力以通用能力（沟通能力、执行力、团队协作、责任心等）。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年读过的书]]></title>
    <link href="http://www.rowkey.me/blog/2018/02/06/2017books/"/>
    <updated>2018-02-06T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/02/06/2017books</id>
    <content type="html"><![CDATA[<p>2017年一共阅读了九本书，包括技术和管理，并且参加了一次“高价值管理人”的管理培训课程，在技术和管理方面都有了一定的学习，得到了一些进步。</p>

<!--more-->


<h2>技术</h2>

<ul>
<li><p>架构真经</p>

<blockquote><p>虽然是基于电商系统进行的讲解，但是其很多架构原则都是普适的。其中讲的很多东西都是自己在实践中做过的东西。经过理论的总结之后，确让自己有了更深的思考。强烈推荐架构入门者阅读此书。</p></blockquote></li>
<li><p>聊聊架构</p>

<blockquote><p>这本书还没出来之前，各路技术大神评价非常高。出来之后，很多人都在吐槽这本书在故弄玄虚。其实，就我来看，前几章确实有点哲学的感觉，但相信有架构经验的人是能够有共鸣的。架构的本质也的确和哲学有关系。这本书比较适合有一定架构经验的工程师来阅读，并不适合经验尚浅者。</p></blockquote></li>
<li><p>Java性能权威指南</p>

<blockquote><p>一本涵盖Java调优方方面面的书籍。从JVM内存、JIT到集合使用等等。虽然我们一直强调不能“过早优化”，但是对于一些应当普遍意识到的优化措施还是越早越好的，否则当产生了问题再来优化，成本反而会更大。强烈推荐Java工程师阅读此书。</p></blockquote></li>
<li><p>大数据之路-阿里巴巴大数据实践</p>

<blockquote><p>讲述阿里巴巴大数据平台的演化之路。这本书讲的很多东西虽然都是阿里自研的，并没有全部开源。但是很多软件的使用兼容了开源软件，尤其是一些诸如解决数据倾斜问题、去重指标计算的思路也是普遍适用的。对照一下，可以理出自己公司在大数据平台上哪些做的不错，哪些还没做，哪些需要优化。</p></blockquote></li>
<li><p>亿级流量网站核心技术</p>

<blockquote><p>本书作者是IT著名博主，自己上学时就看过他写的Spring系列。因此在此书出版之前就觉得应该是本好书。读完此书，学到了一些东西，比如Nginx+Lua/Openrestry在高并发、大流量场景下的使用、Consult的统一配置、使用Lua脚本做Nginx动态负载均衡等。但有点令人失望的是，很多东西都是一笔带过，尤其是穿插了大量类库的使用代码（自我觉得出版书籍一定要避免大量代码，完全是可以放到Github上，而且类库的使用代码完全是可以阅读官方文档的）。比较适合没有架构经验的人来了解一下大公司架构使用了哪些技能，有经验的则可以当做一本参考手册，查漏补缺。</p></blockquote></li>
<li><p>响应式微服务架构（Reactive-Microservices-Architecture）</p>

<blockquote><p>O&#8217;Reilly的系列电子书。讲述了在设计分布式系统时候的一些原则，在架构层面指导微服务的实现。</p></blockquote></li>
</ul>


<h2>管理</h2>

<ul>
<li><p>格鲁夫给经理人的第一课</p>

<blockquote><p>公司管理层统一学习的一本管理书籍。第一次系统地学习了管理方面的知识，印证了很多实践中已经在采取的方法的合理性，也让自己有了新的管理思路。强烈推荐给刚刚进入管理领域的人。</p></blockquote></li>
<li><p>技术管理之巅</p>

<blockquote><p>不同于其他管理书籍，此书着重于从技术Leader角度讲述如何管理研发人员，打造高效技术团队。其中如何量化研发人员的绩效指标给了自己不小的启发，后面也运用了起来。此外，如何建立研发职级体系、如何敏捷管理项目等等都是可以借鉴的地方。</p></blockquote></li>
<li><p>架构即未来</p>

<blockquote><p>《架构真经》的姊妹篇，早于《架构真经》，不仅仅讲述了技术架构的知识，更让我受用的是前面部分讲的“构建可扩展的组织架构”。对于诸如管理和领导、敏捷组织架构、问题和故障等等的概念讲解的非常透彻。而后面技术架构这一块则是对《架构真经》的一个引子。</p></blockquote></li>
</ul>


<h2>2018</h2>

<p>2018年需要花大量精力在技术管理和机器学习方面，暂定需要阅读的几本书如下：</p>

<ul>
<li><p>OKR: 源于英特尔和谷歌的目标管理利器</p>

<blockquote><p><strong><em>截止2018.02.06已经完成阅读。</em></strong>此书是公司管理层进行统一学习的一本书，不厚，花了三个晚上大约6个小时就读完了。讲述了什么是OKR、OKR的好处、如何使用OKR等等，推荐想要进行OKR实践的管理人员阅读。</p></blockquote></li>
<li><p>微服务反模式和陷阱（Microservices AntiPatterns and Pitfalls）</p></li>
<li>机器学习实战 &amp;&amp; 机器学习西瓜书</li>
<li>Tensorflow实战</li>
<li>深入分布式缓存</li>
<li>高性能MySQL</li>
<li>尽在双11，阿里巴巴技术演进与超越</li>
<li>Clean Architecture, A Craftsman&rsquo;s Guide to Software Structure and Design</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有效解决问题]]></title>
    <link href="http://www.rowkey.me/blog/2017/10/20/solve-problems/"/>
    <updated>2017-10-20T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2017/10/20/solve-problems</id>
    <content type="html"><![CDATA[<p>来自于内部的一次培训，主要讲述了如何有效地解决问题，包括识别问题、描述问题、分析问题、找出方案、决策问题等。</p>

<!--more-->


<p><img src="//images/blog_images/solve_problem/arch-2.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-3.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-4.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-5.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-6.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-7.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-8.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-9.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-10.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-11.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-12.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-13.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-14.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-15.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-16.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-17.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-18.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-19.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-20.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-21.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-22.jpeg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发体系这点事]]></title>
    <link href="http://www.rowkey.me/blog/2016/08/17/dev-manage/"/>
    <updated>2016-08-17T20:13:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2016/08/17/dev-manage</id>
    <content type="html"><![CDATA[<p><strong><em>&ndash;本文于2016.08.23最新更新&ndash;</em></strong></p>

<p>早在读研究生的时候，自己负责着实验室的项目，就一直在思索如何建立一套简单又高效的研发管理体系，能够在保证项目高质量顺利进行的同时还能够提升团队成员的技术level。后来在自己在校的几次小的创业中，也做过一些尝试。直到毕业后进入前东家，在几个项目的参与过程中，见到了大公司的研发管理是如何进行的。直至加入目前的公司，将研发体系梳理一遍，且学且抄且实践，对这一套东西算是有了一定的实践感悟。</p>

<p>对于一个研发管理体系，其核心是围绕着产品的整个生命周期来进行的。因此，根据一个产品的生命周期，可以把研发体系划分为几个关键的环节，如图所示：</p>

<p><a href="http://www.rowkey.me/images/blog_images/dev-system-overview.png" target="_blank"><img src="http://www.rowkey.me/images/blog_images/dev-system-overview.png"/></a></p>

<p>更为具体的一个研发流程则如下图所示，标注了每一个环节的参与角色。</p>

<p><img src="//images/blog_images/prject_manage_detail.png" alt="prject_manage_detail.png" /></p>

<p>可知，即时沟通和技术提升虽然不属于研发流程中的某一个环节，但它们是贯穿整个研发体系不可或缺的一部分，有着不可替代的作用。此外，任务管理需要对任务做整个研发生命周期的管理，除了作为其中的一个关键环节，也是贯穿整个研发流程的。</p>

<ul>
<li><a href="#%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86">任务管理</a></li>
<li><a href="#%E6%96%87%E6%A1%A3%E5%8D%8F%E4%BD%9C">文档协作</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%8D%8F%E4%BD%9C">代码协作</a></li>
<li><a href="#%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81">质量保证</a></li>
<li><a href="#%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2">自动化部署</a></li>
<li><a href="#%E6%95%85%E9%9A%9C%E7%AE%A1%E7%90%86">故障管理</a></li>
<li><a href="#%E5%8D%B3%E6%97%B6%E6%B2%9F%E9%80%9A">即时沟通</a></li>
<li><a href="#%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87">技术提升</a></li>
</ul>


<!--more-->


<h2><a name='任务管理'></a>任务管理</h2>

<p>任务管理是产品整个生命周期首要的环节，其对研发体系也是至关重要的。项目生命周期模型，传统的有五种：瀑布模型、原型模型、螺旋模型、增量模型、V模型，而现在最为流行的是迭代开发模型，敏捷开发则是采用迭代模型的一种典型项目管理方法集合。Scrum是目前敏捷开发中最为大家熟知的开发模式(XP极限编程也是一种比较常见的敏捷开发模式)，其开发流程的概览如下图所示：</p>

<p><img src="http://www.rowkey.me/images/blog_images/ScrumModel.jpg" style="width:500px"/></p>

<p>简单来说，Scrum是依赖于三种角色、四种会议的自组织、信息透明化、成员平等的一种敏捷开发流程。更为详细的描述，可参见此篇文章：<a href="http://blog.devtang.com/2014/09/13/scrum-introduction/">http://blog.devtang.com/2014/09/13/scrum-introduction/</a>。</p>

<p>除了Scrum之外，看板是最近兴起的另一种开发模式，在最近很火的美剧《硅谷》里面“魔笛手”就是采用的这种方式。看板将工作流程形象化，首先把工作细分成任务并根据需要将任务分为Pending、Analysis、Development、Test、Deploy等状态，然后根据任务的进行，在几种状态之间进行转换。对比Scrum，看板使用开发周期作为计划和过程改进的度量数据，不强调迭代的概念，也没有很强的时间期间概念，也不需要制定任何团队角色。对于看板方法论的详细介绍可见此篇文章：<a href="http://kanbanblog.com/explained/">http://kanbanblog.com/explained/</a>，<a href="http://www.jianshu.com/p/e44b1038c9cf">http://www.jianshu.com/p/e44b1038c9cf</a>这篇则做了比较形象具体的说明。这里有一点需要注意，Scrum和看板并非是对立的，它们是可以结合起来使用的。使用看板来管理每一次迭代的任务是一种可取也是很常见的精益实践。</p>

<p>依赖于任务管理方法论，市面上很多软件都做了相应的支撑，自己曾经使用过的任务管理软件如下：</p>

<ul>
<li><a href="http://www.redmine.org/">Redmine</a>: 这个是自己最开始接触的任务管理软件，使用也比较广泛。比较遗憾的是，redmine安装有点繁琐，而且基于ROR，如果需要二次开发，需要重新学习ROR。</li>
<li><a href="http://tower.im">Tower.im</a>: 这是一个任务管理云服务，界面设计的简单优雅，一目了然。很多小的私有项目，我都会用这个进行任务管理。类似的还有teambeation等。</li>
<li><a href="http://www.atlassian.com/software/jira/">Jira</a>: 这款软件是商业版的任务管理软件，对于这一块做的是非常专业的，很多大公司都在使用。但是，它是收费的。所以，如果你要用，要么付钱，要么去破解。。。</li>
<li><a href="http://www.zentao.net/">禅道</a>：这款软件最早是叫做bugfree, 是开源且主要针对Bug管理的，后面慢慢发展成现在的集任务管理、bug管理、团队管理等的项目管理软件，并开启了收费策略。总体来说，功能很全，也比较专业，但是ui上有种传统it系统的感觉，流程上也不具有现在敏捷开发的一些优势。</li>
<li><a href="https://github.com/kanboard/kanboard">Kanboard</a>: 是实现了Kanban方法论的任务管理软件。</li>
</ul>


<p>对于个人的项目，其实依赖于tower.im这种第三方云服务完全足够了。如果担心数据安全的话，那么推荐在内网搭建Kanboard进行看板任务管理。</p>

<h2><a name='文档协作'></a>文档协作</h2>

<p>研发中首当其冲的就是文档撰写，这个很多情况下都决定了项目的可维护、可管理性。有人会说现在流行的是敏捷开发，根本不需要写文档，但其实这是对敏捷的误解。敏捷开发强调的是快速试错、快速迭代，而非简单粗暴，<strong><em>对比传统开发模型虽然并不强调文档，但并不代表不需要</em></strong>。对于一个项目，从开始就需要需求文档、产品原型文档、项目进度文档等等，而到了研发这一步，在系统实现、写代码之前最好的就是先“想”再做，而“想”的一种比较好的输出形式就是文档。对于一个软件系统，一般来说需要写的文档有以下几种：</p>

<ul>
<li>系统业务流程文档：描述系统业务逻辑的文档，能清晰的说明真个业务的流程。</li>
<li>系统架构设计文档：对整个系统的架构的描述，需要包含系统的各个关键组成模块以及相关的各个关键技术点等。</li>
<li>系统功能模块概要设计/详细设计文档：对于某一个模块的流程、逻辑的描述。</li>
<li>数据DDL/DML文档: 与系统相关的数据库的DDL和DML文档，对于前者，是需要包含所有的操作的，而对于后者，必不可少的是查询语句，用来提供给DBA，来做查询sql的review，以保证索引的正确建立和查询语句的合理等。</li>
<li>系统部署文档：描述系统关键部分部署在哪里，需要做哪些配置。</li>
<li>系统发布ChangeLog：对系统每次发布的改动进行描述，包括数据库、缓存、数据队列、新增/变动了哪些依赖服务等。此外，对数据库、缓存这种关键服务的量化分析也可以写在这里。</li>
</ul>


<p>尤其对于一些相对复杂的功能来说，整理思路形成文档，不仅可以让自己逻辑清晰，也让后续维护的人能够更快地接手。当然，这些并不是死板要求的，应该根据实际的业务选择，不一定所有的文档都是必须的，也不一定要分开这几个文档写(可以将这些内容集成在一个文档中，这也是目前我经常采用的方式)。这些文档的范例可以见：<a href="https://github.com/superhj1987/awesome-tech-collections/tree/master/document">https://github.com/superhj1987/awesome-tech-collections/tree/master/document</a>。</p>

<p>而对于文档撰写协作的方式，我自己经历过的有以下几种：</p>

<ul>
<li>使用word撰写各种文档，提交到svn等版本管理工具上</li>
<li>使用google doc进行协作</li>
<li>使用word撰写文档，然后提交到项目管理软件中进行管理</li>
<li>使用markdown撰写文档，提交到版本管理工具上</li>
</ul>


<p>我自己比较推崇的是使用markdown撰写文档，然后使用git、svn版本管理工具或者是其他团队协作工具做版本管理。之所以使用markdown, 能够极大地节省使用word时调各种格式、样式耗费的时间。对于程序员来说真的是如虎添翼。如果是对文档多人协同编辑有刚需的团队，可以选择使用google doc或者国内的石墨(<a href="http://shimo.im">http://shimo.im</a>)。</p>

<p>此外，在移动app开发中，还有一个非常关键的文档就是<strong>api文档</strong>，是服务端提供给客户端调用接口的说明文档。比较简单直接的方法就是定制一套api文档模板，然后在写接口代码之前或者之后，按照模板编写接口文档。此外，可以实现一套根据源码自动生成文档的机制，在代码编写的同时就能自动生成相应的接口说明文档。在使用Spring MVC开发的后端应用中，个人推荐<a href="https://github.com/springfox/springfox">SpringFox</a>，使用此项目能够通过在Controller中加入相应的注解信息从而自动生成Api接口文档，同时也提供了在线调试的功能，极大减少了api文档的工作量。</p>

<h2><a name='代码协作'></a>代码协作</h2>

<p>对于一个技术团队，最最关键的肯定是写代码。一个人单打独斗那倒好说，但是这就像篮球场上，一对一靠个人硬实力，但是5对5，那就不仅仅是一个人实力强就赢得了的了。因此对于技术团队来说，代码协作是至关重要的一个部分。</p>

<ul>
<li><p>代码版本管理：Git + SVN</p>

<p>  几年前最流行的代码版本管理工具是svn（当然此前，更加古老的还有cvs之流），的确为程序员们的代码管理带来了很多便捷。但到了现在，相比起这种集中式代码管理，目前最为火热的当属git这种分布式代码管理工具，在Linux上直接搭建git服务器来构建项目的git系统的。而这几年随着Github以及类似系统的涌现，对于很多私人项目我都是采用oschina或者gitcafe提供的git私有代码管理来做代码版本管理的。当然，对于公司来说，有很多开源类github系统可以搭建在企业内网。详细的可以参见：<a href="http://www.rowkey.me/blog/2015/11/13/your-own-github/">搭建自己的github</a>。当然，对比svn，git也是有缺点的。无法天然的支持对于目录级别的权限管理和基于目录的版本管理操作是目前不得不结合svn和git一起使用的重要原因。通常情况下，可以使用git做版本管理，辅以svn做基于目录级别的发布包管理。</p></li>
<li><p>代码分支/Tag管理： Git Flow</p>

<p>  其实分支/Tag管理是代码版本管理包含的内容，之所以单独出来，是因为对于分支的使用其实还是有一定的原则和技巧的。并非如很多人一样，所有项目就一个master分支，所有修改都往这里塞。目前，最为流行的一种基于分支的工作方式就是:Git flow。介绍可以见: <a href="http://www.ituring.com.cn/article/56870">基于git的源代码管理模型——git flow</a>。简单概括就是：</p>

<ul>
<li>master和develop作为主分支。主分支是所有开发活动的核心分支。所有的开发活动产生的输出物最终都会反映到主分支的代码中。master是可以随时发布的分支，而develop则时刻保持最新的开发代码。</li>
<li>辅助分支是用于组织解决特定问题的各种软件开发活动的分支。辅助分支主要用于组织软件新功能的并行开发、简化新功能开发代码的跟踪、辅助完成版本发布工作以及对生产代码的缺陷进行紧急修复工作。这些分支与主分支不同，通常只会在有限的时间范围内存在。包括：

<ul>
<li>用于开发新功能时所使用的feature分支；</li>
<li>用于辅助版本发布的release分支；</li>
<li>用于修正生产代码中的缺陷的hotfix分支。
对于此种开发模型，这里也提供了一个命令行工具：<a href="https://github.com/nvie/gitflow">https://github.com/nvie/gitflow</a></li>
</ul>
</li>
</ul>
</li>
<li><p>代码质量保证：结对编程 + 定期review + PR目前一种比较好的方式。结对编程这个是一个老生常谈的方式，两个人共同承担某一开发任务，互相保证对方的代码质量，在很大程度上能够提高代码质量。而定期review则是让团队所有的成员都能够参与到这个过程中，不仅仅能够保证被review者的代码质量，也能够让团队成员学习到好的代码是怎样的而差的代码又是怎样的。PR是Pull Request的简写，当开发完成的代码提交到主分支时，需要发起pull request，此时团队负责人需要review相关代码，确保没有问题之后，才能accept此次pr。当然，上面讲述的是如何通过人来保证代码质量。除此之外，还可以通过技术上的手段在一定程度上保障代码的质量，这一部分在后续的自动化测试机制会讲述。</p></li>
</ul>


<p>此外，在移动app项目中，一个很普遍的问题就是：<strong>在定义好Api文档之后，客户端如何在后端并没有完成接口开发的情况下开发或者调试程序？</strong>这里有两种方案：</p>

<ul>
<li>客户端做好接口封装，在后端接口未完成前，客户端不经过网络io直接返回静态格式数据。这种方式最好是由客户端定义接口格式数据。</li>
<li>后端将示例接口返回数据写在文件里，接口直接返回静态文件数据。此种方式，由后端定义接口数据格式。另外，有一个开源的工具: <a href="https://github.com/Runscope/httpbin">httpbin</a>可以用来提供接口返回指定格式的数据，中文介绍可见: <a href="https://blog.phpgao.com/how-to-httpbin.html">https://blog.phpgao.com/how-to-httpbin.html</a>。</li>
</ul>


<p>关于客户端和后端的接口代码协作，还有一个Chrome插件<a href="https://www.getpostman.com/">POSTMAN</a>可以使用。后端可以使用此插件在编写完接口后进行自我功能测试，测试无误后可以将接口以文件或者url的形式分享给客户端供客户端参考和调试。</p>

<h2><a name='质量保证'></a>质量保证</h2>

<p>当代码开发完成之后，需要质量保证机制的介入来保证功能的正常运行，从而保证代码是可发布的。一般来说，质量保证的手段就是测试，分为：</p>

<ul>
<li>代码质量测试</li>
<li>功能测试</li>
<li>性能测试</li>
</ul>


<p>代码质量测试一般是在编译打包代码之前进行，通常是自动化进行的。针对Java项目，自动化代码质量测试可以分为以下几步：</p>

<ul>
<li>源代码规范检查：对于Java来说，代码规范的检查一般使用checkstyle来检查。默认的规范非常严格，这里大家可以根据需要放宽一些规范。</li>
<li>源代码静态质量检查: 常用的工具是pmd, 可以检查Java源文件中的潜在问题, 比如空try/catch/finally/switch语句块等。</li>
<li>字节码bug检查：常用工具是findbugs,基于Bug Patterns概念，查找javabytecode（.class文件）中的潜在bug。如NullPoint空指针检查、没有合理关闭资源、字符串相同判断错（==，而不是equals）。</li>
<li>单元测试：使用junit即可，当然在这里当使用mvn时，其test phrase会默认生成测试报告到${project.build.directory}/surefile-reports文件夹中。这里建议使用coverage生成单元测试报告，其中一个关键的单元测试覆盖率指标达到98%以上才为合格(根据需要自己调整即可)。</li>
</ul>


<p>以上提到的工具，都是有maven插件的。通常情况下，也推荐使用这些工具的maven插件来调用。目前流行的自动化ci工具jenkins、QuickBuild等结合各种丰富的插件可以提供这些功能，将他们集成到一个测试流程并形成最终的测试结果报表。</p>

<p>在代码发布到线上环境之前，一个关键的步骤就是功能测试，通常都是工程师来进行的。需要测试工程师根据产品需求，形成测试用例，然后根据这些用例做相应的测试。测试用例的一个模板如下：</p>

<table>
<thead>
<tr>
<th>用例ID </th>
<th> 功能名称 </th>
<th> 用例名称 </th>
<th> 测试数据 </th>
<th> 前置条件 </th>
<th> 操作步骤 </th>
<th> 预期结果 </th>
<th> 测试结果 </th>
<th> 备注 </th>
<th> review说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- </td>
<td> - </td>
<td> - </td>
<td> - </td>
<td> - </td>
<td> - </td>
<td> - </td>
<td> - </td>
<td> - </td>
<td> -</td>
</tr>
</tbody>
</table>


<p>需要测试工程师根据需求创建并经过研发人员reivew确定测试用例，待到发布前进行测试以及反馈，直到所有测试用例都通过。</p>

<p>对于移动app功能的测试，目前市场上有类似<a href="https://www.bugtags.com/">bugtags</a>这种所见即所得提交测试工具，可以很方便的提交bug。</p>

<p>功能测试通过之后，对于一些对性能有要求的项目，还需要进行性能测试。对于这种测试来说，通常有以下几种方式：</p>

<ul>
<li>测试工程师写性能测试代码来进行测试</li>
<li>使用性能测试工具测试，如LoadRunner、ab等</li>
</ul>


<p>当然，所有这些测试都是在项目发布上线之前进行的，通常是在项目的测试、预发布环境中进行的。</p>

<p>此外，对于测试任务的管理工作一般在任务管理软件中都做了集成。也有类似Mantis这种事专门做缺陷管理的。</p>

<h2><a name='自动化部署'></a>自动化部署</h2>

<p>对于Java项目的发布流程，如下图所示：</p>

<p><img src="//images/blog_images/deploy_process.jpg" alt="deploy" /></p>

<p>使用ci软件可将以上步骤自动化的。</p>

<p>如上图所示，对于一个项目，我们是划分为三种或者四种环境的。</p>

<ul>
<li>测试环境: 这个环境是一个相对来说比较宽松的环境，所有代码的提交都会触发jenkins的自动代码质量检查和部署。测试工程师也是首先在这个环境下进行功能、性能测试的。只有通过了，才能部署到后续的下一个环境。</li>
<li><strong><em>集成环境</em></strong>：这个环境不是必须的，只有当项目出现了两个大的分支并行开发，发布前需要集成两部分代码时才需要这样一个环境。一般来说只使用jenkins进行部署前的打包流程，部署流程由相关人员进行。这个环境也是需要测试工程师进行测试的。</li>
<li>预发布环境：这个环境和线上环境是一模一样的，不同的是此环境下的服务器是不在线上服务器集群中的，并不为用户提供服务。此环境下的项目发布也是需要人工参与的，也必须由测试保证功能和性能的正常。</li>
<li>线上环境：这个环境是比较严格的一个环境。在发布前，一般来说会进行发布确认等一系列上线评审工作后，由项目负责人或者运维人员部署发布。

<ul>
<li>功能列表 vs 实现情况：检查是否已经实现所有计划的功能？如果有某些功能没有实现需要说明原因。</li>
<li>软件演示</li>
<li>测试结果和遗留问题列表：测试用例的情况，遗留的Bug以及情况说明</li>
<li>上线确认</li>
<li>后续任务计划</li>
</ul>
</li>
</ul>


<p>其中，<strong>上线确认书</strong>的一个例子如下：</p>

<table>
<thead>
<tr>
<th>&ndash; </th>
<th> xx项目上线确认书 </th>
<th> &ndash;</th>
</tr>
</thead>
<tbody>
<tr>
<td>需求方验证结果 </td>
<td> 意见： </td>
<td> 确认人：[由各个负责人签字]</td>
</tr>
<tr>
<td>开发确认 </td>
<td> 意见： </td>
<td> 确认人：</td>
</tr>
<tr>
<td>测试确认 </td>
<td> 意见： </td>
<td> 确认人：</td>
</tr>
<tr>
<td>服务器是否需要重启 </td>
<td> [是否需要自动更新那些App?] </td>
<td> 确认人：</td>
</tr>
<tr>
<td>服务器配置影响 </td>
<td> [是否需要增加新的服务器ip,是否需要修改nginx/tomcat，是否新装软件，是否新建域名？] </td>
<td> 确认人：</td>
</tr>
<tr>
<td>数据库更改 </td>
<td> [是否需要修改线上数据库？是否有初始化语句？索引是否正确建立？查询语句是否合理？量化分析数据(包括缓存)是否无误？] </td>
<td> 确认人：</td>
</tr>
<tr>
<td>数据初始化 </td>
<td> [是否有初始化数据？如价格，默认分类等] </td>
<td> 确认人：</td>
</tr>
<tr>
<td>上线评审结论 </td>
<td> [ ]通过 <br/> [ ] 未通过，不能上线 <br/>  [ ] 未通过，但修改完制定Bug后可直接上线</td>
<td> 确认人：</td>
</tr>
<tr>
<td>计划上线时间 </td>
<td> 2016-08-01</td>
<td></td>
</tr>
</tbody>
</table>


<p><strong>后续任务计划</strong>，示例如下：</p>

<table>
<thead>
<tr>
<th>问题描述 </th>
<th> 责任人 </th>
<th> 计划完成时间 </th>
<th> 状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>xx </td>
<td> xx </td>
<td> xx    </td>
<td> xx</td>
</tr>
</tbody>
</table>


<h2><a name='故障管理'></a>故障管理</h2>

<p>由于各种客观原因如带宽、主机配置、流量异常或者程序逻辑不够严谨等原因，线上服务并非100%可用的。研发体系中最后把关的就是这一道故障应急机制。也就是说，一旦发生线上故障，如何快速反应并修复问题，如何避免下一次犯同样的错误。</p>

<p>对故障的快速反应需要依赖于运维的监控机制，包括基础设施层面的监控以及业务层面的监控，一旦发生故障应该立刻发出告警到相关人员。这里可以使用nagios、cacti或者第三方服务(如:<a href="http://www.jiankongbao.com/">监控宝</a>)实现，当然，如果你使用的是云服务，一般也会有相应的云监控服务提供给你的。后续的故障问题定位很多情况下则是取决于你的应用日志打的是否合理，是否有足够的覆盖面的，是否有足够的信息。<a href="https://xiequan.info/%E4%BD%BF%E7%94%A8elasticsearch-logstash-kibana%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E9%9B%86%E4%B8%AD%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0%E5%AE%9E%E8%B7%B5/">ELK</a>和请求链路监测系统(同染色日志系统)是目前比较流行的基于日志的故障定位解决方案。问题一旦定位到了，那么修复就是水到渠成的事情了。</p>

<p>这里需要说明的一点是，上面讲述的是后端的故障快速反应和修复。针对客户端的故障，一般情况下都是由用户发现的。但是由于客户端发布流程的繁琐，很难及时修复一次发布版本的故障，只能等到下次解决。但是，目前一些客户端使用混合开发，其中的h5页面是可以在线修复的，另外，很多安卓app热更新方案也都能在线修复一些代码故障，如<a href="https://github.com/jasonross/Nuwa">Nuwa</a>、<a href="https://github.com/dodola/HotFix">HotFix</a>、<a href="https://github.com/alibaba/dexposed">dexposed</a>。</p>

<p>故障解决完并非最终的结果，之后的故障总结也是故障管理尤为关键的一点。大公司会根据故障产生的影响不同定义不同的故障级别，从而追责到个人，再进一步影响个人的职级评定或者绩效考核、奖金之类的。但这一套却并不适用于小公司，毕竟大多数小公司没有那么完善或者说根本就没有职级和绩效这么一说。其实，追责并不是主要目的，最主要的是如何避免再次出现问题。因此，对于小的创业公司来说，最需要做的就是如何对已经发生的故障做总结，吸取教训。构建一套故障总结wiki则是一种很好的方式。下面是一次故障总结模板；</p>

<table>
<thead>
<tr>
<th>&ndash; </th>
<th> 2016.08.01xxx故障总结 </th>
<th> &ndash;</th>
</tr>
</thead>
<tbody>
<tr>
<td>故障等级 </td>
<td> [故障等级]</td>
<td></td>
</tr>
<tr>
<td>故障描述 </td>
<td> [描述故障发生的现象]</td>
<td></td>
</tr>
<tr>
<td>故障发现时间及发现人 </td>
<td> [xxx于xxxx年xx月xx日 HH:mm 如何发现该问题。]</td>
<td></td>
</tr>
<tr>
<td>故障影响 </td>
<td> [影响时间范围、影响版本范围、影响产品范围]</td>
<td></td>
</tr>
<tr>
<td>故障原因 </td>
<td> [阐述故障发生的原因]</td>
<td></td>
</tr>
<tr>
<td>解决方案 </td>
<td> [详细记录如何解决此次的故障]</td>
<td></td>
</tr>
<tr>
<td>故障教训 </td>
<td> [如何避免下次出现类似的事故]</td>
<td></td>
</tr>
<tr>
<td>责任人   </td>
<td> [责任人签名]</td>
<td></td>
</tr>
</tbody>
</table>


<h2><a name='即时沟通'></a>即时沟通</h2>

<p>显而易见，即时沟通是任何团队都必不可少的一个机制，同样也是研发团队必不可缺的。常用的就是QQ、钉钉或者企业内部的im软件。那么对于小公司或者创业公司，不想用第三方服务的该怎么办呢？之前蘑菇街开源过一个teamtalk的软件，不过后来由于某些原因已经下线。目前，有一款开源的web im软件可以供大家选择：<a href="https://github.com/RocketChat/Rocket.Chat">Rocket.Chat</a>，能够搭建出内网的slack服务(将分散的沟通方式聚集到一个地方，融入到一个信息流中)。</p>

<p>此外，我自己还尝试过使用intellij自带的IDE TALK来进行研发团队的在线交流。使用这个比较好的一点是可以直接做基于代码的即时交流，比如能够发送一个代码片段给同事，他那边接收到之后是直接能在他的项目里相关代码处进行操作的。</p>

<h2><a name='技术提升'></a>技术提升</h2>

<p>一个研发团队，很重要的一点是如何提高团队的战斗力。对于个人来说，在平时的工作中，提高技术的熟练度和深度，在业余补充学习专业知识，提升技术广度，这些都无须多言。那么如何在整体层面或者说是管理上促进团队成员的技术提升呢？可以采取的方式有以下几种：</p>

<ul>
<li>构建内部的技术wiki并建立技术分享机制，鼓励大家以演讲或者技术博客的方式分享自己的技术经验或者教训，既可以对自己进行review又可以给其他成员以启示。这一点，很多公司都是纳入绩效中的。</li>
<li>将一些项目开源，让团队成员能够享受到开源项目带来的各种好处，比如提升个人在业界的知名度、提高编码的水准(毕竟不好的代码，你也不好意思放出去)。</li>
<li>定期举办类似黑客马拉松的比赛，提高团队成员的凝聚力，也能够提升成员解决实际问题的技术能力。</li>
</ul>


<p>自己比较推崇的是第一种方式，但是开始的时候往往会发现很多人是不会主动去分享的。要么是觉得自己的东西技术含量都很低，要么就觉得自己的知识为何要分享给别人。可以采取的办法就是从最初的周期性安排人员进行技术分享，然后慢慢形成一种氛围和习惯，再到后续鼓励大家主动分享。当然，辅以奖品激励或者绩效奖励也是一种不错的方式，但切忌不要忽视一些业务能力很强但不爱或者不善于分享的工程师。</p>

<p>至于项目开源，前提一定是团队的项目真的是高质量并且会对开源社区有贡献的，不能为了开源而开源。尤其是对于一个公司来说，一个开源的项目直接体现了公司技术水准的高低，会对公司的pr、招聘等都带来一定程度的影响。</p>

<p>而黑客马拉松比赛这种方式，尤为关键的一点是要选择合适的主题。一般来说，围绕现实的业务场景来出题不仅能够提升大家解决问题的能力，也能顺便解决实际问题。比如&#8221;根据用户已有行为日志预测用户未来的行为&#8221;、“怎样构建合适的用户质量模型”都是比较合适的主题。此外，借鉴黑客马拉松的这种形式，可以采取类似“每周一题”的做法：在每周例会上给出一道和线上业务相关的问题，如“如何提高信息流的点击转化率”，然后每个人发散思维给出自己的解决方案，最终形成文章发布在内部的技术wiki上。对于每次主题，都会在下周的例会上针对每个人的解决方案进行讨论。</p>

<p>此外，在安排团队成员去调研一种将要使用的新技术的时候，务必要深入到源码层面，这个观念是需要灌输到团队每一个人的意识中去的。去使用一个没有看过源码或者没有掌握其运行原理的开源软件是一件风险非常大的事情，极有可能造成巨大的线上故障。</p>

<p><strong>以上，是自己对于研发体系的一些实践和感悟，很多地方仍然有所欠缺或者并非最佳实践，也一直在探索更好的方案。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年的几点规划]]></title>
    <link href="http://www.rowkey.me/blog/2016/02/18/2016plan/"/>
    <updated>2016-02-18T20:31:11+08:00</updated>
    <id>http://www.rowkey.me/blog/2016/02/18/2016plan</id>
    <content type="html"><![CDATA[<p>明天就要开始新的一年正式的上班了，回想一下过去的2015年，对于自己来说，虽然有不少的收获和成长，但还是令自己比较不满意的。由于某些原因，自己的学习进度以及工作情况都受到了很大的影响，并没有达到年初的期望。不过，至少没有浑浑噩噩的一年又一年，也算不错了。^_^</p>

<p><strong>工作学习方面：</strong></p>

<ol>
<li><p>大数据</p>

<p> 公司业务的增长让以前的架构达到了瓶颈。大数据技术的引入对于我自己来说算是离开了舒适区。从hadoop、flume、kafka到storm等等都是一个崭新的领域。虽然从本质上来看，大数据和普通的程序是没啥区别的。但是牵扯到分布式，各种需要考虑的东西也就多了起来，也就引出了一个个强大的软件。15年基本上完成了公司的lambda架构，16年需要做的是完善、优化已有的，而需要考虑引入的则包括elasticsearch、spark等大数据技术。</p></li>
<li><p>数据挖掘</p>

<p> 大数据是服务于数据统计的，而数据统计的最终目的一方面是指导市场运营的工作，更重要的一点则是服务于数据挖掘。目前接触的主要是怎样构建用户画像，从而形成一个良好的推荐机制，为用户推荐更多感兴趣的运营内容。15年，完成了用户画像以及初版的推荐机制；16年，需要做的是进一步验证已有系统的效果，考虑引入更好、更成熟的方案，此外在文本内容打标签、分类等方面也需要实现成熟的机器学习方案。</p></li>
<li><p>基础平台</p>

<p> 借鉴已有开源框架，实现了公司的dao框架、redis操作框架、java ee应用性能检测框架、分布式调度框架等。16年需要继续升级基础平台。</p>

<p> 值得一提的是，公司代码版本管理使用的gitbucket，自己在此之上做了不少二次开发，有些提交给了原项目，有些则是仅仅为了应对公司的需求。鉴于此，也接触到了scala的开发，不得不说，scala的学习曲线确实很陡，16年争取要能掌握并熟练运用此语言。</p></li>
<li><p>Github</p>

<p> 在github上写代码，一方面可以提高自己的编码水平，毕竟质量太差的代码，你也怕拿出来丢人；另一方面，github上那么多优秀的项目，只做拿来党是很可耻的，一些好的东西，分享出来帮助更多的同行给自己带来的成就感反过来也能督促自己技术的提升。15年自己开发或者基于原项目二次开发了一些star较多的项目。16年要坚持在github继续贡献更多好的代码。</p></li>
<li><p>技术分享</p>

<p> 在去年的研发招聘过程中，尤其是校招，感受到了目前后端工程师教育的匮乏。对于一个后端工程师的技术体系，先不说学生，不少工作很长时间的人都没有一个清晰的认识。于是自己萌生了写一本后端工程师技术体系书籍的想法，希望能够给选择后端这个方向的人一些指导。到目前为止也写了一些，希望16年至少能出一个初稿。</p>

<p> 此外，自己在开发者头条的<a href="http://toutiao.io/subjects/4944">《后端技术杂谈》</a>专栏，会继续分享自己的技术感悟和总结。一方面，增人玫瑰，手有余香；更重要的一点还是能够督促自己多总结，多思考。</p></li>
</ol>


<p><strong>工作学习之外：</strong></p>

<p>今年最大的一点感受：不管其他如何，健康才是一个人最最重要的东西。尤其是对于天天坐在电脑面前的程序员们来说，保持健康就是保证最大的竞争力。</p>
]]></content>
  </entry>
  
</feed>
