<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: work | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/work/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2020-01-27T05:59:08+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[技术 in Netflix]]></title>
    <link href="http://www.rowkey.me/blog/2019/04/13/netflix/"/>
    <updated>2019-04-13T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/04/13/netflix</id>
    <content type="html"><![CDATA[<p>综合市面上的公开资料总结了Netflix在技术上面的一些实践和创新，从中能够得到不少启发和提示。</p>

<p><strong>来自公司内部分享</strong></p>

<!--more-->


<p><img src="//post_images/netflix/arch-2.jpeg" alt="" />
<img src="//post_images/netflix/arch-3.jpeg" alt="" />
<img src="//post_images/netflix/arch-4.jpeg" alt="" />
<img src="//post_images/netflix/arch-5.jpeg" alt="" />
<img src="//post_images/netflix/arch-6.jpeg" alt="" />
<img src="//post_images/netflix/arch-7.jpeg" alt="" />
<img src="//post_images/netflix/arch-8.jpeg" alt="" />
<img src="//post_images/netflix/arch-9.jpeg" alt="" />
<img src="//post_images/netflix/arch-10.jpeg" alt="" />
<img src="//post_images/netflix/arch-11.jpeg" alt="" />
<img src="//post_images/netflix/arch-12.jpeg" alt="" />
<img src="//post_images/netflix/arch-13.jpeg" alt="" />
<img src="//post_images/netflix/arch-14.jpeg" alt="" />
<img src="//post_images/netflix/arch-15.jpeg" alt="" />
<img src="//post_images/netflix/arch-16.jpeg" alt="" />
<img src="//post_images/netflix/arch-17.jpeg" alt="" />
<img src="//post_images/netflix/arch-18.jpeg" alt="" />
<img src="//post_images/netflix/arch-19.jpeg" alt="" />
<img src="//post_images/netflix/arch-20.jpeg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术面试的应该与不应该]]></title>
    <link href="http://www.rowkey.me/blog/2019/03/08/interview-basic/"/>
    <updated>2019-03-08T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/03/08/interview-basic</id>
    <content type="html"><![CDATA[<p>进入软件开发这个行业差不多10年，做为候选人被面试过，也做为面试官面试过别人。这几年做为后者的角色越来越多，慢慢总结出来了一些技术面试的原则，也是自己在实践的一些原则。</p>

<!--more-->


<h3>Should</h3>

<ul>
<li>让候选人介绍自己拿手的项目或者模块，考察其问题描述能力、沟通能力。</li>
<li>根据简历上写的的项目经验，考察候选人对用过的东西有没有消化、掌握的深度，判断其是否是一个善于思考、主动学习的人。</li>
<li>计算机科学基础知识，考察候选人的计算机基本功，能达到的上限有多高。尤其是对于实习生或者应届生来说是最最重要的一点。社招可以适当放宽要求，但起码要对常用的计算机基础知识有大概的印象。</li>
<li>实际工作中需要的知识，考察候选人能否胜任职位要求的工作。</li>
<li>开放性问题（算法或者实际场景下的问题，是候选人没有接触过或者接触不深的）考察候选人是否聪明，思路是否活跃。</li>
<li>问候选人觉得自己相比其他人的优点是什么，具体的实例。可以基于这个优点出一些题目。从而考察候选人对自己是否有明确的自我认知。</li>
</ul>


<h3>Shouldn&rsquo;t</h3>

<ul>
<li>不要抱着证明自己比候选人强的心理进行面试。包括一直试图找候选人的缺点、问自己拿手的而候选人没有接触过或者接触很浅的点（除非是职位的关键技能点）。面试的目的是看候选人是否能够胜任职位，而不是挑剔候选人。</li>
<li>不要问候选人没有接触过的RTFM问题。这类问题，查阅手册/文档就能知晓，并不是什么核心竞争力。</li>
<li>不要问脑筋急转弯式的问题。</li>
<li>不要太看重面试人已经会的，多看一下候选人的基础素质、学习能力、学习欲望、上进心等决定上限的点。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理的一些要点]]></title>
    <link href="http://www.rowkey.me/blog/2018/07/28/manage-notes/"/>
    <updated>2018-07-28T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/07/28/manage-notes</id>
    <content type="html"><![CDATA[<p>去年以及今年由于工作需要，参加了公司请的美国管理协会的《高价值经理人》及敏捷OKR绩效管理的培训课程，此外也阅读了《格鲁夫给管理人的第一课》、《架构即未来》、《技术管理之巅》、《OKR：源于英特尔和谷歌的目标管理利器》几本书。总体来看很多管理的理论其实日常自己也在实践，不过这些书的确让自己形成了自己的管理体系，能够有序有法的进行一些管理实践。本文从通用管理和技术管理两部分总结其中最让自己感到受用的几点心得。</p>

<!--more-->


<h2>通用管理</h2>

<ul>
<li><p>管理是推，领导是拉，领导设定目的地和通往目的地的路线图，管理设法达到目的地。</p></li>
<li><p>有效的管理是在期望的时间以可能的最低成本完成期望的品质。</p></li>
<li><p>任何工作都有产出，需要设定好指标衡量产出。疏与度量注定事情永远不会改变。</p></li>
<li><p>在一件事情越早的环节发现问题那么解决问题的成本就越小。</p></li>
<li><p>作为管理人员，要去做高杠杆率的事情，比如传授技能、知识、价值观等。</p></li>
<li><p>会议分为两种：过程导向会议和任务导向性会议。前者是规律化的，是有必要的，可以选择效率高的方式；后者是临时的，需要尽量减少此种会议。</p></li>
<li><p>凡是有会议每个参会者都要有会议记录，可以防止开会的时候开小差。</p></li>
<li><p>全体会议一定要有一个主持者，避免陷入两人交谈。主持者最好是一个职位较高的人，可以避免同级全体综合征。</p></li>
<li><p>规律周期性的一对一沟通是非常有必要的，尤其是对于不喜欢主动沟通的属下。</p></li>
<li><p>需要建立有效沟通机制和处理问题的模式，如例会，避免下属缺乏反应问题的渠道而抱怨。</p></li>
<li><p>将员工可以划分为四象限，不同的人适用的管理方法是不一样的。对于第一象限的人，需要提供其更多的机会，做好适当的监督即可；对于第二象限的人需要给予工作上的指导，使其能够走到第一象限；对于第三象限的人，需要解决其心理问题；对于第四象限的人则需要谈话改进。</p>

<p>  <img src="//post_images/readiness.png" alt="" /></p>

<p>  总体来说，要做第一和第二象限的人。坚决杜绝成为第四象限的人。</p></li>
<li><p>需要根据工作成熟度的不同，适当的干涉下属工作，做好必要的监督。</p></li>
<li><p>可以把权利下放，但必须对其结果承担所有的责任。把赞扬留给团队，承认失败并公开的承担责任。</p></li>
<li><p>推行某种制度/规范的时候合理的做法是先降一个力度，等适应后再100%推行。</p></li>
<li><p>敏捷性组织有利于可扩展的组织架构。</p></li>
<li><p>亚马逊的两张比萨饼团队：任何一个团队的规模不能大过两张比萨所能喂饱的人数，超过则需要拆分。</p></li>
<li><p>AKA（All Know All Things）。要营造一种公开、公平的氛围，不搞遮遮掩掩的事情，让大家都知道所有的事情。</p></li>
<li><p>混血性组织（组织之间有人员交叉，在不同的组织中担任不同的角色）需要双重汇报。</p></li>
<li><p>决策权利不能仅仅靠职位决定，还需要考虑专业技能和知识。</p></li>
<li><p>使用KPI做绩效考核如果遇到诸如难以打分、沟通不畅、抱怨强制分配等问题可以采用OKR做考核管理。</p></li>
<li><p>借鉴Google，可以采取<strong>半年绩效考核（自评+他评）+OKR->总分</strong>的方式做考核。其中采取半年的节奏是一方面是为了和OKR季度回顾的频率错开，另一方面对于某个重大失误可以凭借后续的其他贡献做中和；自评是需要自己陈述考核周期内的工作，他评需要被考核人邀请和自己工作相关的n个人给自己打分/评价；OKR部分的最终得分只是作为参考；总分最后由直属Leader综合考虑几个方面打出。</p></li>
</ul>


<h2>技术管理</h2>

<ul>
<li><p>公司不同时期的重点技术工作</p>

<ul>
<li>初创期：开发产品原型，做技术储备</li>
<li>发展期：保障产品升级、制定技术服务体系，处理业务部门的需求和抱怨</li>
<li>成熟期：技术产品创新效率的提升</li>
</ul>
</li>
<li><p>布鲁克斯定律，研发者的生产力随着团队规模的增加而减少。努力的成本是团队规模的平方。so，技术团队的规模需要控制，人数过多的话需要考虑分拆。</p></li>
<li><p>技术需要与业务高度融合，需要培训懂业务的技术专家，切忌离开业务空谈技术。</p></li>
<li><p>十人以上技术团队可以采取轮岗来提高大家的技术热情和技术广度，但需要做好岗前培训，尤其对于技术门槛较高的岗位。</p></li>
<li><p>理解事故和问题的区别。事故需要立刻解决，而问题是要找到事故的原因。</p></li>
<li><p>以价值为导向，建立需求管理闭环，给业务需求方设定信用分，价值预估，上线后进行价值验证以判定价值达成率，从而直接影响信用分。</p></li>
<li><p>面试可以采取行为面试法，即给予实际案例看其解决问题的专业能力和思维能力。</p></li>
<li><p>技术团队超过300人需要建立职业发展体系、能力发展体系以及培训发展体系。</p></li>
<li><p>技术管理者需要发展三方面能力：专业能力、领导能力以通用能力（沟通能力、执行力、团队协作、责任心等）。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年读过的书]]></title>
    <link href="http://www.rowkey.me/blog/2018/02/06/2017books/"/>
    <updated>2018-02-06T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/02/06/2017books</id>
    <content type="html"><![CDATA[<p>2017年一共阅读了九本书，包括技术和管理，并且参加了一次“高价值管理人”的管理培训课程，在技术和管理方面都有了一定的学习，得到了一些进步。</p>

<!--more-->


<h2>技术</h2>

<ul>
<li><p>架构真经</p>

<blockquote><p>虽然是基于电商系统进行的讲解，但是其很多架构原则都是普适的。其中讲的很多东西都是自己在实践中做过的东西。经过理论的总结之后，确让自己有了更深的思考。强烈推荐架构入门者阅读此书。</p></blockquote></li>
<li><p>聊聊架构</p>

<blockquote><p>这本书还没出来之前，各路技术大神评价非常高。出来之后，很多人都在吐槽这本书在故弄玄虚。其实，就我来看，前几章确实有点哲学的感觉，但相信有架构经验的人是能够有共鸣的。架构的本质也的确和哲学有关系。这本书比较适合有一定架构经验的工程师来阅读，并不适合经验尚浅者。</p></blockquote></li>
<li><p>Java性能权威指南</p>

<blockquote><p>一本涵盖Java调优方方面面的书籍。从JVM内存、JIT到集合使用等等。虽然我们一直强调不能“过早优化”，但是对于一些应当普遍意识到的优化措施还是越早越好的，否则当产生了问题再来优化，成本反而会更大。强烈推荐Java工程师阅读此书。</p></blockquote></li>
<li><p>大数据之路-阿里巴巴大数据实践</p>

<blockquote><p>讲述阿里巴巴大数据平台的演化之路。这本书讲的很多东西虽然都是阿里自研的，并没有全部开源。但是很多软件的使用兼容了开源软件，尤其是一些诸如解决数据倾斜问题、去重指标计算的思路也是普遍适用的。对照一下，可以理出自己公司在大数据平台上哪些做的不错，哪些还没做，哪些需要优化。</p></blockquote></li>
<li><p>亿级流量网站核心技术</p>

<blockquote><p>本书作者是IT著名博主，自己上学时就看过他写的Spring系列。因此在此书出版之前就觉得应该是本好书。读完此书，学到了一些东西，比如Nginx+Lua/Openrestry在高并发、大流量场景下的使用、Consult的统一配置、使用Lua脚本做Nginx动态负载均衡等。但有点令人失望的是，很多东西都是一笔带过，尤其是穿插了大量类库的使用代码（自我觉得出版书籍一定要避免大量代码，完全是可以放到Github上，而且类库的使用代码完全是可以阅读官方文档的）。比较适合没有架构经验的人来了解一下大公司架构使用了哪些技能，有经验的则可以当做一本参考手册，查漏补缺。</p></blockquote></li>
<li><p>响应式微服务架构（Reactive-Microservices-Architecture）</p>

<blockquote><p>O&#8217;Reilly的系列电子书。讲述了在设计分布式系统时候的一些原则，在架构层面指导微服务的实现。</p></blockquote></li>
</ul>


<h2>管理</h2>

<ul>
<li><p>格鲁夫给经理人的第一课</p>

<blockquote><p>公司管理层统一学习的一本管理书籍。第一次系统地学习了管理方面的知识，印证了很多实践中已经在采取的方法的合理性，也让自己有了新的管理思路。强烈推荐给刚刚进入管理领域的人。</p></blockquote></li>
<li><p>技术管理之巅</p>

<blockquote><p>不同于其他管理书籍，此书着重于从技术Leader角度讲述如何管理研发人员，打造高效技术团队。其中如何量化研发人员的绩效指标给了自己不小的启发，后面也运用了起来。此外，如何建立研发职级体系、如何敏捷管理项目等等都是可以借鉴的地方。</p></blockquote></li>
<li><p>架构即未来</p>

<blockquote><p>《架构真经》的姊妹篇，早于《架构真经》，不仅仅讲述了技术架构的知识，更让我受用的是前面部分讲的“构建可扩展的组织架构”。对于诸如管理和领导、敏捷组织架构、问题和故障等等的概念讲解的非常透彻。而后面技术架构这一块则是对《架构真经》的一个引子。</p></blockquote></li>
</ul>


<h2>2018</h2>

<p>2018年需要花大量精力在技术管理和机器学习方面，暂定需要阅读的几本书如下：</p>

<ul>
<li><p>OKR: 源于英特尔和谷歌的目标管理利器</p>

<blockquote><p><strong><em>截止2018.02.06已经完成阅读。</em></strong>此书是公司管理层进行统一学习的一本书，不厚，花了三个晚上大约6个小时就读完了。讲述了什么是OKR、OKR的好处、如何使用OKR等等，推荐想要进行OKR实践的管理人员阅读。</p></blockquote></li>
<li><p>微服务反模式和陷阱（Microservices AntiPatterns and Pitfalls）</p></li>
<li>机器学习实战 &amp;&amp; 机器学习西瓜书</li>
<li>Tensorflow实战</li>
<li>深入分布式缓存</li>
<li>高性能MySQL</li>
<li>尽在双11，阿里巴巴技术演进与超越</li>
<li>Clean Architecture, A Craftsman&rsquo;s Guide to Software Structure and Design</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有效解决问题]]></title>
    <link href="http://www.rowkey.me/blog/2017/10/20/solve-problems/"/>
    <updated>2017-10-20T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2017/10/20/solve-problems</id>
    <content type="html"><![CDATA[<p>来自于内部的一次培训，主要讲述了如何有效地解决问题，包括识别问题、描述问题、分析问题、找出方案、决策问题等。</p>

<!--more-->


<p><img src="//images/blog_images/solve_problem/arch-2.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-3.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-4.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-5.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-6.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-7.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-8.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-9.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-10.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-11.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-12.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-13.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-14.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-15.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-16.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-17.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-18.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-19.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-20.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-21.jpeg" alt="" />
<img src="//images/blog_images/solve_problem/arch-22.jpeg" alt="" /></p>
]]></content>
  </entry>
  
</feed>
