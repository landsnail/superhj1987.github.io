<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2020-06-23T13:44:24+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我是科蜜，20年的...]]></title>
    <link href="http://www.rowkey.me/blog/2020/01/27/kobe/"/>
    <updated>2020-01-27T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/01/27/kobe</id>
    <content type="html"><![CDATA[<p>5：30左右突然惊醒，拿起手机一看有同学给我发微信说科比挂了。我大大的问号，赶快看了一下朋友圈和网易新闻，已经有人发出了国外网站正式的报道。。。心里顿时五味陈杂，一时不知道如何是好。一个陪伴了自己整个少年时代的偶像说没就没了，还是以这种意外的方式，相信好胜心那么强的他也是非常不甘心的。也许有人会说，人家这么一个超级巨星，你们这些粉丝矫情啥，人家都不认识你。确实，我的存在对他来说是无所谓的，但是他对我的意义却是不一般，我也相信他对于无数他的粉丝都有不一样的意义。</p>

<!--more-->


<p>记得2000年我上初中，在同学家里玩NBA Live游戏，同学跟我说这个湖人队8号投篮真准，那是我第一次认识科比。那时候电视只有中央2台每周会播一次nba比赛，每到湖人比赛我都必看。也到处搜集科比的各种贴画，家里贴满了他的海报。那时候自己的爱好就是搜集科比的各种资料。也是因为科比，我开始喜欢上打篮球，虽然受限于身高，水平一直不咋样，但好胜心和他差不多，经常为了赢不了球，摸不到球，上不了场而特别难受。</p>

<p>后来上了初四实验班（相当于高中提前录取），由于是微机实验班，学习比较轻松，有很多时间来做一些自己喜欢的事情。而对我自己来说，除了摆弄一些电脑的事情，就是看各种体育新闻、看科比的新闻。那时候班里同学们会经常一起买篮球报、当代体育、篮球先锋报，然后换着看。当然，青春时代，少不了的就是“比”，经常和同学争论是科比厉害还是艾佛森、卡特、麦迪厉害。而2003年的科比闹出了鹰郡性侵案，迎来了人生的谷底，自己看到了他的各种无助和无奈，感觉全世界都开始抛弃他。不过最终他还是挣脱了出来，有了单场62分、单场81分、赛季场均35.4分的神迹，也把自己的球衣号码换成了24号，那意味着每天每个小时都要努力，也意味着他蜕变成了一个领袖。那时候的我也已经正式开始了高中生涯，和以前不一样的是，学习压力开始变得巨大，每天就是做题考试，生活也开始变得枯燥，一周半天假，一个月一天半假，休息时间也开始变得多余，而且我们班还禁止打篮球。。。自己只能靠去看科比的各种新闻作为调节剂，他每一次表现好，我也就状态好，也就考的好。那时真的以为自己和他有某种关联了。。。也会和同学见缝插针的去打球，即使是课间休息的那十分钟。和他这段经历类似的是，我小学初中一直是年级第一第二，但高中在班级里一直处于十几名的位置，是包括我后面大学的所有学生生涯的谷底，但高考我发挥还不错，第一次考了班级第一，虽然是因为班里几个学神发挥不太好，但是分数我也是比较满意的。</p>

<p>后来上了大学，依然热情不减，宿舍的墙上都是科比的海报，鼠标也是湖人款的。也看着湖人慢慢组建齐了冠军阵容，直到09年夺冠，那一刻我当时就哭了。从巅峰到谷底再到巅峰，那种经历想想就令人动容。尤其是10年，还记得总决赛最后一场的上半场已经落后将近20分，当时我心灰意冷，再加上早起看比赛，实在忍不住困意倒头就睡了。在睡梦中突然听到全宿舍楼的人在欢呼，我心想不会逆转了吧，打开电视看到科比在欢呼，那一刻就感觉自己拿了总冠军一样。那年的我正式本科毕业，专业第一保送了研究生，也算是和科比的巅峰关联吧。</p>

<p>再后面，湖人的夺冠班底逐渐散了，从此一蹶不振。科比也一次次遭遇伤病从而无奈退役。我自己也从研究生毕业开始走上社会，也慢慢变得没时间没兴趣看nba比赛，尤其是科比退役之后，真的是觉得nba这些比赛没啥意思。科比退役后的各种新闻还是会让我激动，他拿了奥斯卡最佳短片动画奖，他开公司，他和马云在企业峰会上高谈阔论，他来中国参加综艺节目，他参加雪碧慈善邀请赛，我真觉得他退役后的成就有可能超越他的篮球成就。记得离他最近的一次就是14年科比受马云的邀请来阿里，虽然是在隔壁的公司里，虽然自己还是没见到。。。我自己一直以来的梦想之一就是有一天可以变得足够优秀能够和他成为朋友，能够在洛杉矶做他的邻居。可惜这一切再也不可能实现。。。也可能成为我这一生最大的遗憾之一。</p>

<p>就是这个人，凌晨四点的洛杉矶、对队友的严格要求、右手受伤就把左手投篮练出来、手指扭了硬生生掰回去继续比赛，他的好胜心、偏执和努力激励我的进步，他是我的青春。这就是科比对一个20年科蜜的意义。</p>

<p>谢谢你，科比！祝福你在天堂里可以继续你的精彩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术琐话]]></title>
    <link href="http://www.rowkey.me/blog/2019/12/18/tech-talk/"/>
    <updated>2019-12-18T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/12/18/tech-talk</id>
    <content type="html"><![CDATA[<p>日常的工作学习中，经常会看到好的知识点，对自己有提示的一句话，或者是自己突然想通了一件事情。这里以“技术琐话”作为主题来聚合：<a href="https://www.rowkey.me/blog/talks/">技术琐话</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何进行有效的技术分享（演讲）]]></title>
    <link href="http://www.rowkey.me/blog/2019/10/23/how-to-tech-share/"/>
    <updated>2019-10-23T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/10/23/how-to-tech-share</id>
    <content type="html"><![CDATA[<p>讲述如何准备一次技术分享（演讲）以及演讲中的注意事项。来自内部分享PPT，后续会发布<strong>详细版</strong>。</p>

<!--more-->


<h2>What-什么是有效的技术分享</h2>

<ul>
<li>演讲

<ul>
<li>知识/技能培训</li>
<li>组件/平台/系统使用培训</li>
<li>工作实践经验/教训</li>
</ul>
</li>
<li>写博客？</li>
</ul>


<p><strong>有效->满足听众的诉求</strong></p>

<h2>Why-存在的问题</h2>

<ul>
<li>语速太快</li>
<li>图解太少</li>
<li>缺乏实践案例</li>
<li>内容太多</li>
<li>内容都在ppt上</li>
</ul>


<h2>How-如何准备技术分享</h2>

<h3>目的</h3>

<ul>
<li>开阔眼界</li>
<li>培训</li>
<li>讨论</li>
</ul>


<p><strong>听众的组成；听众对领域的了解程度；听众的诉求</strong></p>

<h3>结构</h3>

<ul>
<li>Who</li>
<li>What</li>
<li>Why</li>
<li>How：重点选3、4点</li>
<li>Future</li>
<li>Recap</li>
</ul>


<h3>内容</h3>

<ul>
<li><strong>backlog</strong>: 收集、积累信息</li>
<li><strong>逐字稿</strong></li>
<li><strong>形式</strong>：

<ul>
<li>报告：精确的信息和枯燥的细节、事实和图表</li>
<li>故事：具体；强调说服和感染；<strong>赋比兴</strong></li>
<li>演讲：介于报告和故事之间</li>
</ul>
</li>
<li><strong>实践案例</strong>、经验 > 说教

<pre><code>  - Situation: 当时的情况
  - Target: 面临的任务/目标
  - Action: 采取的行动
  - Results: 取得的结果
</code></pre></li>
<li>内容量适可而止</li>
<li><strong>Demo</strong>: 关键特点、容错处理</li>
</ul>


<h3>PPT</h3>

<blockquote><p>烘托效果和提醒，<strong>配角</strong></p></blockquote>

<ul>
<li>How的几个重点，每一个点2-3页，共15-20页</li>
<li>精简文字+图表，多图少字</li>
<li><strong>简洁、干净、一致、跳脱</strong></li>
<li><strong>忌</strong>：交互式幻灯片、大片文字</li>
</ul>


<h3>练习</h3>

<hr />

<blockquote><p>多练出奇迹</p></blockquote>

<ul>
<li>自我练习</li>
<li>让别人听：公司/团队内部试讲</li>
<li>冥想：站在听众的角度去接受信息</li>
</ul>


<p><strong>根据反馈不断进行迭代改进</strong></p>

<h2>分享Tips</h2>

<ul>
<li>紧张

<ul>
<li>觉察：“只要不被听众察觉到紧张，那就不是紧张”。</li>
<li>充分准备</li>
<li>内容量适可而止</li>
<li>简洁PPT：留有自由发挥余地</li>
<li>练习</li>
</ul>
</li>
<li>节奏

<ul>
<li>语速放缓</li>
<li>多准备点内容：演讲时间固定的情况下讲不完比冷场要好</li>
<li>规划要点、时间</li>
</ul>
</li>
<li>目光：面对听众并熟视无睹；巡视听众</li>
<li>语调：有感情；抑扬顿挫</li>
<li>手势：忌手足无措</li>
<li>演讲设备/PPT的备份</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何培养解决问题的意识]]></title>
    <link href="http://www.rowkey.me/blog/2019/08/23/solve-problem/"/>
    <updated>2019-08-23T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/08/23/solve-problem</id>
    <content type="html"><![CDATA[<p>解决问题其实并不是最终的目的，需要加一个修饰词成为有效地解决问题，这才是最终的目的。那么如何有效地解决问题呢？这是有一些方法论做指导的。要培养解决问题的能力，需要首先掌握这些方法论。解决问题分为三步走：识别问题、分析问题、解决问题。</p>

<!--more-->


<ul>
<li>所谓识别问题，这一点尤其重要，因为很多时候提需求的人提的只是方案而非真正的问题，这时候如果不加思索就开始去做，最后反而达不到需求方的期望，举一个可能很多人听过的段子，程序员的妻子跟程序员说：把这些土豆削一半儿放到锅里，程序员很快就做完了，结果妻子发现所有土豆都下了锅，不过每一个土豆都被削掉了一半。哈哈一笑的同时，很多人觉得这是沟通的问题，其实从另一个角度来看，还是因为没有识别出真正的问题是什么。平时的工作中，也会有很多人在遇到问题和接到需求时，为了赶时间，想都不想就开始做，结果最终的结果解决不了问题或者满足不了需求方，这都是因为没有真正的识别问题而造成的。脑子总是比手慢也说的是这个意思。在识别问题的时候则可以通过5W2H提问来理解真正的问题，What，问题时什么；Why，为什么会发生问题；Who，谁造成的问题；When，何时发生的问题； Where，哪里的问题；How，问题时怎样发生的；How much，问题发生的频率，影响程度如何。</li>
<li>分析问题，需要依靠专业能力或者经验来找到所有可能的原因，然后可以通过冰山分析法、鱼骨法来分析问题的根本原因，这一点也特别重要，很多时候如果识别不出根本原因，那么只会是治标不治本，当然对于一些紧急事故，解决事故是紧急首要的，后续的问题管理则需要找出问题的根本原因，以防止后续问题的重复发生。</li>
<li>解决问题，需要根据分析出来的问题原因，给出解决方案，这个也需要专业能力和经验的支撑，如果有多个方案则可以使用理性决策的比较矩阵和决策矩阵支撑最终的方案的选择。</li>
</ul>


<p>以上是解决问题的三步走。支撑这个方法论的除了上面提到过的专业能力和经验支撑，我觉得还需要具有owner意识，即把问题当做自己的问题，主动积极的去寻求能更好解决问题的方案。</p>

<p>掌握了这些方法论后，则需要不断的模仿学习、实践，并且最重要的是多总结，要把平时工作中自己实践的、看到别人实践的不断的总结梳理，形成自己的知识体系，这样才能真正成为自己的技能，才能在遇到问题时做到有条不紊，从容应对，同时也能进一步完善自己解决问题的方法论、专业能力和经验，形成良性闭环。例如在很多公司都会有故障解决的一套指导流程，比如在碰到服务器响应变慢时，先通知受影响方，然后组织相关人员，如果有经验则第一时间修复，无经验则需要从最近的变动着手，先排查哪几方面问题，再排查哪几方面问题，这个流程即在实践过程中不断沉淀下来的知识体系。</p>

<p>总结来说，就是掌握解决问题的方法论，带着Owner意识多去实践解决问题，多去模范学习别人如何解决问题，多去总结沉淀成自己的知识体系和方法论形成闭环。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这些知识决定了程序员的上限（PPT版）]]></title>
    <link href="http://www.rowkey.me/blog/2019/04/22/upforprogrammer/"/>
    <updated>2019-04-22T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/04/22/upforprogrammer</id>
    <content type="html"><![CDATA[<p>讲述决定程序员上限的一些知识技能点，包括如何学习、如何阅读源码、计算机科学基础知识体系等。来自内部分享PPT，后续会发布<strong>详细版</strong>。</p>

<!--more-->


<h2>什么是程序员？</h2>

<ul>
<li>码农、程序猿、程序媛</li>
<li>使用<strong>程序</strong>实现价值</li>
<li>程序=数据+算法</li>
<li>软件=程序+软件工程</li>
<li>程序员=工程师？</li>
</ul>


<h2>程序员金字塔</h2>

<p><img src="http://www.rowkey.me/post_images/ufp/programmer-pyramid.png" width="500"/></p>

<h2>程序员知识结构</h2>

<p><img src="//post_images/ufp/knowledge.png" alt="" /></p>

<ul>
<li>面试造火箭，工作拧螺丝</li>
<li>会什么是你的下限，能够会什么是你的上限</li>
<li>越底层的东西越决定上限</li>
</ul>


<h2>学习欲望</h2>

<blockquote><p>杜绝<strong>1</strong>年工作经验重复<strong>N</strong>年</p></blockquote>

<ul>
<li>如果自己遇到这种问题会怎么解决，与资料中的解决方案相比优劣如何？</li>
<li>别人为什么会想到这种解决方案？</li>
<li>自己是由于经验欠缺还是技能点欠缺才导致没有想到好的解决方案？</li>
<li>解决这类问题的根本思路是什么样的？</li>
</ul>


<h2>学习能力</h2>

<blockquote><p>不是懂得多，而是学得快</p></blockquote>

<ul>
<li><strong>知其然更要知其所以然</strong>：技术以深度优先</li>
<li><strong>类比现实</strong>：对现实世界的模拟</li>
<li><strong>更好地接受信息</strong>：建立自己的知识体系；阅读并记笔记，纳入知识体系</li>
<li><strong>深度思考</strong>：阅读书籍</li>
<li><strong>动手实践、频繁练习</strong>：项目驱动型学习；主动思考</li>
<li><strong>自我总结</strong>：完善知识体系；笔记、博客、分享</li>
<li><strong>持续学习</strong>：逃离舒适区；学到老，活到老</li>
</ul>


<h2>如何学习新技术</h2>

<p><img src="http://www.rowkey.me/post_images/ufp/study-new-tech.png" width="500"/></p>

<h2>如何阅读源码</h2>

<ol>
<li>阅读该技术的架构文档，了解其总体架构和组成</li>
<li>根据总体架构，将源码文件以模块或者上下层级进行分类。</li>
<li>从未阅读过的模块中选择最独立（依赖性最小）的模块代码读起。</li>
<li>阅读此模块的功能介绍文档。</li>
<li>阅读此模块的源代码：<strong>运行程序，断点调试</strong>。</li>
<li>一边阅读一边整理调用关系图。</li>
<li>转到第三步。</li>
</ol>


<blockquote><p>参考<strong>官方文档或者经典书籍</strong></p></blockquote>

<h2>计算机思维</h2>

<ul>
<li><strong>冯.诺依曼体系</strong>：程序存储，顺序执行。</li>
<li><strong>二进制存储</strong>：用比特解决问题</li>
<li><strong>位运算</strong>：位运算的高效</li>
<li><strong>逻辑分支</strong>：条件判断、循环、迭代、递归</li>
</ul>


<h2>个人规划</h2>

<ul>
<li><strong>长期规划</strong>：职业规划；高瞻远瞩</li>
<li><strong>短期规划</strong>：具体技能、晋升、学习方面的规划；优先级排序</li>
</ul>


<h2>基础学科</h2>

<ul>
<li><strong>物理</strong>：电路原理；量子计算机</li>
<li><strong>数学</strong>：工程优化；线性代数；微积分</li>
<li><strong>英语！！</strong>：阅读英文文献；计算机术语</li>
</ul>


<h2>计算机组成原理</h2>

<blockquote><p>计算机的硬件组成和运行原理</p></blockquote>

<ul>
<li><strong>冯诺依曼体系</strong>、<strong>摩尔定律</strong>、<strong>阿曼达定律</strong></li>
<li><strong>数据的机器表示</strong>：原码、补码、反码、浮点数/定点数</li>
<li><strong>指令系统</strong>：复杂指令集、简单指令集</li>
<li><strong>存储器</strong>：分类、缓存</li>
<li><strong>CPU</strong>: 流水线、伪共享、缓存</li>
<li><strong>IO设备</strong>：IO总线、DMA、中断</li>
</ul>


<h2>计算机操作系统</h2>

<blockquote><p>屏蔽计算机硬件的中间层</p></blockquote>

<ul>
<li><strong>作业调度</strong>: 调度策略、优先级</li>
<li><strong>进程管理</strong>：进程和线程、进程间通信</li>
<li><strong>存储管理</strong>：内存、虚拟内存、文件系统、页、页缓存</li>
<li><strong>IO管理</strong>：IO设备读写操作</li>
<li>Linux操作系统</li>
</ul>


<h2>计算机网络</h2>

<blockquote><p>单个计算机之间的互连</p></blockquote>

<ul>
<li><strong>TCP/IP协议栈</strong>：四层/七层</li>
<li>TCP连接状态</li>
<li>TCP与UDP的区别</li>
<li>HTTP协议、RESTful规范</li>
<li>网络安全</li>
<li><strong>下一代互联网</strong>：IPv6、物联网、5G</li>
</ul>


<h2>编译原理</h2>

<blockquote><p>将代码转换成机器可理解的二进制，有助于实现DSL</p></blockquote>

<ul>
<li>词法分析、语法分析</li>
<li>类型检查</li>
<li>运行时环境、中间代码</li>
<li>代码生成、代码优化</li>
</ul>


<h2>数据结构和算法</h2>

<blockquote><p>程序=数据+算法</p></blockquote>

<ul>
<li><strong>基本数据结构</strong>：数组、链表、栈、队列、哈希表</li>
<li><strong>最大堆、最小堆</strong>：TopN问题</li>
<li><strong>树</strong>：平衡二叉树、B树、B+树、红黑树</li>
<li><strong>跳跃表</strong>: 简单可实现</li>
<li><strong>经典排序算法</strong>：快速排序、归并排序、插入排序、冒泡排序</li>
<li><strong>经典查找算法</strong>：顺序查找、二分查找</li>
<li><strong>高级算法</strong>：贪心、分治、回溯、动态规划</li>
<li><strong>大数据处理</strong>：Bitmap、Bloomfilter、Hyperloglog、MapReduce、MPP</li>
</ul>


<h2>设计模式</h2>

<blockquote><p>软件可复用、可扩展、可维护。善用而不滥用。</p></blockquote>

<ul>
<li><strong>面向对象SOLID设计原则</strong>：单一职责、开闭原则、里氏代换、接口隔离、依赖倒转</li>
<li><strong>常用设计模式</strong>：单例模式、工厂模式、代理模式、适配器模式、观察者模式</li>
<li><strong>常用框架中的设计模式</strong>：Spring</li>
</ul>

]]></content>
  </entry>
  
</feed>
