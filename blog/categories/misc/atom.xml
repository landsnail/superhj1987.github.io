<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2020-01-24T08:11:55+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的2019]]></title>
    <link href="http://www.rowkey.me/blog/2020/01/23/my2019/"/>
    <updated>2020-01-23T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/01/23/my2019</id>
    <content type="html"><![CDATA[<p>和去年一样，本文来自自己给部门的公开信。内容经过脱敏。</p>

<hr />

<p>2020年已经过去了快一个月。回顾2019年，真的感谢大家，总体来看，部门的全年产出是符合预期的，也获得了其他需求部门的高度好评。不仅仅支撑了微鲤看看、广告平台、用户增长等业务相关系统的快速迭代，也不断地在探索运维基础设施、前端基础设施、大数据平台、推荐系统、公共组件、技术中间件并取得了一些令人印象深刻的成果。</p>

<p>要求了大家做全年的总结和新的一年的规划，我自己也从工作、学习和生活三个方面来总结一下我自己的2019年。</p>

<!--more-->


<h2>工作</h2>

<p>说到工作，特别想跟大家说一下加班的问题。由于公司战略的要求，公司在年底的几个月开始了大小周，目的是为了增加产出，也是为了让大家能够有一种创业公司的心气。也有部门的同事跟我反映过说部门不怎么加班，感受不到创业公司的气氛。这一点非常值得称赞。我在这里再讲一下我对加班的看法。</p>

<ul>
<li>加班的目的并不是加班，而是提高产出，那么产出是由效率*时间决定的。如果时间增加，但是效率下降，大部分情况下，产出也是下降的。</li>
<li>对于脑力工作者，每天能够高效工作5-6小时就很了不起了，再多的时间其实是低效劳动，太过疲劳反而容易出错。</li>
<li>很多人工作散漫，干活拖拖拉拉，心想着干不完就加会儿班。在合理的时间内干不完活而加班，是工作能力低的表现，这种行为并不值得提倡。</li>
<li>根据我自己的经验看，长期加班，根源问题基本都是“项目失控”。由于技术中心的特殊性，很多项目都是没有产品经理也基本面向的都是内部人员，项目的排期安排一直以来都是让每个人来定的。只要合理，我一般都不会有什么意见，有问题也一直欢迎大家跟我提意见。如果你定了deadline，却经常需要加班来赶进度，明显的就是在评估工时、项目管控上有问题。当然，我过去做的不好的一点就是只给进度要求，不给资源，这一点我会注意改进。</li>
<li>死守自己的deadline-高标准、准时、保质保量、不给其他同事挖坑。最好的团队合作，不是你整天对别人的工作指手画脚，整天看着各种客观原因，而是把自己的事情做到位，做到极致。这也是我今年讲的最多的要具有“owner意识”：把交给自己的任务当成自己的东西，追求极致，最后受益的不仅仅是公司，你自己也会得到成长和别人的认可。</li>
<li>少加班，多动脑。和我之前听到过的说法“脑子要比手快”是一个道理。做事之前，先想想有没有更好的办法，比立即就闷头苦干，最终带来的效果可能是千差万别的。而且，作为一个公司、一个商业组织来说，最终看的只能是功劳，不会是苦劳。</li>
<li>脑力工作者想要划水摸鱼，很难被发现。我并不想给大家营造一种加班的氛围，非得大家每天在公司待到九点十点才行。我希望的是大家都是志同道合的人，是即使不加班，也会在业务时间思考、学习的人。</li>
</ul>


<p>还有一点需要提的是一个概念叫“情绪自由”。怎么说呢？之前，有同事跟我讨论了这个“情绪自由”的问题。就是说你所处的位置有时候决定了你敢不敢发泄你的情绪？比如说，你是一个没有管理职权的开发工程师，那么大部分情况下，即使你心里有情绪也不会发泄出来，因为你知道发泄出来也没用。而如果你是一个Leader，在你团队成员面前，很多时候就会随意让情绪宣泄出来。这个其实非常不好，尤其是对于一个公司的管理层来说，如果总是“情绪自由”，那么大家就会越来越不敢提问题，隐藏在看不到的地方的问题也就越来越多，累积起来一旦爆发那么后果也会严重的多。</p>

<p>接下来，从部门管理、架构、技术团队管理三个部分来讲一下2019年我完成的工作。</p>

<h3>部门管理</h3>

<p>2019年部门发生了一些组织架构改动，组织架构的改动服务于公司的整体目标，随之而来的则是人员的变动，再加上持续的有人加入有人离开，人员的变动带来了一系列问题：如何让大家知道并深刻理解部门的文化，如何融入部门，如何更有凝聚力。对于这些，做的一些工作包括：</p>

<ul>
<li>重新定义了部门的文化：<strong>极客创新、及时反馈</strong>，对之前的“件件有着落、事事有回音”做了简化的同时，还增加了极客创新，目的就是让大家意识到“技术中心”应该是一个创新部门，是一个用创新提升业务的部门。</li>
<li>重新梳理了部门的月度例会流程，包括：

<ul>
<li>不断念经，让大家能够深刻理解并贯彻部门文化</li>
<li>同步OKR进度，让大家随时了解部门的OKR进度，知道关键目标在哪</li>
<li>增加了“每月分享”环节，让大家分享自己工作、生活中的心得，给大家带来启发</li>
</ul>
</li>
<li>探索除了聚餐之外的团建形式，实践形式包括：switch游戏比赛、组队知识竞赛、巅峰故事会等。</li>
</ul>


<p>部门的梯队建设也有了一定程度的气色，在各个团队Leader的共同努力之下，每个团队都有增员，虽然距离理想的梯队还有距离。</p>

<p>此外，今年由于某些原因，自己承担了行政人事事务决策的工作，帮助行政人事部门做了一些工作。</p>

<h3>架构</h3>

<p>架构组是今年才正式成立的。也引入了公司第一个专职架构师，从最终的结果来看，大大分担了我自己在架构方面的工作，在业务的保障上也达到了预期，证明了架构师机制的有效性。此外，在公共组件、技术中间件的引入和开发上，相比之前在速度和效果上都有提升。我自己这方面的工作主要集中于上半年。</p>

<p>此外，针对目前公司的技术Leader架构能力欠缺的问题，聘请了外部的技术顾问来做架构方面的培训。</p>

<h3>技术团队管理</h3>

<p>随着业务的增长，2019年公司的技术团队规模也在激增。2019年自己的重心是在技术团队的整体管理上。</p>

<p>首先，一直困扰我的是，做为公司的CTO，职责是什么？重点工作是什么？如果换成一个人来代替我，他会做什么？针对这个，我看了不少书，也问了不少朋友和前同事。最后基本上是扫清了自己的困惑，明确了自己的重点工作。可以分为四个部分：</p>

<ol>
<li>业务支撑：公司是一个产品驱动的公司，因此业务肯定是最重要的。保证业务的稳定性，支撑业务的快速迭代，这些都是重点工作。</li>
<li>工程效率提升：技术团队的规模增大，带来的并不一定是产出提高。必须有相应的配套研发流程、基础设施才能使得人员规模的增大带来整体产能的提高。今年组织技术Leader学习了《持续交付2.0》一书，并结合公司目前的实际情况，针对持续交付流水线进行了升级优化。也针对工程效率住专门成立了“工程效率”小组，来识别研发流程的瓶颈，进行针对性优化。此外，今年也着重强调了全端工程化的问题，尤其全端监控体系的建设。</li>
<li>科技能力提升：和第一点有所关联。需要去识别公司业务发展上的一些技术瓶颈，做技术预研。</li>
<li>梯队建设：针对2018年的梯队现状，2019年定的招人基调是“资深带队、高级为主、中级可成长”，主要招聘高级开发，初中级招实习生培养。年底梳理了新的研发岗位职级要求，从最终的定级结果来看，研发梯队的层次基本达到了目标。此外，由于公司的很多技术Leader都是在公司成长起来的，缺乏成熟的管理经验，下半年举办了几次技术管理的培训课，以加强技术管理者对管理的认知和管理技能的掌握。</li>
</ol>


<p>此外，2019年公司强调了横向委员会的横向协同职能。年初正式确认了技术委员会的运行机制，并切实推行了起来。自己也加强了对各个技术方向的工作把控。</p>

<h2>学习</h2>

<p>2019年年初定了将近30本书的阅读计划，到年底完成了大约14本。</p>

<ul>
<li><p>清教徒的礼物</p>

<blockquote><p>阐述了清教徒的一些特质，包括：建造“人间天国”的坚定信念；亲力亲为的技师精神；集体主义；组织能力：善于协调各种财力、物力和人力的组织能力。这本还是主要讲的一些管理理念。</p></blockquote></li>
<li><p>持续交付2.0</p></li>
</ul>


<blockquote><p>《持续交付》一书所谓的1.0，这本书加入了精益创业部分成为2.0。阐述了持续交付流水线的建立和优化。非常值得需要提高工程效率的同学学习。</p></blockquote>

<ul>
<li>Clean Architecture</li>
</ul>


<blockquote><p>Uncle Bob的架构简洁之道，虽然讲的是传统单体软件架构的一些设计模式，但是本质上和现在的SOA是一样的。这本书能够让你理解什么是架构、如何做架构、简洁架构如何做。</p></blockquote>

<ul>
<li>稻盛和夫哲学精要</li>
</ul>


<blockquote><p>稻盛和夫的一些处事原则。令我印象较深的有：小善大恶，大善小恶；仔细思考直到“看到结果”的状态；乐观构思，悲观计划，乐观实行；付出不亚于任何人的努力；现金与票据一一对应原则；时刻怀有谦卑之心；为别人的成就叫好</p></blockquote>

<ul>
<li><p>复杂</p>

<blockquote><p>什么是复杂科学？其中包括哪些知识。这本书就是对复杂科学的一些讲解。令我印象深刻的包括遗传算法的普遍形式、自相似分形的意义、冯诺依曼的冯诺依曼计算机体系以及元胞自动机、无尺度网络幂次定律。</p></blockquote></li>
<li><p>学习之道</p>

<blockquote><p>阐述了学习的一些高效方法。令我印象深刻的有发散思维的3B方法: Bus、Bed、Bath。即专注思维下容易陷入思维定式，这时候试着转换到这三种场景下，能够切换到发散思维，有时候会有意想不到的思路。</p></blockquote></li>
<li><p>中台战略&amp;&amp;企业IT架构转型之道：阿里巴巴中台战略思想与架构实战&amp;&amp;极客时间《说透中台》</p>

<blockquote><p>这三本书/课程放在一起，主要都是对中台这个2019年技术圈最流行的词的讲述。从自己来看，这三本书讲的比较符合我自己的理解。</p></blockquote></li>
<li><p>CTO说</p>

<blockquote><p>此书来自于51CTO举办的CTO训练营的讲师们的课程。通过阅读此书，进一步提升了我对CTO这个角色的认知，其中一些CTO的点子如宕机培训学校给了自己一些启发。</p></blockquote></li>
<li><p>管理的常识</p>

<blockquote><p>陈春花教授的经典管理著作，非常值得管理初学者学习。讲了管理中的一些常识，让自己印象深刻的包括管理最终只以成就做为衡量标准；职能部门是不能具有权利的；群体决策并不是最好的决策方式，而是风险较小的决策方式。</p></blockquote></li>
<li><p>人类简史</p>

<blockquote><p>认知革命、农业革命、工业革命、科技革命。这本书从智人的角度回顾并展望，视角很广，概括起来就是人类和其他动物本质没任何区别，甚至基因复杂度还不如一些动物。宗教那一部分佛教主张在痛苦的时候，去想问题的本质忽略感受就能让自己不痛苦，让自己有所启发。</p></blockquote></li>
<li><p>时间的秩序</p></li>
</ul>


<blockquote><p>这本书，看完的感觉真是不明觉厉。包括：时间不是统一的，区别于海拔高度和速度，时间的快慢都不一样；微观世界不同于宏观世界，很多事情都反常识。</p></blockquote>

<ul>
<li>六项思考帽</li>
</ul>


<blockquote><p>这本书讲的是一种问题的讨论方式，尤其是在很多人一起讨论问题时。六项不同颜色的貌似代表不同的态度。戴上某一项帽子，那么就要按照当前的态度来看待问题。</p></blockquote>

<h2>生活</h2>

<p>生活上，上半年依然在坚持健身，下半年由于健身房的变动而停止。但是重新开启了篮球运动，基本上能够做到一周两个小时的运动量，自己也会隔几天在家里做俯卧撑、仰卧起坐等运动。整体状态上还算不错，但年底的体检还是一些小毛病，有点郁闷。so，开始从饮食方面来控制。最近感觉体重开始有所下降了。希望能坚持下去。</p>

<p>此外，女儿已经两岁了，可以和大人互动了，也开始有了自己的小脾气。伴着她一天天的长大，虽然有时候不听话很让人恼火，但是快乐还是绝大多数的。</p>

<h2>总结</h2>

<p>以上就是2019年自己的总结。整体来看，是满意中夹杂着失望的。新的一年，自己的计划如下：</p>

<ul>
<li>加强自己的情绪管理，能够更理性地处理事情、解决问题。</li>
<li>完成中台架构（组织和技术）在公司的落地或者不落地。</li>
<li>继续完善整个技术团队的顶层技术体系建设。</li>
<li>重点跟进企业效能提升工作，包括工程效率和内部IT系统建设。</li>
<li>全面优化技术成本，包括提高资源利用率、降低无效成本。</li>
<li>进一步探索并完善架构师机制，保证业务稳定性和技术先进性。</li>
<li>建立客户端架构组，统一把控客户端基础技术体系建设。</li>
<li>推进数据团队的融合，有效完成几个数据相关项目的开发和上线。</li>
<li>继续弥补自身在业务和数据Sense、成本意识、商业谈判能力、产品管理能力这些方面的短板。</li>
<li>推进Devops平台的开发和上线。</li>
<li>完成2019年读书计划中剩下的书籍。</li>
<li>坚持锻炼，身体是最重要的。</li>
<li>寻找更好的方式来平衡工作和对女儿的陪伴。</li>
</ul>


<p>最后，年底发生的武汉肺炎的事情正在愈演愈烈。大家务必注意自己和家人的安全，少出门，出门记得戴口罩。</p>

<p>提前祝大家春节快乐，万事如意，一切顺利^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何进行有效的技术分享（演讲）]]></title>
    <link href="http://www.rowkey.me/blog/2019/10/23/how-to-tech-share/"/>
    <updated>2019-10-23T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/10/23/how-to-tech-share</id>
    <content type="html"><![CDATA[<p>讲述如何准备一次技术分享（演讲）以及演讲中的注意事项。来自内部分享PPT，后续会发布<strong>详细版</strong>。</p>

<!--more-->


<h2>What-什么是有效的技术分享</h2>

<ul>
<li>演讲

<ul>
<li>知识/技能培训</li>
<li>组件/平台/系统使用培训</li>
<li>工作实践经验/教训</li>
</ul>
</li>
<li>写博客？</li>
</ul>


<p><strong>有效->满足听众的诉求</strong></p>

<h2>Why-存在的问题</h2>

<ul>
<li>语速太快</li>
<li>图解太少</li>
<li>缺乏实践案例</li>
<li>内容太多</li>
<li>内容都在ppt上</li>
</ul>


<h2>How-如何准备技术分享</h2>

<h3>目的</h3>

<ul>
<li>开阔眼界</li>
<li>培训</li>
<li>讨论</li>
</ul>


<p><strong>听众的组成；听众对领域的了解程度；听众的诉求</strong></p>

<h3>结构</h3>

<ul>
<li>Who</li>
<li>What</li>
<li>Why</li>
<li>How：重点选3、4点</li>
<li>Future</li>
<li>Recap</li>
</ul>


<h3>内容</h3>

<ul>
<li><strong>backlog</strong>: 收集、积累信息</li>
<li><strong>逐字稿</strong></li>
<li><strong>形式</strong>：

<ul>
<li>报告：精确的信息和枯燥的细节、事实和图表</li>
<li>故事：具体；强调说服和感染；<strong>赋比兴</strong></li>
<li>演讲：介于报告和故事之间</li>
</ul>
</li>
<li><strong>实践案例</strong>、经验 > 说教

<pre><code>  - Situation: 当时的情况
  - Target: 面临的任务/目标
  - Action: 采取的行动
  - Results: 取得的结果
</code></pre></li>
<li>内容量适可而止</li>
<li><strong>Demo</strong>: 关键特点、容错处理</li>
</ul>


<h3>PPT</h3>

<blockquote><p>烘托效果和提醒，<strong>配角</strong></p></blockquote>

<ul>
<li>How的几个重点，每一个点2-3页，共15-20页</li>
<li>精简文字+图表，多图少字</li>
<li><strong>简洁、干净、一致、跳脱</strong></li>
<li><strong>忌</strong>：交互式幻灯片、大片文字</li>
</ul>


<h3>练习</h3>

<hr />

<blockquote><p>多练出奇迹</p></blockquote>

<ul>
<li>自我练习</li>
<li>让别人听：公司/团队内部试讲</li>
<li>冥想：站在听众的角度去接受信息</li>
</ul>


<p><strong>根据反馈不断进行迭代改进</strong></p>

<h2>分享Tips</h2>

<ul>
<li>紧张

<ul>
<li>觉察：“只要不被听众察觉到紧张，那就不是紧张”。</li>
<li>充分准备</li>
<li>内容量适可而止</li>
<li>简洁PPT：留有自由发挥余地</li>
<li>练习</li>
</ul>
</li>
<li>节奏

<ul>
<li>语速放缓</li>
<li>多准备点内容：演讲时间固定的情况下讲不完比冷场要好</li>
<li>规划要点、时间</li>
</ul>
</li>
<li>目光：面对听众并熟视无睹；巡视听众</li>
<li>语调：有感情；抑扬顿挫</li>
<li>手势：忌手足无措</li>
<li>演讲设备/PPT的备份</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何培养解决问题的意识]]></title>
    <link href="http://www.rowkey.me/blog/2019/08/23/solve-problem/"/>
    <updated>2019-08-23T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/08/23/solve-problem</id>
    <content type="html"><![CDATA[<p>解决问题其实并不是最终的目的，需要加一个修饰词成为有效地解决问题，这才是最终的目的。那么如何有效地解决问题呢？这是有一些方法论做指导的。要培养解决问题的能力，需要首先掌握这些方法论。解决问题分为三步走：识别问题、分析问题、解决问题。</p>

<!--more-->


<ul>
<li>所谓识别问题，这一点尤其重要，因为很多时候提需求的人提的只是方案而非真正的问题，这时候如果不加思索就开始去做，最后反而达不到需求方的期望，举一个可能很多人听过的段子，程序员的妻子跟程序员说：把这些土豆削一半儿放到锅里，程序员很快就做完了，结果妻子发现所有土豆都下了锅，不过每一个土豆都被削掉了一半。哈哈一笑的同时，很多人觉得这是沟通的问题，其实从另一个角度来看，还是因为没有识别出真正的问题是什么。平时的工作中，也会有很多人在遇到问题和接到需求时，为了赶时间，想都不想就开始做，结果最终的结果解决不了问题或者满足不了需求方，这都是因为没有真正的识别问题而造成的。脑子总是比手慢也说的是这个意思。在识别问题的时候则可以通过5W2H提问来理解真正的问题，What，问题时什么；Why，为什么会发生问题；Who，谁造成的问题；When，何时发生的问题； Where，哪里的问题；How，问题时怎样发生的；How much，问题发生的频率，影响程度如何。</li>
<li>分析问题，需要依靠专业能力或者经验来找到所有可能的原因，然后可以通过冰山分析法、鱼骨法来分析问题的根本原因，这一点也特别重要，很多时候如果识别不出根本原因，那么只会是治标不治本，当然对于一些紧急事故，解决事故是紧急首要的，后续的问题管理则需要找出问题的根本原因，以防止后续问题的重复发生。</li>
<li>解决问题，需要根据分析出来的问题原因，给出解决方案，这个也需要专业能力和经验的支撑，如果有多个方案则可以使用理性决策的比较矩阵和决策矩阵支撑最终的方案的选择。</li>
</ul>


<p>以上是解决问题的三步走。支撑这个方法论的除了上面提到过的专业能力和经验支撑，我觉得还需要具有owner意识，即把问题当做自己的问题，主动积极的去寻求能更好解决问题的方案。</p>

<p>掌握了这些方法论后，则需要不断的模仿学习、实践，并且最重要的是多总结，要把平时工作中自己实践的、看到别人实践的不断的总结梳理，形成自己的知识体系，这样才能真正成为自己的技能，才能在遇到问题时做到有条不紊，从容应对，同时也能进一步完善自己解决问题的方法论、专业能力和经验，形成良性闭环。例如在很多公司都会有故障解决的一套指导流程，比如在碰到服务器响应变慢时，先通知受影响方，然后组织相关人员，如果有经验则第一时间修复，无经验则需要从最近的变动着手，先排查哪几方面问题，再排查哪几方面问题，这个流程即在实践过程中不断沉淀下来的知识体系。</p>

<p>总结来说，就是掌握解决问题的方法论，带着Owner意识多去实践解决问题，多去模范学习别人如何解决问题，多去总结沉淀成自己的知识体系和方法论形成闭环。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这些知识决定了程序员的上限（PPT版）]]></title>
    <link href="http://www.rowkey.me/blog/2019/04/22/upforprogrammer/"/>
    <updated>2019-04-22T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/04/22/upforprogrammer</id>
    <content type="html"><![CDATA[<p>讲述决定程序员上限的一些知识技能点，包括如何学习、如何阅读源码、计算机科学基础知识体系等。来自内部分享PPT，后续会发布<strong>详细版</strong>。</p>

<!--more-->


<h2>什么是程序员？</h2>

<ul>
<li>码农、程序猿、程序媛</li>
<li>使用<strong>程序</strong>实现价值</li>
<li>程序=数据+算法</li>
<li>软件=程序+软件工程</li>
<li>程序员=工程师？</li>
</ul>


<h2>程序员金字塔</h2>

<p><img src="http://www.rowkey.me/post_images/ufp/programmer-pyramid.png" width="500"/></p>

<h2>程序员知识结构</h2>

<p><img src="//post_images/ufp/knowledge.png" alt="" /></p>

<ul>
<li>面试造火箭，工作拧螺丝</li>
<li>会什么是你的下限，能够会什么是你的上限</li>
<li>越底层的东西越决定上限</li>
</ul>


<h2>学习欲望</h2>

<blockquote><p>杜绝<strong>1</strong>年工作经验重复<strong>N</strong>年</p></blockquote>

<ul>
<li>如果自己遇到这种问题会怎么解决，与资料中的解决方案相比优劣如何？</li>
<li>别人为什么会想到这种解决方案？</li>
<li>自己是由于经验欠缺还是技能点欠缺才导致没有想到好的解决方案？</li>
<li>解决这类问题的根本思路是什么样的？</li>
</ul>


<h2>学习能力</h2>

<blockquote><p>不是懂得多，而是学得快</p></blockquote>

<ul>
<li><strong>知其然更要知其所以然</strong>：技术以深度优先</li>
<li><strong>类比现实</strong>：对现实世界的模拟</li>
<li><strong>更好地接受信息</strong>：建立自己的知识体系；阅读并记笔记，纳入知识体系</li>
<li><strong>深度思考</strong>：阅读书籍</li>
<li><strong>动手实践、频繁练习</strong>：项目驱动型学习；主动思考</li>
<li><strong>自我总结</strong>：完善知识体系；笔记、博客、分享</li>
<li><strong>持续学习</strong>：逃离舒适区；学到老，活到老</li>
</ul>


<h2>如何学习新技术</h2>

<p><img src="http://www.rowkey.me/post_images/ufp/study-new-tech.png" width="500"/></p>

<h2>如何阅读源码</h2>

<ol>
<li>阅读该技术的架构文档，了解其总体架构和组成</li>
<li>根据总体架构，将源码文件以模块或者上下层级进行分类。</li>
<li>从未阅读过的模块中选择最独立（依赖性最小）的模块代码读起。</li>
<li>阅读此模块的功能介绍文档。</li>
<li>阅读此模块的源代码：<strong>运行程序，断点调试</strong>。</li>
<li>一边阅读一边整理调用关系图。</li>
<li>转到第三步。</li>
</ol>


<blockquote><p>参考<strong>官方文档或者经典书籍</strong></p></blockquote>

<h2>计算机思维</h2>

<ul>
<li><strong>冯.诺依曼体系</strong>：程序存储，顺序执行。</li>
<li><strong>二进制存储</strong>：用比特解决问题</li>
<li><strong>位运算</strong>：位运算的高效</li>
<li><strong>逻辑分支</strong>：条件判断、循环、迭代、递归</li>
</ul>


<h2>个人规划</h2>

<ul>
<li><strong>长期规划</strong>：职业规划；高瞻远瞩</li>
<li><strong>短期规划</strong>：具体技能、晋升、学习方面的规划；优先级排序</li>
</ul>


<h2>基础学科</h2>

<ul>
<li><strong>物理</strong>：电路原理；量子计算机</li>
<li><strong>数学</strong>：工程优化；线性代数；微积分</li>
<li><strong>英语！！</strong>：阅读英文文献；计算机术语</li>
</ul>


<h2>计算机组成原理</h2>

<blockquote><p>计算机的硬件组成和运行原理</p></blockquote>

<ul>
<li><strong>冯诺依曼体系</strong>、<strong>摩尔定律</strong>、<strong>阿曼达定律</strong></li>
<li><strong>数据的机器表示</strong>：原码、补码、反码、浮点数/定点数</li>
<li><strong>指令系统</strong>：复杂指令集、简单指令集</li>
<li><strong>存储器</strong>：分类、缓存</li>
<li><strong>CPU</strong>: 流水线、伪共享、缓存</li>
<li><strong>IO设备</strong>：IO总线、DMA、中断</li>
</ul>


<h2>计算机操作系统</h2>

<blockquote><p>屏蔽计算机硬件的中间层</p></blockquote>

<ul>
<li><strong>作业调度</strong>: 调度策略、优先级</li>
<li><strong>进程管理</strong>：进程和线程、进程间通信</li>
<li><strong>存储管理</strong>：内存、虚拟内存、文件系统、页、页缓存</li>
<li><strong>IO管理</strong>：IO设备读写操作</li>
<li>Linux操作系统</li>
</ul>


<h2>计算机网络</h2>

<blockquote><p>单个计算机之间的互连</p></blockquote>

<ul>
<li><strong>TCP/IP协议栈</strong>：四层/七层</li>
<li>TCP连接状态</li>
<li>TCP与UDP的区别</li>
<li>HTTP协议、RESTful规范</li>
<li>网络安全</li>
<li><strong>下一代互联网</strong>：IPv6、物联网、5G</li>
</ul>


<h2>编译原理</h2>

<blockquote><p>将代码转换成机器可理解的二进制，有助于实现DSL</p></blockquote>

<ul>
<li>词法分析、语法分析</li>
<li>类型检查</li>
<li>运行时环境、中间代码</li>
<li>代码生成、代码优化</li>
</ul>


<h2>数据结构和算法</h2>

<blockquote><p>程序=数据+算法</p></blockquote>

<ul>
<li><strong>基本数据结构</strong>：数组、链表、栈、队列、哈希表</li>
<li><strong>最大堆、最小堆</strong>：TopN问题</li>
<li><strong>树</strong>：平衡二叉树、B树、B+树、红黑树</li>
<li><strong>跳跃表</strong>: 简单可实现</li>
<li><strong>经典排序算法</strong>：快速排序、归并排序、插入排序、冒泡排序</li>
<li><strong>经典查找算法</strong>：顺序查找、二分查找</li>
<li><strong>高级算法</strong>：贪心、分治、回溯、动态规划</li>
<li><strong>大数据处理</strong>：Bitmap、Bloomfilter、Hyperloglog、MapReduce、MPP</li>
</ul>


<h2>设计模式</h2>

<blockquote><p>软件可复用、可扩展、可维护。善用而不滥用。</p></blockquote>

<ul>
<li><strong>面向对象SOLID设计原则</strong>：单一职责、开闭原则、里氏代换、接口隔离、依赖倒转</li>
<li><strong>常用设计模式</strong>：单例模式、工厂模式、代理模式、适配器模式、观察者模式</li>
<li><strong>常用框架中的设计模式</strong>：Spring</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2018]]></title>
    <link href="http://www.rowkey.me/blog/2019/01/26/my2018/"/>
    <updated>2019-01-26T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/01/26/my2018</id>
    <content type="html"><![CDATA[<p>此文是我在部门内的一次公开信（经过脱敏），想法来自于《原则》和《谷歌是如何运营公司的》两本书。极度求真、 极度透明的原则是一个想要做出大事业的公司应该具有的气度，而对所有同事能够客观地陈述自己的得与失，并欢迎吐槽，这不仅仅是真诚文化、极度透明原则的体现，也是对自己的一种压力和驱动。</p>

<!--more-->


<hr />

<p>hi, 技术平台部的各位同学：</p>

<p>2018年，我们优化升级了我们的大数据基础设施、运维平台以及推荐引擎，保障了业务的稳步前进；进一步发挥了数据分析师的作用，为业务和商业的发展指明了方向；上线了广告DSP平台，加速了公司的商业变现&hellip;虽然期间出现了一些事故，但总体上还是受到了其他部门的一致好评。感谢大家一年的努力，让我们技术平台部发挥了该有的”平台“作用。希望大家在新的一年继续加油，贯彻“平台”理念，为业务发展提供强有力的保障。</p>

<p>之前安排了大家做每个人和每个团队2018年的工作总结和2019年的工作规划。看到大部分人都能认识到过去的一年自己的问题，也能做好新的一年的规划。现在我把自己的总结规划分享给你们，希望能给你们一些启发。当然，如果有我自己没觉察到的我自身存在的问题，欢迎私信给我。</p>

<p>自己今年的工作可以从四个大方面来讲：部门管理、技术委员会、架构、数据挖掘。</p>

<h3>部门管理</h3>

<p>2018年自己有了新的角色定位，需要对公司的整个技术团队负责，这也让18年成为了自己写代码最少的一年，也是让自己决心进行角色转变的一年。虽然之前也在对整个后端团队以及部门（平台事业部->后台技术中心->技术平台部）做管理工作，但对自己来说，很长一段时间心里对管理是排斥的，尤其是当管理杂事越来越多，写代码的时间越来越少。自己的性格也是属于偏情绪化的，很多时候会让潜意识占了上风，说一些错误的话，发一些没必要发的脾气。在之前的管理工作中，自己意识到管理的并不好，一直还处于研发工程师的角色上。这在18年开始自己就进行了刻意的改变，试着跳出工程师思维，多从团队整体考虑问题，多从对方角度看待问题。具体的事情包括：</p>

<ul>
<li>优化月度考核机制，强调考核的具体原则以及从团队角度进行评估的视角。最终形成了主管和员工两条线、优秀员工投票选举、优秀主管负责人指定的月度考核机制。</li>
<li>加强一对一沟通，建立反馈问题的模式。</li>
<li>确立部门月会&amp;&amp;Leader周会的会议机制。</li>
<li>建立部门的操作手册让流程公开透明，提高做事效率。</li>
<li>带领大家学习并切实的开始实践OKR。建立部门的OKR流程，做到季度末部门月度会议复盘上一季度OKR、制定下一季度OKR。</li>
<li>强调“件件有着落，事事有回音”的团队文化，旨在解决很多人对交待的任务不主动响应、不主动汇报进度的非职业素养问题。</li>
</ul>


<p>此外，年初新业务的突击上线自己担任了项目管理和架构师的角色，后续自己也花了一些时间协助业务部门定位排查故障。日常的简历筛选、面试也占用不少时间和精力。</p>

<p>在年度考核中，看到同事们对自己的一些意见，基本都符合我的自我认知，也是在管理方面自己需要改进的：</p>

<ul>
<li>说服力：有些时候会比较急，语气比较强烈，因此会让人有抵触的情绪，需要进一步提高自己的沟通技巧和说服力。此外，有时候并没有了解事情的来龙去脉就下结论，这个需要竭力避免自己的主观臆断。</li>
<li>应变能力：转变为管理角色后，需要培养自己之前很抵触的审时度势、待人处事灵活的特质。</li>
<li>激励团队：目前对团队的激励的方式包括团队聚餐、项目奖励、月度奖励、技术书籍奖励等，并没有其他更加有效的激励措施。这一点需要改进，多想一些赋能方式来激励团队。</li>
<li>协作：和说服力那一点一样，在协作时有时候会太急，用职权影响力或者情绪化来影响结果。这个都是自己没有很好转变角色的问题。</li>
<li>高估团队：这个的本质问题还是观念改变，需要自己认识到目前团队成员的状况，对不同的人采取不同的领导策略，不能全部是放养状态，做好辅导和问题预估的协助。</li>
</ul>


<h3>技术委员会</h3>

<p>公司的技术委员会已经成立了三年，其一开始是为了评选“技术创新奖励”，后来随着公司的组织架构调整为按照业务为单位的敏捷式组织，技术委员会的横向管理职责越来越大。2018年限于业务迭代压力的问题，技术委员会的运行并没有走上正轨，但也做出了一些产出：</p>

<ul>
<li>确立了技术分享机制，大前端和后端都进行了系列分享。</li>
<li>制定了各个研发职位的能力模型，让技术团队成员都能够对自己的职业发展有清晰的认识。</li>
<li>完善了研发职位的学习计划，给入门的工程师提供学习指导。</li>
<li>制定了事故制度和研发高压线，规范事故处理流程，明确不可触碰的高压线。</li>
<li>制定技术选型原则，给技术团队做技术选型的指导。</li>
<li>制定实习生培养制度，规范化实习生转正流程。</li>
<li>进行“Hold住前后端系列分享”，提高资深以上工程师整体技术把控能力</li>
<li>带领各个技术Leader做了《技术管理实战三十六讲》的学习和沟通，解惑了很多程序员在转型管理时候面对的问题，让大家对“管理”有了更明确的认知。</li>
<li>例行的技术周刊、技术创新奖励继续得到有效执行。</li>
</ul>


<h3>架构</h3>

<p>架构方面，产出了一些公共组件和规范：</p>

<ul>
<li>制定了技术评审机制，强调对容器、中间件的容量预估和限流，从架构设计开始尽量规避性能故障。</li>
<li>梳理架构隐患分析流程，强调对架构的隐患分析和预防。</li>
<li>梳理系统稳定性原则，给系统设计时的稳定性予以指导。</li>
<li>制定架构设计文档模板：技术调研、技术方案分析、系统设计，规范系统设计流程。</li>
<li>研发公共组件：antares分布式调度中心。</li>
</ul>


<p>由于业务增长给后端带来了很大压力，在年底筹划并成立了架构组，由各个后端Leader组成，是一个虚拟的横向组织。其主要负责公司的架构规范梳理和制定以及公共组件/中间件的开发。目前基本上囊括了自己进入公司以来做的一些公共组件开发和架构规范工作，最近也产出了公共组件搜索平台供研发人员使用。</p>

<p>此外，为了进一步提高各个Leader的架构能力，给大家购买了极客时间《从0开始学架构》课程并组织了学习讨论会，在去年进行过一次架构学习的基础上再一次让大家讨论了对架构的认识和理解。并且做了《浅析区块链》、《后端基础设施》、《架构设计与原则》、《如何排查在线故障》的分享，提高大家的架构、故障排查等能力。</p>

<h3>数据挖掘</h3>

<p>数据挖掘这一方面，由于客观原因，自己一直在跟进。年初给自己定的目标是成为一个合格的机器学习调参工程师，能够熟知、理解和实现常用的机器学习算法。这一年也一直在看《机器学习》西瓜书、《机器学习实战》两本书。不过由于各种杂事以及架构工作的干扰，进度一直很慢。虽然最终阅读完了《机器学习实战》这本书，也实现了大部分算法，但数据挖掘有了更加合适的人来做具体工作，基本能Hold住目前的需求，自己也没有那么多时间专注这一块，在权衡了收益之后（把精力放在架构上给团队带来的收益会更大），最后决定放弃。毕竟，数据挖掘这一块入门需要花大量的时间来补充大量知识。如果没有那么多的时间专注做这件事情，入门都难，更难谈熟悉和精通。</p>

<p>所以，这一年参与了很小一部分推荐系统的开发工作，大部分是在担任推荐引擎的项目管理工作。本年度推荐系统最大的一个改进是做了架构的升级，引入了召回+CTR预估的推荐机制，合理划分了推荐引擎的分层架构。</p>

<h3>学习</h3>

<p>学习方面，平时会零零散散看一些微信和博客上的文章，并把其中自己觉得受到启发的点经过验证后纳入到自己的知识体系文档中。此外，自己今年包括在线课程一共学习了14本书/课程。如下：</p>

<ul>
<li><p>OKR: 源于英特尔和谷歌的目标管理利器</p>

<blockquote><p>此书是公司管理层进行统一学习的一本书，不厚，花了三个晚上大约6个小时就读完了。主要是对OKR这种目标管理方法的入门指导。不同于绩效的，OKR强调的是自驱力和挑战性，并不用来考核，是为了识别高绩效员工。O表示Objective，KR表示Key result。把周期内的事务分解为一个个目标，再把完成这个目标的衡量标准分解为一个个关键结果。周期结束复盘关键结果的完成度，也就相当于复盘了目标的完成度。</p></blockquote></li>
<li><p>尽在双11，阿里巴巴技术演进与超越</p>

<blockquote><p>此书讲述的是阿里巴巴为了支撑双十一技术上的一些演化。包括大数据平台、机器学习平台、数据中间件、容量规划、全链路压测、系统稳定性保障、流控方案、协同运维、移动端混合开发等技术。能够看到架构和技术是随着业务的发展而不断演进的，能够给我们这种小公司一个未来技术规划的路线图。</p></blockquote></li>
<li><p>深入分布式缓存</p>

<blockquote><p>集结各大公司技术网红的一本主要讲分布式缓存的书籍。包括缓存和分布式理论、Ehcache和Guava Cache本地缓存框架、Memcached、Redis、Tair、Evcache、Aerospike等集中式缓存，并讲述了这些技术在各大公司的实际应用案例。对自己最有启发的是此书对CAP的讲解，发现自己之前对这个理论的理解貌似有点偏差，就把相关的英文论文又看了几遍。此外，有一章讲述社交场景架构进化，虽然个别指标数字的来源比较模糊也没有说明，但是从数据库到缓存的设计和演进思路确实让我眼前一亮，比如通过前缀+保序压缩设计主键来使用覆盖索引。还值得一提的是在这里第一次看到了Aerospike在广告场景的使用，这个现在已经在我们公司的广告平台进行了实践并取得了较好的效果。</p></blockquote></li>
<li><p>增长黑客</p>

<blockquote><p>一本前几年非常火的书。也是这本书把“增长黑客”的概念引入国内。讲述了什么是增长黑客、增长在做什么、如何做增长等内容。由于工作中与增长并不密切相关，因此感触并不多。算是自己在增长方面的一个入门读物。</p></blockquote></li>
<li><p>Microservices AntiPatterns and Pitfalls</p>

<blockquote><p>微服务的反模式和陷阱。是O’Reilly的免费电子书，主要讲述了在做微服务设计和实现的时候经常会做错的一些事情。强烈推荐想要做微服务的同学看一下此书。我自己的翻译见：<a href="http://www.rowkey.me/blog/2018/06/02/microservice-pitfall/">http://www.rowkey.me/blog/2018/06/02/microservice-pitfall/</a>。</p></blockquote></li>
<li><p>Reactive Microservices Architecture</p>

<blockquote><p>响应式微服务架构-分布式系统设计原则。同样是O’Reilly的免费电子书，主要讲述了在做微服务设计的时候需要遵循的原则。结合上面的微服务的反模式和陷阱，能够更好地认识、设计和实现微服务。我自己的翻译见：<a href="http://www.rowkey.me/blog/2018/06/07/reactive-microservice/">http://www.rowkey.me/blog/2018/06/07/reactive-microservice/</a></p></blockquote></li>
<li><p>进化-运维技术变革与实践探索</p>

<blockquote><p>来自极客时间相关课程的一个书籍。主要讲述了运维技术的演进和实践。其中让我自己印象比较深的，一个地方是其讲述的架构师负责设计架构，运维则是负责管理架构；另一个地方是美丽说实践的一个办公室测试环境（小蘑菇环境），这个我们公司后来也进行了实践和推行。此外，这本书给出的事故定则维度和研发高压线也给了自己一些启发，进一步出台了公司的相关制度。</p></blockquote></li>
<li><p>推荐系统三十六计</p>

<blockquote><p>极客时间的一个课程。讲述的业界推荐系统主流的一些做法，包括各种召回策略/算法、融合排序方案、EE问题解决方案等，基本能够解决推荐系统80%的问题。此书给了自己不少启发，后续公司的推荐引擎的架构升级和团队规划的想法就来源于此。</p></blockquote></li>
<li><p>码农翻身</p>

<blockquote><p>花了差不多四个晚上大约4个小时阅读完此书。全书基本都是些基础知识，收获有一点（巩固了一些自己之前似是而非的点，比如Java动态代理为什么不能代理没有实现接口的类），但确实不太多。不过这种用故事讲技术的方式的确让自己有了一些启发，很多时候能够把技术和现实联系起来，既能够加深自己的理解，也能够更容易给别人讲明白。而最后作者给出的程序员需要<strong>克服内向心里，凡事必先上虎背</strong>，这个自己非常认同，人很多时候不逼自己一把是不知道自己有多少实力的。</p></blockquote></li>
<li><p>原则</p>

<blockquote><p>今年非常火的一本书，是桥水的创始人对自己生活以及工作的原则所做的总结。其中最让我印象深刻也注意后续实践的包括：头脑极度开放、极度求真和极度透明。第一点让自己突破了心里的一个坎，认识到人都有自我意识和思维盲点，会经常审视自己是否不敢接受自己在某些方面的欠缺，是否能够以开放的心态聆听别人的意见和看法，讨论问题时是否是抱着解决问题而不是论证自己的观点的态度。后面两点在公司里其实很难实现，但一旦实现，换来的是全员的目标一致、利益一致，随之而来的会是高效地产出。这个也是后续自己要在部门坚定推行的一种文化。此外，也注意到在评估一个工作业绩不突出的同事时要区分是其能力（包括学习能力）不够还是经验不够。经验不够可以学习弥补，但如果是能力不够则需要考虑淘汰。</p></blockquote></li>
<li><p>从0开始学架构</p>

<blockquote><p>来自极客时间的专栏课程，是对架构的一个入门讲解。其中的很多知识点都印证了自己之前的一些总结和实践。让自己受用的主要是其提供的几个架构设计文档模板：技术方案设计、技术方案评估和选择、详细方案设计。</p></blockquote></li>
<li><p>技术管理实战36讲</p>

<blockquote><p>同样是来自极客时间的专栏课程，给公司的所有技术Leader都购买并进行了学习讨论。主要就是解惑技术转管理面对的那些问题。如技术人的职业后期的方向有哪些？技术人适合做管理吗？管理到底做什么？管理能够成为自己的立身之本吗？其阐述的管理就是“看方向”、“带人”、“做事”，非常接地气的阐述了管理的职责。从公司几个技术Leader的反应来看，都觉得很受启发，尤其是角色认知这方面。相比起其他管理方法论，这个更加联系实际，更加干货。其讲述的团队规划方案、驱动力3.0等后来也运用在了实际工作中。</p></blockquote></li>
<li><p>机器学习实战</p>

<blockquote><p>这本书是入门机器学习的经典书籍之一，结合代码和原理讲解常用的机器学习算法。基本涵盖了机器学习常用的分类、预测、聚类、频繁项发现等算法。结合《机器学习》西瓜书，理论+实践，是入门机器学习的推荐方式。</p></blockquote></li>
<li><p>重新定义公司：谷歌是如何运营的</p>

<blockquote><p>这本书是在去参加年会的路上看完的，也就3个小时左右。主要讲述了Google特色的运营公司的方法。当然，Google能那么做并不代表你也可以这么做，毕竟人才的素养差距有点大。其中让自己感到受用的有两方面：会议的决策者应该亲力亲为，从通知议程、会议召开、保证质量、设立目标、确定与会人员到会议纪要都要亲自执行；要做好职业规划，想象自己五年后希望的职业，那个职位的JD是什么样子的，要求如何?并对照看自己的优势/劣势在哪，怎么去改进。</p></blockquote></li>
</ul>


<p>以上书籍/课程的学习笔记我都放在了Github(<a href="https://github.com/superhj1987/ToDo/issues/1">https://github.com/superhj1987/ToDo/issues/1</a>)上，通过issue的方式串联起来，确实提高了记录笔记的速度和学习的有效性。不过最近发现使用幕布（<a href="https://mubu.com">https://mubu.com</a>）这个软件思维导图的方式更加合适做学习笔记，也正在转移到这上面。当然，像marginnote则是更为强大的阅读笔记软件，感兴趣的可以使用。这里要再强调一下的是做读书笔记的重要性，之前有朋友特别喜欢购买书籍，书架上全是，咋看之下，绝对是啥都懂的超级大神，但其实大部分书都没有翻过，翻过的也基本看完就放在那里了。这样如果看书不注意记录笔记和学习心得并纳入到自己的知识体系中，效果是大打折扣的，尤其是当这本书的知识点和你实际的工作联系并不紧密时，很快你就会就把这本书讲的东西给忘了。我一直以来的做法是看书的过程会通过拍照、文字等形式记录笔记，并在完成阅读后，再概览一遍书的目录，把其中觉得有用的点都纳入到我的知识体系文档中。这样即使后来由于不经常使用而淡忘了也能够快速定位到相关的知识点。</p>

<p>18年也有一些计划的书并没有完成阅读，都纳入到了19年的学习计划中。目前计划的读书列表如下：</p>

<ul>
<li>Clean Architecture</li>
<li>分布式系统概念与设计</li>
<li>复杂</li>
<li>清教徒的礼物</li>
</ul>


<h3>工作之外</h3>

<p>工作之外，自己把2015年就有初步构想的书给出了，最近也收到了编辑寄来的2018年度优秀作者的奖杯。由于书的类型还算新颖，所以结果还不错，但自己其实挺遗憾的。出版前review了很多次，还是在出版后发现了不少错误，甚至一些自己怎么都想不明白为何会犯的错误。这也警醒了自己，不管东西多大多小，只要是输出的东西，务必保证准确性，不求能帮助所有人，但一定也不至于误导别人。与之关联的，自己也一直跟公司的技术团队强调，对于市面上的资料一定要学会甄别，国内的文章、书籍很多都是不可靠的，很多知识点都是copy来copy去，并没有经过作者亲自求证。如果要学习知识，最好的资料就是官方文档，之后是相关的英文书籍或者其权威翻译版本。毕竟，总是去看别人嚼过的知识，那么也就意味着你一直在follow别人，而无法获取技术的第一手资料，也就无法站在技术的前沿。计算机领域绝大多数第一手资料都是英文的，这造成了很多人觉得难以阅读而去看各种中文资料。一个外国朋友更是表达了他对中国技术人员的一个直观的印象就是英文不好，从来不看英文文档或者看的不够仔细，直接导致对技术的运用会有很大的偏差。他说的的确是中国大部分程序员的现状，但我真心不希望我们的技术团队是这样的一个团队，希望大家能够多强迫自己阅读并理解各种英文文档、英文书籍，久了自然而然就会越来越顺手，理解起来也就会越来越容易。</p>

<p>个人生活方面，最主要的还是一直以来的入睡困难、睡眠质量差的问题在困扰自己，导致自己很晚才能入睡，进一步导致自己无法早起，也就让自己失去了很多可以学习工作的时间，想想会觉得很难受。曾经想过很多办法，都效果不大。从8月份开始决定通过健身来彻底改变这些问题，最近也开始注意饮食，希望不久能够从根本上解决这个困扰自己多年的问题，给自己带来更多的学习、生活、工作时间。这里也想跟大家强调一下身体的重要性，任何东西都是以身体为基础的，身体如果不能够健健康康，那么其他的都无从谈起，所以一定要注意锻炼身体从而保证充足的活力和健康。此外，虽然公司给咱们买了保险，还是建议大家都给自己补充一些商业保险，这个其实也是理财的一种形式，用不上最好，一旦用上真的是解决大问题。</p>

<h3>总结</h3>

<p>以上是自己对2018的工作生活的总结，对照18年初的计划基本都达成了，自己大体也是满意的。对于其中各个方面的不足，新的一年也会采取措施来改善。对于2019年的规划，大体如下：</p>

<ol>
<li>加强技术委员会的横向管理作用，全面提升各个技术方向的研发实力。</li>
<li>采取更多更有效的方式提升各个技术Leader的技术管理以及架构能力。</li>
<li>把控架构组的日常工作和组件研发。</li>
<li>做好蜂巢推荐引擎的进一步推进工作，争取能够有突破性的进展。</li>
<li>完善各个团队的梯队建设。</li>
<li>进一步明确自己的角色定位，改善自己的沟通能力和管理能力。</li>
<li>每周做至少2-3道leetcode medium题目，保持自己的编程感觉。</li>
<li>改善自己的睡眠问题和身体状况，提高自己的活力，能够有更多的时间在工作、学习和生活上。</li>
</ol>

]]></content>
  </entry>
  
</feed>
