<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2018-12-05T23:52:49+08:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式简明指南]]></title>
    <link href="http://www.rowkey.me/blog/2018/03/10/regx/"/>
    <updated>2018-03-10T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/03/10/regx</id>
    <content type="html"><![CDATA[<p>公司使用的markdown解析类库一直有一些解析上的问题，最近给fix了。而markdown解析主要是对正则表达式的使用。中间恶补了一下相关知识，在此梳理一下。</p>

<h2>什么是正则表达式</h2>

<p>正则表达式就是用一个“字符串”来描述一个特征，然后去验证另一个“字符串”是否符合这个特征。简单的一个例子：用字符串&#8221;a&#8221;来验证字符串s是否是&#8221;a&#8221;，形如s.match(&ldquo;a&rdquo;)。概括来说有以下作用：</p>

<ul>
<li>验证字符串是否符合指定特征，比如验证是否是合法的邮件地址。</li>
<li>查找字符串，从一个长的文本中查找符合指定特征的字符串，比查找固定字符串更加灵活。</li>
<li>替换字符串，比普通的基于字符串的替换更灵活。</li>
</ul>


<!--more-->


<h2>基本规则</h2>

<h3>普通字符</h3>

<p>字母、数字、汉字、下划线、以及后续没有特殊定义的标点符号，都是&#8221;普通字符&#8221;。表达式中的普通字符，在匹配一个字符串的时候，匹配与之相同的一个字符。如：表达式 &ldquo;a&#8221;，在匹配字符串 &#8220;abcde&rdquo;             时，匹配到的内容是：&#8221;a&#8221;。</p>

<h3>转义字符</h3>

<p>一些不便书写的字符，采用在前面加 &ldquo;\&rdquo; 的方法。常见的如：</p>

<ul>
<li>\r: 回车</li>
<li>\n: 换行符</li>
<li>\t: 制表符</li>
<li>&#92;\: &ldquo;\&rdquo; 本身</li>
</ul>


<p>此外，还有其他再正则中有特殊用处的标点符号，在前面加 &ldquo;&#92;&#8221;后，代表该符号本身。如：^, $。如果要想匹配字符串中 &rdquo;^&ldquo; 和 &rdquo;$&ldquo; 字符，需要写成 &rdquo;\^&ldquo; 和 &rdquo;\$&ldquo;。如</p>

<ul>
<li>\^: 匹配^符号本身</li>
<li>\$: 匹配$符号本身</li>
<li>&#92;.: 匹配小数点.本身</li>
</ul>


<p>其匹配规则和普通字符串是一样的，如&#8221;\^&ldquo;匹配&#8221;a^bc&#8221;中的&rdquo;^&ldquo;。</p>

<h3>&lsquo;多种字符&#8217;匹配</h3>

<ul>
<li>\d：任意一个数字，0~9 中的任意一个</li>
<li>\w：任意一个字母或数字或下划线，也就是 A~Z,a~z,0~9,_ 中任意一个</li>
<li>\s：包括空格、制表符、换页符等空白字符的其中任意一个</li>
<li>.：小数点可以匹配除了换行符以外的任意一个字符</li>
</ul>


<p>如：表达式 &ldquo;\dtest\d&#8221;匹配&#8221;1test2&#8221;。</p>

<p>除了正则自带的&#8217;多种字符&#8217;匹配外，还可以通过中括号[]来自定义。</p>

<ul>
<li>使用[ ]包含一系列字符，能够匹配其中任意一个字符。</li>
<li>用 [^ ]包含一系列字符，则能够匹配其中字符之外的任意一个字符。</li>
</ul>


<p>如：[123]匹配 &ldquo;1&#8221;或&#8221;2&#8221;或&#8221;3&rdquo;;[^abc]匹配 &ldquo;a&#8221;、&#8221;b&#8221;、&#8221;c&rdquo; 之外的任意一个字符</p>

<p>这里需要注意的是，在使用[]时，只有会改变字符组含义的才需要转义，</p>

<ul>
<li>反斜线必须转义</li>
<li>方括号必须转义</li>
<li>「^」在首和「-」在中必须转义</li>
</ul>


<p>其他情况即使是特殊字符也不需要转义，如：</p>

<ul>
<li>[aeiou]</li>
<li>[$.*+?{}()|]</li>
<li>[abc^123-]</li>
</ul>


<h3>匹配次数</h3>

<p>&ldquo;次数修饰&#8221;放在&#8221;被修饰的正则表达式&#8221;后边，可以匹配多次。如：</p>

<ul>
<li>{n}: 表达式重复n次，比如： &ldquo;\d{2}&rdquo; 相当于 &ldquo;\d\d&#8221;。</li>
<li>{m,n}:表达式至少重复m次，最多重复n次，比如： &ldquo;a{1,3}&#8221;可以匹配 &#8220;a&#8221;或&#8221;aa&#8221;或&#8221;aaa&#8221;。</li>
<li>{m,}: 表达式至少重复m次，比如： &ldquo;\d{2,}&#8221;可以匹配               &#8220;12&rdquo;,&ldquo;123&rdquo;,&ldquo;12345678&#8221;。</li>
<li>?: 匹配表达式0次或者1次，相当于 {0,1}，比如： &ldquo;a[b]?&#8221;可以匹配&#8221;a&rdquo;,&ldquo;ab&#8221;。</li>
<li>+: 表达式至少出现1次，相当于 {1,}，比如： &ldquo;a+&#8221;可以匹配&#8221;a&rdquo;,&ldquo;aa&rdquo;,&ldquo;aaa&#8221;。</li>
<li>*: 表达式不出现或出现任意次，相当于 {0,}，比如：&#8221;ab*&ldquo;可以匹配                 &#8220;a&#8221;、&#8221;ab&#8221;、&#8221;abb&#8221;。</li>
</ul>


<h3>特殊符号</h3>

<ul>
<li>^: 与字符串开始的地方匹配，不匹配任何字符,这里如果使用(?m)模式，则匹配每一行的开始。如：&#8221;^aaa&#8221;无法匹配 &ldquo;xxxaaaxxx&#8221;，可以匹配&#8221;aaaxxx&#8221;。</li>
<li>$: 与字符串结束的地方匹配，不匹配任何字符，这里如果使用(?m)模式，则匹配每一行的结束。如：&#8221;aaa$&ldquo;无法匹配&#8221;xxxaaaxxx&rdquo;, 可以匹配&#8221;xxxaaa&#8221;。</li>
<li>\b：匹配一个单词边界，也就是单词和空格之间的位置，不匹配任何字符。它与 &ldquo;^&#8221;、&rdquo;$&ldquo; 类似，本身不匹配任何字符，但是它要求它在匹配结果中所处位置的左右两边，其中一边是 &rdquo;\w&#8221; 范围，另一边是             非&#8221;\w&#8221; 的范围。。如：&#8221;.\b.&ldquo;匹配&rdquo;@@abc&#8221;的&#8221;@a&#8221;。</li>
</ul>


<p>此外，还有一些符号可以影响表达式内部的子表达式之间的关系：</p>

<ul>
<li>|: 左右两边表达式之间&#8221;或&#8221;关系，匹配左边或者右边。</li>
<li>(): 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰;取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到。如：&#8221;(ab\s*)+&ldquo;匹配&#8221;hi, ab ab ab&#8221;中的&#8221;ab ab ab&#8221;。</li>
</ul>


<h2>高级规则</h2>

<h3>贪婪与非贪婪匹配</h3>

<p>在使用修饰匹配次数的特殊符号时，有几种表示方法可以使同一个表达式能够匹配不同的次数，比如：&#8221;{m,n}&ldquo;, &rdquo;{m,}&ldquo;, &rdquo;?&ldquo;, &rdquo;*&ldquo;, &rdquo;+&ldquo;，具体匹配的次数随被匹配的字符串而定。这种重复匹配不定次数的表达式在匹配过程中，总是尽可能多的匹配。比如，文本 &#8220;axxxaxxxa&#8221;，&rdquo;(a)(\w+)&ldquo;，其中&rdquo;\w+&ldquo;会匹配&#8221;xxxaxxxa&#8221;，&rdquo;(a)(\w+)(a)&ldquo;则会匹配&#8221;xxxaxxx&#8221;。由此可见，&rdquo;\w+&ldquo; 在匹配的时候，总是尽可能多的匹配符合它规则的字符。虽然第二个举例中，它没有匹配最后一个 &#8220;a&#8221;，但那也是为了让整个表达式能够匹配成功。同样的，带 &rdquo;*&ldquo; 和 &rdquo;{m,n}&ldquo; 的表达式都是尽可能地多匹配，带 &rdquo;?&ldquo; 的表达式在可匹配可不匹配的时候，也是尽可能的<strong>匹配</strong>。这种匹配原则就叫作&#8221;贪婪&#8221;模式。</p>

<p>非贪婪模式则是指的<strong>在修饰匹配次数的特殊符号后再加上一个 &ldquo;?&rdquo; 号</strong>，可以使匹配次数不定的表达式尽可能少的匹配，使可匹配可不匹配的表达式，尽可能的<strong>不匹配</strong>。这种匹配原则也叫作 &ldquo;勉强&rdquo; 模式。如果少匹配就会导致整个表达式匹配失败的时候，与贪婪模式类似，非贪婪模式会最小限度的再匹配一些，以使整个表达式匹配成功。如，文本 &ldquo;axxxaxxxa&rdquo; ，&#8221;(a)(\w+?)&ldquo;，其中&rdquo;\w+&ldquo;只会匹配一个&#8221;x&#8221;。</p>

<h3>反向引用</h3>

<p>表达式在匹配时，表达式引擎会将小括号 &ldquo;()&rdquo; 包含的表达式所匹配到的字符串记录下来。在获取匹配结果的时候，小括号包含的表达式所匹配到的字符串可以单独获取。当用某种边界来查找，而所要获取的内容又不包含边界时，必须使用小括号来指定所要的范围。如：&#8221;&lt;div>(.*?)&lt;/div>&ldquo;即获取div标签内部的内容。</p>

<p>这里小括号包含的正则表达式所匹配到的字符串不仅仅是在匹配结束后才可以使用，在匹配过程中也可以使用。表达式后边的部分，可以引用前面括号内的子匹配已经匹配到的字符串。引用方法是 &ldquo;\&rdquo; 加上一个数字。&#8221;\1&#8221; 引用第1对括号内匹配到的字符串，&#8221;\2&#8221; 引用第2对括号内匹配到的字符串，以此类推，而如果一对括号内包含另一对括号，则外层的括号先排序号。换句话说，哪一对的左括号 &ldquo;(&rdquo; 在前，那这一对就先排序号。</p>

<p>例如：表达式 &ldquo;(&lsquo;|&rdquo;)(.*?)(\1)&ldquo; 在匹配 &rdquo; &#8216;Hello&rsquo;, &ldquo;World&rdquo; &ldquo; 时，匹配结果是：成功；匹配到的内容是：&rdquo; &lsquo;Hello&rsquo; &ldquo;。再次匹配下一个时，可以匹配到 &rdquo; &ldquo;World&rdquo; &ldquo;。</p>

<h3>预搜索</h3>

<p>如前面所讲&#8221;^&ldquo;、&rdquo;$&ldquo;、&rdquo;\b&#8221;字符有一个共同点，就是：它们本身不匹配任何字符，只是对 &ldquo;字符串的两头&rdquo; 或者 &ldquo;字符之间的缝隙&rdquo; 附加了一个条件。同样的，正则中提供了其他基于此原理的机制，来实现预搜索。</p>

<ul>
<li><p>正向预搜索：&#8221;(?=xxxxx)&ldquo;，&rdquo;(?!xxxxx)&#8221;</p>

<p>  格式：&#8221;(?=xxxxx)&ldquo;，在被匹配的字符串中，它对所处的 &#8220;缝隙&rdquo; 或者 &ldquo;两头&rdquo; 附加的条件是：所在缝隙的右侧，必须能够匹配上xxxxx这部分的表达式，不影响后边的表达式去真正匹配这个缝隙之后的字符。如： &ldquo;Mac (?=book|air)&rdquo; 在匹配 &ldquo;Mac pro, Mac air&rdquo; 时，将只匹配 &ldquo;Mac air&rdquo; 中的 &ldquo;Mac&#8221;。</p>

<p>  格式：&#8221;(?!xxxxx)&ldquo;，所在缝隙的右侧，必须不能匹配 xxxxx 这部分表达式。如：&#8221;hello(?!\w)&rdquo; 在匹配字符串 &ldquo;hello,helloworld&#8221;时，匹配 hello&#8221;。这里使用 &rdquo;(?!\w)&ldquo; 和使用 &rdquo;\b&#8221; 效果一样。</p></li>
<li><p>反向预搜索：&#8221;(?&lt;=xxxxx)&ldquo;，&rdquo;(?&lt;!xxxxx)&#8221;</p>

<p>  和正向预搜索类似，反向预搜索要求的条件是：所在缝隙的 &ldquo;左侧&#8221;，两种格式分别要求必须能够匹配和必须不能够匹配指定表达式，而不是去判断右侧。与 &#8220;正向预搜索&rdquo; 一样的是：它们都是对所在缝隙的一种附加条件，本身都不匹配任何字符。</p></li>
</ul>


<h2>其他通用规则</h2>

<ul>
<li><p>可以使用 &ldquo;\xXX&rdquo; 和 &ldquo;\uXXXX&rdquo; 表示一个字符（&#8221;X&#8221; 表示一个十六进制数）</p>

<ul>
<li>\xXX: 编号在 0-255 范围的字符，如： 空格可以使用 &ldquo;\x20&rdquo; 表示</li>
<li>\uXXXX: 任何字符可以使用 &ldquo;\u&rdquo; 再加上其编号的4位十六进制数表示，比如： &ldquo;\u4E2D&rdquo;</li>
</ul>
</li>
<li><p>在表达式 &ldquo;\s&#8221;，&rdquo;\d&#8221;，&#8221;\w&#8221;，&#8221;\b&#8221; 表示特殊意义的同时，对应的大写字母表示相反的意义</p>

<ul>
<li>\S: 匹配所有非空白字符</li>
<li>\D: 匹配所有的非数字字符</li>
<li>\W: 匹配所有的字母、数字、下划线以外的字符</li>
<li>\B: 匹配非单词边界，即左右两边都是 &ldquo;\w&rdquo; 范围或者左右两边都不是 &ldquo;\w&rdquo; 范围时的字符缝隙</li>
</ul>
</li>
<li><p>括号&#8221;()&ldquo;内的子表达式，如果希望匹配结果不进行记录供以后使用，可以使用 &rdquo;(?:xxxxx)&ldquo;格式。如：表达式 &rdquo;(?:(\w)\1)+&ldquo; 匹配 &#8220;a bbccdd efg&rdquo; 时，结果是 &ldquo;bbccdd&#8221;。括号 &rdquo;(?:)&ldquo; 范围的匹配结果不进行记录，因此 &rdquo;(\w)&ldquo; 使用 &rdquo;\1&#8221; 来引用。</p></li>
<li><p>常用的表达式属性设置包括：Ignorecase、Singleline、Multiline、Global</p>

<ul>
<li>Ignorecase: 默认情况下，表达式中的字母是要区分大小写的。配置为 Ignorecase 可使匹配时不区分大小写。有的表达式引擎，把 &ldquo;大小写&rdquo; 概念延伸至 UNICODE 范围的大小写。</li>
<li>Singleline: 默认情况下，小数点 &ldquo;.&rdquo; 匹配除了换行符（\n）以外的字符。配置为Singleline可使小数点可匹配包括换行符在内的所有字符。</li>
<li><p>Multiline: 默认情况下，表达式 &ldquo;^&rdquo; 和 &ldquo;$&rdquo; 只匹配字符串的开始1和结尾4位置。如：</p>

<p>  1xxxxxxxxx2\n
  3xxxxxxxxx4</p>

<p>  配置为 Multiline 可以使 &ldquo;^&rdquo; 匹配1外，还可以匹配换行符之后，下一行开始前3的位置，&#8221;$&ldquo; 匹配4外，还可以匹配换行符之前，一行结束2的位置。使用(?m)可以设置为Multiline模式。如&rdquo;(?m)^\n +&ldquo;。</p></li>
<li>Global: 主要在将表达式用来替换时起作用，配置为Global表示替换所有的匹配。</li>
</ul>
</li>
</ul>


<h2>提示</h2>

<ul>
<li>如果要求表达式所匹配的内容是整个字符串，而不是其中的一部分，可以在表达式的首尾使用 &ldquo;^&rdquo; 和 &ldquo;$&#8221;，比如：&rdquo;^\d+$&ldquo; 要求整个字符串只有数字。</li>
<li>如果要求匹配的内容是一个完整的单词，而不会是单词的一部分，那么在表达式首尾使用 &ldquo;\b&#8221;，如： 使用 &rdquo;\b(if|while|&hellip;)\b&#8221; 来匹配程序中的关键字。</li>
<li>表达式不要匹配空字符串。否则会一直得到匹配成功，而结果什么都没有匹配到。</li>
<li>能匹配空字符串的子匹配不要循环无限次。如果括号内的子表达式中的每一部分都可以匹配0次，而这个括号整体又可以匹配无限次，那么匹配过程中可能死循环。</li>
<li>&ldquo;|&rdquo; 的左右两边，对某个字符应该只有一边可以匹配，以防止&#8221;|&ldquo;两边的表达式因为交换位置而有所不同。</li>
<li>要合理选择贪婪模式与非贪婪模式，如.* 与 .*?的区别使用。</li>
</ul>


<hr />

<p>中华万年历技术团队长期求Java研发工程师，给你挑战<strong>亿级用户</strong>、<strong>千万日活APP</strong>开发的机会。感兴趣者可发送简历到<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x68;&#97;&#110;&#103;&#x40;&#x65;&#116;&#x6f;&#117;&#x63;&#x68;&#46;&#x63;&#110;">&#104;&#x61;&#x6e;&#x67;&#64;&#101;&#x74;&#x6f;&#x75;&#99;&#x68;&#x2e;&#x63;&#x6e;</a>。要求如下：</p>

<p><img src="http://www.rowkey.me/images/blog_images/java_job.jpg" width="350" style="margin:0 auto;display:block"/></p>

<p>详见:<a href="https://m.zhipin.com/weijd/v2/job/0cdf0b4c4c3029521nN5392-FFc~">https://m.zhipin.com/weijd/v2/job/0cdf0b4c4c3029521nN5392-FFc~</a></p>
]]></content>
  </entry>
  
</feed>
