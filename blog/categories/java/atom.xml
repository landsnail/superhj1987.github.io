<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2019-01-26T22:27:23+08:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin语法简明指南]]></title>
    <link href="http://www.rowkey.me/blog/2018/12/08/kotlin-notes/"/>
    <updated>2018-12-08T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/12/08/kotlin-notes</id>
    <content type="html"><![CDATA[<p>Kotlin是Intellij IDEA的发明团队JetBrains带来的新一代JVM语言。虽然JVM上一次又一次出现新的语言叫嚣着取代Java，但时至今日，Java也开始吸纳其他语言的各种优势，其生命力依旧强盛，生态也越发强大。那么Kotlin的出现是又一次重蹈覆辙还是有其突破性的特性？</p>

<p>本文对其语法作了简要概括。</p>

<!--more-->


<p><strong>Kotlin版本：1.3.11</strong></p>

<ol>
<li><p>包的定义</p>

<p> 与Java类似，但包的定义与目录结构无需匹配，源代码可以在文件系统任意位置。</p>

<p> 与Java有一点不同，导入包的时候，可以使用import as实现重命名来解决名字冲突的问题。如：</p>

<pre><code class="`"> import me.rowkey.MainClass as aClass // aClass 代表“me.rowkey.MainClass”
</code></pre></li>
<li><p>没有类型的Java</p>

<p> 虽然Kotlin是静态语言，但其引入的安全类型推断让其无须声明类型。使用val/var即可，其中val定义只读变量，var定义可变变量。</p>

<pre><code class="`"> var str1 : String = "a" //有初始值，可以省略类型
 val str2 : String //无初始值，不能省略类型
 str2 = "b"
 var str = "i can change"
 val immutableStr = "i cannot change"
</code></pre></li>
<li><p>不需要的public</p>

<p> Kotlin中默认的可见性修饰符是public，所以public修饰符不需要写。其他修饰符如下：</p>

<ul>
<li>private：只在类内部/声明文件内部可见。</li>
<li>protected：private+子类中可见。</li>
<li>internal: 同一模块（编译在一起的一套Kotlin文件）可见。</li>
</ul>
</li>
<li><p>函数定义</p>

<p> 用fun关键字声明函数</p>

<pre><code class="`"> fun main(args: Array&lt;String&gt;) {
  ...
 }
</code></pre>

<p> 其中，函数参数使用 Pascal 表示法定义，即 name: type。参数用逗号隔开。每个参数必须有显式类型。</p>

<p> Kotlin中还能够直接通过表达式做为函数体来定义函数。</p>

<pre><code class="`"> fun sum(a : Int, b : Int) = a + b
</code></pre>

<p> Kotlin中的函数和Java中的方法是一致的，但与Java不同的是，Kotlin中的函数可以属于任何类，文件当中直接定义则作为“包级函数”，和类的使用方式一致</p></li>
<li><p>默认参数值</p>

<p> 函数的参数可以指定默认值。</p>

<pre><code class="`"> fun getList(list: Array&lt;String&gt;, offset: Int = 0, size: Int = list.size) { …… }
</code></pre>

<p> 不指定第2个参数调用方法时，offset参数取默认值0, size参数默认取第一个参数的size。</p></li>
<li><p>可变参数</p>

<p> 函数的参数（通常是最后一个）可以用 vararg 修饰符标记：</p>

<pre><code class="`"> fun printIntArray(vararg input: Int) {
     for (i in input) {
         println(i)
     }
 }
</code></pre></li>
<li><p>不需要的语句结束符</p>

<p> Kotlin中没有语句结束符，当然为了与java保持一致性，也可以使用;号作为语句结束符。</p></li>
<li><p>字符串连接符</p>

<p> 跟java一样，如果你需要把一个字符串写在多行里，可以使用+号连接字符串。代码可以这样写：</p>

<pre><code>val str = "hello" + "world" + "!!!";
</code></pre>

<p> Kotlin中的写法也可以这样：</p>

<pre><code class="`"> val str = """hello
 world
 !!!
 """
</code></pre>

<p> 三个”号之间不在需要+号进行连接，不过字符串中的格式符都会被保留，包括回车和tab。</p></li>
<li><p>字符串模板</p>

<p> Kotlin提供了$符来做字符串内的变量替换，并且可以做一些字符串操作。如下：</p>

<pre><code class="`"> var name = "hj"
 var strTemplate = "My name is $name"//My name is hj

 strTemplate = "My name is ${name.replace("j","a")}"// My name is ha
</code></pre></li>
<li><p>一切皆对象</p>

<p> Kotlin中一切皆对象。即使赋值为基本数据类型，也会自动转换为对应的类。</p></li>
<li><p>if条件表达式</p>

<p> Kotlin中支持if条件表达式。</p>

<pre><code class="`">val a = if(x &gt; 0) 1 else 2
fun maxOf(a: Int, b: Int) = if (a &gt; b) a else b
</code></pre></li>
<li><p>循环</p>

<p> Kotlin的while循环和Java没什么不同, 在for循环引入了区间的概念。</p>

<pre><code class="`"> for(i in 1..10){
     println(i)
 }

 for(i in 1..10 step 2){
     println(i)
 }

 for(i in 10 downTo 1 step 1){
     println(i)
 }

 for (i in 1 until 10) {
     // i in [1, 10) 排除了 10
     println(i)
 }

 for(c in 'A'..'Z'){
     println(c)
 }
</code></pre>

<p> 需要注意的是在Kotlin中不再支持Java的for循环形式：</p>

<pre><code class="`"> for(int i =0;i &lt; 10;i++){
     ...
 }
</code></pre></li>
<li><p>when</p>

<p>  Kotlin中没有switch。提供when做分支条件选择。</p>

<pre><code class="``">  when (x) {
     1 -&gt; print("x == 1")
     2 -&gt; print("x == 2")
     3, 4 -&gt; print("x == 3 or x == 4")
     in 10..99999 -&gt; print("x &gt; 10")
     else -&gt; { // 注意这个块
         print("x is neither 1 nor 2")
     }
 }

 when {
     x.isOdd() -&gt; print("x is odd")
     x.isEven() -&gt; print("x is even")
     else -&gt; print("x is funny")
  }
</code></pre>

<p>   when 既可以被当做表达式使用也可以被当做语句使用。如果它被当做表达式， 符合条件的分支的值就是整个表达式的值，如果当做语句使用， 则忽略个别分支的值。</p></li>
<li><p>操作符重载</p>

<p> Kotlin提供了操作符重载的支持。对于常用的”+“、&#8221;-&ldquo;等操作符，创建带有operator且名称符合要求的方法，即可实现。如：</p>

<pre><code class="`"> data class Point(val x: Int, val y: Int)

 operator fun Point.unaryMinus() = Point(-x, -y)

 val point = Point(10, 20)

 fun main() {
     println(-point)  // 输出“Point(x=-10, y=-20)”
 }
</code></pre>

<p> 上面即完成了对-的重载。</p></li>
<li><p>集合</p>

<p>Kotlin把集合分为可变集合和不可变集合。其创建需要通过标准库的方法：listOf()、 mutableListOf()、 setOf()、 mutableSetOf()、hashMapOf()、mutableHashMapOf()</p>

<pre><code>val list = listOf("1","2","3",""4)
val set = setOf("1","2")
val map = hashMapOf("name" to "hj","sex" to "male")
</code></pre>

<p>这些集合类实现了操作符重载，如下：</p>

<pre><code>val list1 = list - listOf("1","2")
val list2 = list + "2"
println(list1[0])

val map = hashMapOf("name" to "hj","sex" to "male")
val map1 = map + ("name2" to "hah") //{"name":"hj","name2":"ha","sex":"male"}
val map2 = map - "name"//{"sex":"male"}
println(map2)
</code></pre>

<p>Map的遍历如下：</p>

<pre><code>for ((k, v) in map) {
    println("$k -&gt; $v")
}
</code></pre>

<p>Kotlin中的集合具有类似Java中的Stream的操作如filter、map、foreach等。</p>

<pre><code>val positives = list.filter { x -&gt; x &gt; 0 }
//val positives = list.filter { it &gt; 0 }
</code></pre></li>
<li><p>Elvis操作符</p>

<p> 三目运算符通常以这种形式出现：</p>

<pre><code class="`"> String displayName = name != null ? name : "Unknown";
</code></pre>

<p> Kotlin中可以简化为：</p>

<pre><code class="`"> val displayName = name ?: "Unknown";
</code></pre></li>
<li><p>可空/非可空引用/函数返回值</p>

<p> Kotlin中区分一个引用可以容纳null和不能容纳null。默认的引用是不可空的。</p>

<pre><code class="`"> var a = "abc"
 a = null // 编译错误    ```
</code></pre>

<p> 需要使用?使其变为可空引用。</p>

<pre><code class="`"> var b : String ? = "abc"
 b = null
</code></pre>

<p> 如此，后续如果你调用a的任何方法都可以，但是调用b的会有编译错误。会强制去检查b是否为空</p>

<pre><code class="`"> val l = if (b != null) b.length else -1
</code></pre>

<p> 也可以使用?做安全调用</p>

<pre><code class="`"> b?.length()
</code></pre>

<p> b不为空才会执行后续的操作。配合let可以执行其他非自身的操作。</p>

<pre><code class="`"> b?.let{
     print("a")
 )
</code></pre>

<p> 同样的，对于函数参数以及返回值，默认也是非空的，只有加了?才允许传控制且要求做空值检测。</p>

<pre><code class="`"> fun parseInt(str: String?): Int? {
     // ……
     if(str == null){
         return null
     }

     ...
     return ..
 }

 val r = parseInt(null)
 r?.let{
     print r
 }
</code></pre></li>
<li><p>try with resources</p>

<pre><code class="`"> val stream = Files.newInputStream(Paths.get("/some/file.txt"))
 stream.buffered().reader().use { reader -&gt;
     println(reader.readText())
 }
</code></pre></li>
<li><p>延迟属性</p>

<p> Kotlin提供了延迟属性的支持，即只有在你第一次开始使用的时候才会真正初始化。默认使用同步锁保证只有一个线程初始化。下面例子改成了不使用同步锁，可以多线程执行。</p>

<pre><code class="`"> val p by lazy(LazyThreadSafetyMode.PUBLICATION) {
     println("computed!")
     "Hello"
 }
 println(p)
</code></pre></li>
<li><p>类</p>

<ul>
<li>无须public修饰符。文件名和类也没有任何关联。</li>
<li><p>创建对象不需要使用new关键字</p>

<pre><code class="``">  val test = Test()
</code></pre></li>
<li><p>对于类属性，默认会有get()和set()两个方法。直接访问属性或者给属性设置值都会调用这两个方法。</p>

<pre><code class="``">  class Test {
      var counter = 0 // 注意：这个初始器直接为幕后字段赋值
      get() {
          println("getter")
          return field
      }
      set(value) {
          println("setter")
          field = value
      }


  }

  val test = Test()
  test.counter = 10
  println(test.counter)
</code></pre></li>
<li><p>主构造函数和次构造函数。Kotlin中一个类可以有一个主构造函数以及一个或多个次构造函数。主构造函数是类头的一部分：它跟在类名（与可选的类型参数）后。主构造函数里的参数如果用val或者var修饰则成为类的属性。如果类有一个主构造函数，每个次构造函数需要委托给主构造函数。主构造函数不能包含任何的代码。初始化的代码可以放到以 init 关键字作为前缀的初始化块（即时没有主构造函数，也会在次构造函数前执行）。</p>

<pre><code class="``">  class Test(val counter: Int, val name: String = "test") {

      init{

      }

      constructor(counter: Int, name: String, sex: String) : this(counter, name) {

      }

  }

  val test = Test(10)
  println(test.counter)
</code></pre></li>
<li><p>Kotlin中引入了解构函数来对对象进行解构。</p>

<pre><code class="``">  class Test(val counter: Int, val name: String = "test") {

      operator fun component1() : Int{
          return counter
      }

      operator fun component2() : String{
          return name
      }

  }

  val (counter,name) = Test(10)
</code></pre>

<p>  如此，也和map一样可以用在集合迭代中。</p>

<pre><code class="``">  val testList = listOf(Test(1),Test(2))
  for((k,v) in testList){
      ...
  }
</code></pre></li>
<li><p>Kotlin中引入了数据类的概念。对于此种类，会默认根据主构造函数的属性生成equals()/hashCode()、toString()、componentN()、copy()这几个函数。</p>

<pre><code class="``">  data class User(val name: String, val age: Int)
</code></pre></li>
<li><p>Kotlin中提供了对象声明来实现单例模式。</p>

<pre><code class="``">  object SingleInstance {
      fun test(input: String) = println(input)
  }

  fun main(args: Array&lt;String&gt;) {
      SingleInstance.test("hj")
  }
</code></pre></li>
<li><p>Kotlin中提供了密封类来表示受限的类继承结构：当一个值为有限集中的类型、而不能有任何其他类型时。可以看做是枚举类的扩展。密封类需要在类名前面添加 sealed 修饰符。其所有子类都必须在与密封类自身相同的文件中声明。</p>

<pre><code class="``">  sealed class DataType
  data class Card(val number: Double) :DataType()
  data class Timeline(val e1: DataType, val e2: DataType) : DataType()
  object Illegal : DataType()
</code></pre></li>
<li><p>Kotlin的类中引入了伴生对象来声明静态方法、属性以及编译期常量（也可以在object中定义）。</p>

<pre><code class="``">  class Test(val counter: Int, val name: String = "test") {

      companion object {
          const val TYPE = 1
              val title = "haha"

              fun testStatic(){
              println("static method")
          }
  }
</code></pre></li>
<li><p>对一个对象调用多个方法。</p>

<pre><code class="``">  class Test(val counter : Int){
      fun test1(){

      }

      fun test2(){

      }
  }


  val test = Test(1)
  with(test){
      test1()
      test2()
  }
</code></pre></li>
</ul>
</li>
</ol>


<p>以上为Kotlin中的基本语法说明，其他诸如委托、lambda函数、协程、与Java互操作等可见<a href="https://www.kotlincn.net/docs/reference/">https://www.kotlincn.net/docs/reference/</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何进行Java项目构建？]]></title>
    <link href="http://www.rowkey.me/blog/2018/08/30/build-java/"/>
    <updated>2018-08-30T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/08/30/build-java</id>
    <content type="html"><![CDATA[<p><strong>最新版本可见:<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter2-project/build.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter2-project/build.md</a></strong></p>

<p>对于一个完整的项目来说，一般都有很多的类、很多的包，如果是Web工程那么还有很多jsp、资源文件。这时候如果只用JDK自带的工具编译和运行，是非常困难的一件事前。再者，编译源代码只是软件开发过程的一个方面，更重要的是要把软件发布到生产环境中来产生商业价值。所以，代码编译之后，还有测试、分析代码质量、部署等步骤要做。整个过程进行自动化操作是很有必要的。</p>

<p>这时候就需要一个Java的工程/项目构建工具。这里所谓的项目构建就是指的完成工程发布流程需要的一系列步骤，包括编译、测试、打包、部署等等。虽然用Eclipse和Intellij这些IDE能解决这个问题，但是受限于这些IDE体积庞大且基本上都是GUI的，而后端应用的运行环境基本都是没有显示器的，所以很多时候还是需要一些专门做项目构建的工具来支持这些工作。</p>

<!--more-->


<ul>
<li><a href="#%E4%B8%80.%20Ant">一. Ant</a>

<ul>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">使用示例</a></li>
<li><a href="#%E6%8F%90%E7%A4%BA">提示</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C.%20Maven">二. Maven</a>

<ul>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a></li>
<li><a href="#%E6%A0%87%E5%87%86Web%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">标准Web项目结构</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86">依赖管理</a></li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B">项目构建流程</a></li>
<li><a href="#Profile%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81">Profile多环境支持</a></li>
<li><a href="#%E5%A4%8D%E7%94%A8test">复用test</a></li>
<li><a href="#Scala%E6%94%AF%E6%8C%81">Scala支持</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6">常用插件</a></li>
<li><a href="#%E6%8F%90%E7%A4%BA">提示</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89.%20Gradle">三. Gradle</a>

<ul>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">使用示例</a></li>
<li><a href="#%E5%A4%9A%E6%A8%A1%E5%9D%97">多模块</a></li>
<li><a href="#%E6%8F%90%E7%A4%BA">提示</a></li>
</ul>
</li>
</ul>


<h2><a name='一. Ant'></a>一. Ant</h2>

<h3><a name='介绍'></a>介绍</h3>

<p>Ant的全称是Another Neat Tool，意为另一个好用的工具，是Java中比较常用的项目构建工具。构建过程包括编译、测试和部署等。概括来看具有以下三个特点：</p>

<ul>
<li>和传统的Make工具相似，能为我们完成工程发布流程中一系列机械工作。并且具有良好的跨平台特性。</li>
<li>使用XML来表述构建过程与依赖关系，用task替代shell，语义清晰，便于维护。</li>
<li>具有强大的任务系统，便于扩展。其中，task以Java class的形式存在。</li>
</ul>


<p>为了方便使用，Ant自带了很多默认的task，如：</p>

<ul>
<li>echo: 输出信息</li>
<li>mkdir: 创建文件夹</li>
<li>exec: 执行shell命令</li>
<li>delete: 删除文件</li>
<li>copy: 复制文件</li>
</ul>


<p>通过组合这些默认task和自己实现的task就能够完成Java项目的构建任务。</p>

<h3><a name='使用示例'></a>使用示例</h3>

<p>使用Ant需要编写build.xml来配置任务流程。当然，可以通过-f参数指定其他配置文件作为任务流程描述文件。一个Ant的配置文件如下：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project name="helloWorld" basedir="." default="usage"&gt;
    &lt;property name="mvn" value="mvn"/&gt;
    &lt;property name="script.lock" value="/build_home/scripts/lock"/&gt;

    &lt;target name="usage" description="Prints out instructions"&gt;
        &lt;echo message="使用 'lock' 加锁"/&gt;
        &lt;echo message="使用 'unlock' 解锁"/&gt;
        &lt;antcall target="compile"&gt;
            &lt;param name="profile" value="test"/&gt;
        &lt;/antcall&gt;
    &lt;/target&gt;

    &lt;target name="lock"&gt;
        &lt;exec dir="${basedir}" executable="${script.lock}" errorproperty="lock.err"/&gt;
        &lt;fail message="u can use 'ant unlcok to force redeploy'...'"&gt;
            &lt;condition&gt;
                &lt;contains string="${lock.err}" substring="locked"/&gt;
            &lt;/condition&gt;
        &lt;/fail&gt;
    &lt;/target&gt;

    &lt;target name="unlock"&gt;
        &lt;delete file="${basedir}/.lock"/&gt;
    &lt;/target&gt;

    &lt;target name="compile"&gt;
        &lt;echo message="编译开始"/&gt;
        &lt;exec dir="${basedir}" executable="${mvn}" failonerror="true"&gt;
            &lt;arg line="compile -P ${profile}"/&gt;
        &lt;/exec&gt;
        &lt;exec executable="${mvn}" failonerror="true"&gt;
            &lt;arg value="war:exploded"/&gt;
        &lt;/exec&gt;
    &lt;/target&gt;

    &lt;!--逻辑判断--&gt;
    &lt;target name="testIf" depends="check" if="flag"&gt;
        &lt;echo message="if..."/&gt;
    &lt;/target&gt;

    &lt;target name="testUnless" depends="check" unless="flag"&gt;
        &lt;echo message="unless..."/&gt;
    &lt;/target&gt;

    &lt;target name="check"&gt;
        &lt;condition property="flag"&gt;
            &lt;or&gt;
              &lt;and&gt;
                 &lt;isset property="name"/&gt;
                 &lt;equals arg1="${version}" arg2="1.0" /&gt;
              &lt;/and&gt;
              &lt;available file="/project.version" type="file"/&gt;
            &lt;/or&gt;
        &lt;/condition&gt;
    &lt;/target&gt;
    &lt;!--逻辑判断end--&gt;

&lt;/project&gt;
</code></pre>

<p>可见，Ant使用顶级元素<project>描述整个工程,使用<property>描述全局属性, 用<target>定义工程中的target以及target间的依赖, 在target中定义task的执行流程。使用antcall来调用target，通过其子节点param传递参数。</p>

<p>此外，在很多场景下需要用到逻辑判断，如if等。Ant中的if如上面的例子所示，是需要搭配target和condition使用的。上面配置中最后的逻辑判断部分，类似如下伪代码：</p>

<pre><code>if (name ！= null &amp;&amp; version.equals("1.0")) || fileExist("/project.version") ){
    echo "if..."
}else{
    echo "unless..."
}
</code></pre>

<p>执行<code>ant [target]</code>即可执行任务流程。</p>

<h3><a name='提示'></a>提示</h3>

<ul>
<li>使用Ant时，一个常见的需求就是通过命令行给Ant传递参数，可以通过<code>-Dname=value</code>这种形式来传递，在build.xml中通过<code>${name}</code>来引用即可。</li>
<li><p>对于配置文件中重复出现的元素，可以通过refid引用，减少重复配置。</p>

<pre><code class="``">  &lt;project&gt;
      &lt;path id="project.class.path"&gt;
          &lt;pathelement location="lib/"/&gt;
          &lt;pathelement location="${java.class.path}/"/&gt;
      &lt;/path&gt;

      &lt;target ...&gt;
          &lt;rmic ...&gt;
              &lt;classpath refid="project.class.path"/&gt;
          &lt;/rmic&gt;
      &lt;/target&gt;

      &lt;target ...&gt;
          &lt;javac ...&gt;
              &lt;classpath refid="project.class.path"/&gt;
          &lt;/javac&gt;
      &lt;/target&gt;
  &lt;/project&gt;
</code></pre></li>
</ul>


<h2><a name='二. Maven'></a>二. Maven</h2>

<h3><a name='介绍'></a>介绍</h3>

<p>Maven是继Ant后出现的一款基于约定优于配置原则的项目构建工具。这里所说的“约定优于配置”指的是约定的一些规范无需再配置，例如：其约定好的生命周期、项目结构等。当然，Maven也提供了打破默认约定的配置办法。</p>

<p>概括来讲，Maven具有以下的功能：</p>

<ul>
<li>依赖管理：Maven能够帮助我们解决软件包依赖的管理问题，不再需要提交大量的jar包，引入第三方lib也不需要关心其依赖。</li>
<li>规范目录结构：标准的目录结构有助于项目构建的标准化，使得项目更整洁，还可通过配置profile根据环境的不同读取不同的配置文件。</li>
<li>可以通过每次发布都更新版本号以及统一依赖配置文件来规范软件包的发布。</li>
<li>完整的项目构建阶段：Maven能够对项目完整阶段进行构建。</li>
<li>支持多种插件：面向不同类型的工程项目提供不同的插件。</li>
<li>方便集成：能够集成在IDE中方便使用，和其他自动化构建工具也都能配合使用。</li>
</ul>


<p>可见，相比起Ant，Maven提供了更加强大和规范的功能。</p>

<h3><a name='配置文件'></a>配置文件</h3>

<p>Maven基于pom（Project Object Model）进行。一个项目所有的配置都放置在pom.xml文件中，包括定义项目的类型、名字，管理依赖关系，定制插件的行为等等。</p>

<pre><code>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;me.rowkey&lt;/groupId&gt;
    &lt;artifactId&gt;test&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;

    &lt;name&gt;rowkey&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;nexus-suishen&lt;/id&gt;
            &lt;name&gt;Nexus suishen&lt;/name&gt;
            &lt;url&gt;http://maven.etouch.cn/nexus/content/groups/public/&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
                &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
                &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;

    &lt;properties&gt;
        &lt;slf4j.version&gt;1.7.21&lt;/slf4j.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;${slf4j.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.8.2&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.3.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.7&lt;/source&gt;
                    &lt;target&gt;1.7&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;!--发布配置，用户名和密码需要在$M2_HOME/conf/settings.xml中配置server--&gt;
    &lt;distributionManagement&gt;
        &lt;repository&gt;
            &lt;id&gt;suishen-release&lt;/id&gt;
            &lt;name&gt;Suishen-Releases&lt;/name&gt;
            &lt;url&gt;http://maven.etouch.cn/nexus/content/repositories/Suishen-Releases&lt;/url&gt;
        &lt;/repository&gt;

        &lt;snapshotRepository&gt;
            &lt;id&gt;suishen-snapshot&lt;/id&gt;
            &lt;name&gt;Suishen-Snapshots&lt;/name&gt;
            &lt;url&gt;http://maven.etouch.cn/nexus/content/repositories/Suishen-Snapshots&lt;/url&gt;
        &lt;/snapshotRepository&gt;
    &lt;/distributionManagement&gt;

&lt;/project&gt;
</code></pre>

<p>其中，</p>

<ul>
<li>Maven使用groupId:artifactId:version三者来唯一标识一个唯一的二进制版本，可以缩写为GAV。</li>
<li>packaging代表打包方式，可选的值有: pom, jar, war, ear, custom，默认为jar。</li>
<li>properties是全局属性的配置</li>
<li>dependencies是对于依赖的管理</li>
<li>plugins是对于插件的管理。</li>
</ul>


<p>此外，可以通过parent实现pom的继承做统一配置管理，子pom中的配置优先级高于父pom。</p>

<pre><code>&lt;?xml version=”1.0″ encoding=”UTF-8″?&gt;

&lt;project&gt;

…

&lt;parent&gt;

    &lt;artifactId&gt;suishen-parent&lt;/artifactId&gt;

    &lt;groupId&gt;suishen&lt;/groupId&gt;

    &lt;version&gt;1.0&lt;/version&gt;

&lt;/parent&gt;

…

&lt;/project&gt;
</code></pre>

<p>可以继承的元素如下：</p>

<ul>
<li>groupId,version</li>
<li>Project Config</li>
<li>Dependencies</li>
<li>Plugin configuration</li>
</ul>


<p>此外，<dependencyManagement>和<pluginManagement>可以统一做依赖和插件的配置管理，不同于<dependencies>和<plugins>的是，如果子pom中没有声明<dependency>和<plugin>则并不生效。</p>

<h3><a name='标准Web项目结构'></a>标准Web项目结构</h3>

<p>在Maven中，一个Web项目的标准结构，如下图所示：</p>

<p><img src="//post_images/buildjava/mvn-web-arch.png" alt="" /></p>

<p>其中：</p>

<ul>
<li>src/main/java         Java代码目录</li>
<li>src/main/resources    配置文件目录</li>
<li>src/main/webapp       webapp根目录</li>
<li>src/test/java         测试代码目录</li>
<li>src/test/resources    测试配置目录</li>
<li>target/classes        代码编译结果目标目录</li>
<li>target/test-classes   测试代码编译结果目标目录</li>
</ul>


<p>当然，结构是可以自定义的。</p>

<pre><code> &lt;build&gt;
   &lt;plugins&gt;
       &lt;plugin&gt;
           &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
           &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
           &lt;configuration&gt;
               &lt;warSourceDirectory&gt;WebContent/&lt;/warSourceDirectory&gt;
           &lt;/configuration&gt;
       &lt;/plugin&gt;
   &lt;/plugins&gt;
   &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
   &lt;testSourceDirectory&gt;test/java&lt;/testSourceDirectory&gt;
   &lt;testResources&gt;
       &lt;testResource&gt;
           &lt;directory&gt;test/resources&lt;/directory&gt;
       &lt;/testResource&gt;
   &lt;/testResources&gt;
   &lt;directory&gt;build&lt;/directory&gt;
&lt;/build&gt;
</code></pre>

<p>这里，Java代码目录移到了./src中，测试代码目录到了./test/java中，测试资源也到了./test/resources,同时编译结果目录变为了./build。此外，在maven-war-plugin中，也把Web目录的war源码目录改为了./WebContent。</p>

<h3><a name='依赖管理'></a>依赖管理</h3>

<p>依赖管理是通过<dependencies>来定义的，其中：</p>

<ul>
<li>一项jar包依赖可以由groupId:artifactId:version标识</li>
<li>完整的标识为：groupId:artifactId:type:classifier:version</li>
<li>依赖在编译部署中参与的情况可以由scope来指定, 分为: compile、test、provided、system、import，默认为compile。其中的import是在Maven 2.0.9后引入的，仅仅支持在<dependencyManagement>中使用，导入外部的依赖版本管理。</li>
<li>依赖是一个树状结构，采用<strong>最近依赖</strong>原则，也可以通过exclusions标签来排除一些包。这里的最近依赖指的是在依赖树中，离当前结点最近的依赖优先级高，同样远时第一个优先。</li>
</ul>


<p>依赖下载的过程一般如下图所示：</p>

<p><img src="//post_images/buildjava/mvn-dependency-download.png" alt="" /></p>

<p>但上面的示例配置中，如果有一个repsitory的配置，那么依赖下载的过程则发生了改变。</p>

<p><img src="//post_images/buildjava/mvn-dependency-download-1.png" alt="" /></p>

<p>此外，Maven中还有一个镜像库的配置，即在Maven的settings.xml中配置Maven镜像库。和pom.xml中的repository不同的是镜像会拦截住对远程中央库的请求，只在镜像库中进行依赖的搜索以及下载。而如果只是配置了repository，那么在repository中找不到相应的依赖时，会继续去远程中央库进行搜索和下载。</p>

<p>上面所说的镜像库和repository可以通过<a href="http://www.sonatype.org/nexus/">http://www.sonatype.org/nexus/</a>进行搭建。</p>

<h3><a name='项目构建流程'></a>项目构建流程</h3>

<p>Maven的构建生命周期中几个常见phase如下：</p>

<ul>
<li>validate：验证项目以及相关信息是否正确</li>
<li>compile：编译源代码和相关资源文件</li>
<li>test：对测试代码进行测试</li>
<li>package：根据项目类型的不同进行打包</li>
<li>verify： 验证打包的正确性</li>
<li>install：将打好的包安装到本地</li>
<li>deploy：将打好的包发布到远程库中</li>
</ul>


<p>当然，对应上述每一个phase,还有pre、post、proces做前缀的一些phase。还有一些在命令行中不常用的phase如：test-compile、integration-test等。</p>

<p>针对于Java Web项目，一个完整的项目构建流程如下图所示：</p>

<p><img src="//post_images/buildjava/mvn-process.png" alt="" /></p>

<h3><a name='Profile多环境支持'></a>Profile多环境支持</h3>

<p>现实开发中一个很常见的需求就是需要根据不同的环境打包不同的文件或者读取不同的属性值。Maven中的profile即可解决此问题。</p>

<pre><code>&lt;profiles&gt;
   &lt;profile&gt;
       &lt;id&gt;dev&lt;/id&gt;
       &lt;activation&gt;
           &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
       &lt;/activation&gt;
       &lt;properties&gt;
           &lt;resources.dir&gt;src/main/resources/dev&lt;/resources.dir&gt;
       &lt;/properties&gt;
   &lt;/profile&gt;
   &lt;profile&gt;
       &lt;id&gt;test&lt;/id&gt;
       &lt;properties&gt;
           &lt;resources.dir&gt;src/main/resources/test&lt;/resources.dir&gt;
       &lt;/properties&gt;
   &lt;/profile&gt;
   &lt;profile&gt;
       &lt;id&gt;prod&lt;/id&gt;
       &lt;properties&gt;
           &lt;resources.dir&gt;src/main/resources/prod&lt;/resources.dir&gt;
       &lt;/properties&gt;
   &lt;/profile&gt;

&lt;/profiles&gt;

&lt;build&gt;
    &lt;filters&gt;  
        &lt;filter&gt;${user.home}/love.properties&lt;/filter&gt;  
    &lt;/filters&gt;  
   &lt;resources&gt;
       &lt;resource&gt;
           &lt;directory&gt;${resources.dir}&lt;/directory&gt;
           &lt;filtering&gt;true&lt;/filtering&gt;  
           &lt;includes&gt;  
               &lt;include&gt;**/*&lt;/include&gt; 
           &lt;/includes&gt; 
        &lt;/resource&gt;
       &lt;resource&gt;
           &lt;directory&gt;src/main/resources&lt;/directory&gt;
           &lt;filtering&gt;true&lt;/filtering&gt;  
           &lt;includes&gt;  
               &lt;include&gt;**/*&lt;/include&gt; 
           &lt;/includes&gt; 
       &lt;/resource&gt;
   &lt;/resources&gt;
&lt;/build&gt;
</code></pre>

<p>如此，分为dev、test以及prod三种环境，对应每一种环境，其资源文件路径都不一样。在使用mvn时，使用-P参数指定profile即可生效。</p>

<p>此外，示例中resource下的filtering设置为true, 是为了能够在编译过程中将资源文件中的占位符替换为Maven中相应属性对应的值。例如，在resources下的config.properties文件内容：</p>

<pre><code>resouceDir=${resources.dir}
</code></pre>

<p>在profile为dev时，编译结束此文件会变为:</p>

<pre><code>resouceDir=src/main/resources/dev
</code></pre>

<p>而示例中的filters配置则是将外部文件的属性引入进来，同样也能够使用占位符。</p>

<p>如果是Web项目，想要在webapp下使用占位符，那么则需要配置maven-war-plugin:</p>

<pre><code>&lt;plugin&gt;  
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  
    &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;  
    &lt;configuration&gt;  
        &lt;webResources&gt;  
            &lt;resource&gt;  
                &lt;filtering&gt;true&lt;/filtering&gt;  
                &lt;directory&gt;src/main/webapp&lt;/directory&gt;  
                &lt;includes&gt;  
                    &lt;include&gt;**/*&lt;/include&gt;  
                &lt;/includes&gt;  
            &lt;/resource&gt;  
        &lt;/webResources&gt;  
        &lt;warSourceDirectory&gt;src/main/webapp&lt;/warSourceDirectory&gt;  
        &lt;webXml&gt;src/main/webapp/WEB-INF/web.xml&lt;/webXml&gt;  
    &lt;/configuration&gt;  
&lt;/plugin&gt;  
</code></pre>

<h3><a name='复用test'></a>复用test</h3>

<p>当需要将写的测试用例（src/test下的资源和类）以jar包形式发布出去的时候，需要用到test-jar。首先，在打包时配置maven-jar-plugin，如下：</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
         &lt;execution&gt;
            &lt;goals&gt;
                &lt;goal&gt;test-jar&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;excludes&gt;
                    &lt;exclude&gt;*.conf&lt;/exclude&gt;
                    &lt;exclude&gt;**/*.*.conf&lt;/exclude&gt;
                    &lt;exclude&gt;logback.xml&lt;/exclude&gt;
                &lt;/excludes&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;configuration&gt;
        &lt;excludes&gt;
            &lt;exclude&gt;*.conf&lt;/exclude&gt;
            &lt;exclude&gt;**/*.*.conf&lt;/exclude&gt;
            &lt;exclude&gt;*.properties&lt;/exclude&gt;
            &lt;exclude&gt;logback.xml&lt;/exclude&gt;
        &lt;/excludes&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>使用时，指定dependency的type为test-jar：</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;xx&lt;/groupId&gt;
    &lt;artifactId&gt;xx&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;type&gt;test-jar&lt;/type&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>

<h3><a name='Scala支持'></a>Scala支持</h3>

<p>Scala的官方构建工具是sbt，但是由于某些原因，在国内访问很慢。Maven有插件提供了对Scala项目的支持。</p>

<pre><code>&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;
            &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.1.6&lt;/version&gt;
            &lt;executions&gt;
               &lt;execution&gt;
                   &lt;id&gt;scala-compile-first&lt;/id&gt;
                   &lt;phase&gt;process-resources&lt;/phase&gt;
                   &lt;goals&gt;
                       &lt;goal&gt;add-source&lt;/goal&gt;
                       &lt;goal&gt;compile&lt;/goal&gt;
                   &lt;/goals&gt;
               &lt;/execution&gt;
               &lt;execution&gt;
                   &lt;id&gt;scala-test-compile&lt;/id&gt;
                   &lt;phase&gt;process-test-resources&lt;/phase&gt;
                   &lt;goals&gt;
                       &lt;goal&gt;testCompile&lt;/goal&gt;
                   &lt;/goals&gt;
               &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
           &lt;groupId&gt;org.scalatest&lt;/groupId&gt;
           &lt;artifactId&gt;scalatest-maven-plugin&lt;/artifactId&gt;
           &lt;version&gt;1.0-RC2&lt;/version&gt;
           &lt;configuration&gt;
               &lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;
               &lt;junitxml&gt;.&lt;/junitxml&gt;
               &lt;filereports&gt;TestSuite.txt&lt;/filereports&gt;
               &lt;stdout&gt;testOutput&lt;/stdout&gt;
           &lt;/configuration&gt;
           &lt;executions&gt;
               &lt;execution&gt;
                   &lt;id&gt;test&lt;/id&gt;
                   &lt;goals&gt;
                       &lt;goal&gt;test&lt;/goal&gt;
                   &lt;/goals&gt;
               &lt;/execution&gt;
           &lt;/executions&gt;
        &lt;/plugin&gt;
       &lt;plugin&gt;
           &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
           &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
           &lt;version&gt;1.2.1&lt;/version&gt;
           &lt;configuration&gt;
               &lt;executable&gt;scala&lt;/executable&gt;
               &lt;arguments&gt;
                   &lt;argument&gt;-classpath&lt;/argument&gt;
                   &lt;classpath/&gt;
                   &lt;argument&gt;&lt;/argument&gt;
               &lt;/arguments&gt;
           &lt;/configuration&gt;
       &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p>net.alchim31.maven.scala-maven-plugin提供了对Scala代码的编译；org.scalatest.scalatest-maven-plugin提供了对Scala项目的测试；exec-maven-plugin配置了对Scala程序的执行。</p>

<h3><a name='常用插件'></a>常用插件</h3>

<p>Maven提供了很多插件方便开发工作。</p>

<ul>
<li><p>maven-source-plugin</p>

<p>  源码发布插件，绑定在compile阶段，执行jar goal, 将源码以jar包的形式发布出去。</p></li>
<li><p>maven-javadoc-plugin</p>

<p>  javadoc插件，将源码的javadoc发布出去。</p></li>
<li><p>maven-archetype-plugin</p>

<p>  使用此插件可以定制/使用项目模板。定制模板可以遵循archetype的结构编写文件，也可以使用mvn archetype:create-from-project从一个现有的项目生成；使用模板通过archetype:generate即可。</p></li>
<li><p>maven-tomcat7-plugin</p>

<p>  此插件可以直接使用Tomcat运行web项目，常用的命令是：<code>mvn tomcat7:run</code>。同样的还有jetty-maven-plugin。</p></li>
<li><p>maven-shade-plugin</p>

<p>  此插件是maven常用打包插件，一般是将其绑定在package阶段，执行其shade goal。能够将源码和依赖的第三方资源打包在一起以供独立运行。</p></li>
<li><p>maven-assesmbly-plugin</p>

<p>  和maven-shade-plugin一样也是打包插件，但是其功能更加强大，输出压缩包格式除了jar还支持tar、zip、gz等。</p></li>
<li><p>maven-gpg-plugin</p>

<p>  此插件是jar包的签名插件，可以对自己发布的jar包进行签名。</p></li>
</ul>


<h3><a name='提示'></a>提示</h3>

<ul>
<li>在项目版本号中加入<code>SNAPSHOT</code>后缀做为快照版本可以使得Maven每次都能自动获取最新版本而无需频繁更新版本号。</li>
<li><code>mvn -DNAME=test</code>可以传递给pom参数，使用${NAME}引用即可。</li>
<li><p>在dependency中设置optional为true, 可使得此依赖不传递出去。如下：</p>

<pre><code class="``">  ...
  &lt;artifactId&gt;suishen-libs&lt;/artifactId&gt;
  ...

  ...
  &lt;dependency&gt;
     &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
     &lt;artifactId&gt;httpasyncclient&lt;/artifactId&gt;
     &lt;version&gt;4.1.3&lt;/version&gt;
     &lt;optional&gt;true&lt;/optional&gt;
  &lt;/dependency&gt;
  ...
</code></pre>

<p>  如此，依赖于suishen-lib的项目除非在自己的pom里显示声明，否则不会依赖于httpasyncclient。</p></li>
<li><p>由于Maven自定义plugin的复杂度，不够灵活，因此很多时候都是结合Ant的灵活性和Maven一起使用的。</p>

<pre><code class="``">  &lt;target name="compile" depends="clean"&gt;
    &lt;exec executable=“mvn"&gt;
            &lt;arg line="compile"/&gt;
    &lt;/exec&gt;
  &lt;/target&gt;

  &lt;target name="compile" depends="clean"&gt;
    &lt;exec executable=“cmd"&gt;
            &lt;arg line=“/c mvn compile"/&gt;
    &lt;/exec&gt;
  &lt;/target&gt;
</code></pre></li>
<li><p>日常开发中一个工程可能比较庞大，这时可以把这个工程拆分成多个子模块来管理。一个多模块工程包含一个父pom，在其中定义了它的子模块，每个子模块都是一个独立的工程。</p>

<pre><code class="``">  &lt;project&gt;
      …
      &lt;packaging&gt;pom&lt;/packaging&gt;

      &lt;modules&gt;
          &lt;module&gt;module-1&lt;/module&gt;
          &lt;module&gt;module-2&lt;/module&gt;
      &lt;/modules&gt;
  &lt;/project&gt;
</code></pre></li>
<li>可以使用第三方的takari/maven-wrapper(<code>mvn -N io.takari:maven:wrapper -Dmaven=3.3.3</code>)来做Maven操作（<code>./mvnw clean</code>），从而可以达到类似gradle wrapper的功能：不用预先安装好Maven，还能够统一项目所使用的Maven版本。</li>
</ul>


<h2><a name='三. Gradle'></a>三. Gradle</h2>

<h3><a name='介绍'></a>介绍</h3>

<p>Gradle是目前正在开始流行的新一代构建工具，正在逐步的被大家推广使用，尤其以Android为典型。基本上现在所有的Android项目都采用Gradle做为项目构建工具。概括来讲，有以下几个特点：</p>

<ul>
<li>采用了Groovy DSL来定义配置，相比起XML更加易于学习和使用，并大大简化了构建代码的行数。此外，这种“配置即代码”的方式能够大大简化配置学习和插件编写的成本，提供了更好的灵活性。</li>
<li>在构建模型上非常灵活。可以轻松创建一个task，并随时通过depends语法建立与已有task的依赖关系。这里Gradle使用了Java插件来支持Java项目的标准构建生命周期（和Maven类似）。</li>
<li>依赖的scope简化为compile、runtime、testCompile、testRuntime四种。</li>
<li>支持动态的版本依赖。在版本号后面使用+号的方式可以实现动态的版本管理。</li>
<li>支持排除传递性依赖或者干脆关闭传递性依赖。</li>
<li>完全支持Maven、Ivy的资源库（Repository）。</li>
</ul>


<h3><a name='使用示例'></a>使用示例</h3>

<p>Gradle的配置写在build.gradle文件中。</p>

<pre><code>apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'checkstyle'

// --- properties ---
ext.ideaInstallationPath = '/Applications/IntelliJ IDEA.app/Contents'
ext.pomCfg = {
  name 'me.rowkey.libs'
  description '&lt;project_desc&gt;'
  ...
}
sourceCompatibility = 1.6
// --- properties ---

//源码目录结构
sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'

//增加repository
repositories {
    mavenLocal()
    maven{
        url "http://maven.etouch.cn/nexus/content/groups/public/"
    }
    mavenCentral()
}

//依赖管理
dependencies {
    compile fileTree(dir: ideaInstallationPath + '/lib', include: '*.jar')
    testCompile 'org.mockito:mockito-core:2.0.3-beta'
    testCompile 'org.assertj:assertj-core:1.7.1'
    testCompile 'org.springframework:spring-test:4.0.0.RELEASE'

    // 排除全部或特定的间接依赖
    runtime ('commons-dbcp:commons-dbcp:1.4') {
        transitive = false
        // 或 exclude group: xxx, module: xxx
    }

    // 然后显式声明
    runtime 'commons-pool:commons-pool:1.6'
}

//for gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

task helloWorld

helloWorld &lt;&lt; {
    println "Hello World!"
}

task testA(dependsOn:helloWorld)

testA &lt;&lt; {
    println "test"
}
task copyFile(type: Copy)
//task(copyFile(type: Copy))

copyFile {
    from 'xml'
    into 'destination'
}

//发布到Maven库的配置
uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: &lt;repo_url&gt;) {
       //身份认证信息推荐放在$HOME/.gradle/gradle.properties中
        authentication(
          userName: &lt;repo_user&gt;,
          password: &lt;repo_passwd&gt;)
      }
      pom.project pomCfg
    }
  }
}
</code></pre>

<p>可见，依赖的配置（dependencies）相比Maven,得到了大大的简化，对于任务的定义（task）也非常简单。</p>

<h3><a name='多模块'></a>多模块</h3>

<ul>
<li><p>首先，在工程的根目录下，创建settings.gradle。</p>

<pre><code class="``">  include "common", "api"
</code></pre>

<p>  以上即表示包含根目录下的两个子模块common和api。</p></li>
<li><p>在根目录的build.gradle中定义公共构建逻辑：</p>

<pre><code class="``">  subprojects {
      apply plugin: 'java'

      repositories {
          mavenCentral()
      }

      // 所有的子模块共同的依赖
      dependencies {
          ...
      }
  }
</code></pre>

<p>  subprojects中定义的内容对所有子模块都有效，包括属性、依赖以及Task定义。</p>

<p>  需要注意的是在多模块配置下，gradle命令会对所有子模块都执行。如果想要针对单个模块，需要指定模块前缀，如: gradle :common:clean</p></li>
<li><p>在子模块下创建build.gradle，其中的配置可以增量覆盖父工程中的公共配置。如:</p>

<pre><code class="``">  ...

  dependencies {
      compile project(':common')
      ...
  }
</code></pre>

<p>  以上声明了此模块依赖于common模块，当构建此模块时会首先编译打包common模块。相比起Maven每次都要install所依赖的模块，大大简化了使用。</p></li>
</ul>


<h3><a name='提示'></a>提示</h3>

<ul>
<li>gradle -Penv=test可以传递参数，使用env引用即可。这里需要注意的是Gradle中默认并没有提供Maven的profile支持，但是可以利用-P参数自己实现此功能。</li>
<li>Gradle中的配置中的语法和平常所见的Groovy非常不同, 其利用了Groovy的AST转换等特性实现了自己的一套语法。</li>
<li>建议使用<strong>gradle wrapper</strong>（gradle wrapper &ndash;gradle-version 3.0）来做gradle操作（./gradlew clean）。一方面可以使得项目成员不用预先安装好Gradle，还能够统一项目所使用的Gradle版本。</li>
<li>务必要保持构建脚本简洁、清晰，如：把属性、常量（如版本号）放到gradle.properties中。</li>
<li>模块化构建脚本，通过plugin机制在多个项目中重用，共享相关的配置：apply from: <link_to_gradle>。通过此种方式可以统一团队或者公司的一些构建规范、依赖版本等。</li>
</ul>


<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java后端技术概览]]></title>
    <link href="http://www.rowkey.me/blog/2018/05/12/java-tech-overview/"/>
    <updated>2018-05-12T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/05/12/java-tech-overview</id>
    <content type="html"><![CDATA[<p>一个合格的Java后端工程师需要掌握哪些技能呢？扫描下面的二维码可以看到<a href="https://raw.githubusercontent.com/superhj1987/pragmatic-java-engineer/master/book/server-tech/media/java-skill-tree.png">Java后端技术概览图</a>。</p>

<p><img src="https://raw.githubusercontent.com/superhj1987/pragmatic-java-engineer/master/book/chapter1-servertech/media/tech-tree.png" alt="" /></p>

<!--more-->


<h2>软件开发的核心原则</h2>

<p>此处所说的是软件开发应该遵循的一些核心原则：</p>

<ul>
<li>Don&rsquo;t Repeat Yourself: 这是软件开发的一个基础原则，即不要做重复性劳动。也是现在所说的“极客文化”的一种。代码重复、工作重复在软件开发中都是不合理的存在。利用各种手段消除这些重复是软件开发的一个核心工作准则。</li>
<li>Keep it simple stupid：即KISS原则。在做软件设计的工作中，很多时候都不要想得过于复杂，也不要过度设计和过早优化，用最简单且行之有效的方案也就避免了复杂方案带来的各种额外成本。既有利于后续的维护，也利于进一步的扩展。</li>
<li>You Ain’t Gonna Need It: 即YAGNI原则。只需要将应用程序必需的功能包含进来，而不要试图添加任何其他你认为可能需要的功能。因为在一个软件中，往往80%的请求都花费在20%的功能上。</li>
<li>Done is better than perfect: 在面对一个开发任务时，最佳的一个思路就是先把东西做出来，再去迭代优化。如果一开始就面面俱到，考虑到各种细节，那么很容易陷入牛角尖而延误项目进度。</li>
<li>Choose the most suitable things: 这是在做方案选择、技术选型时候的一个很重要的原则。在面对许多技术方案、开源实现的时候，务必做到的是不能盲目求新，要选择最合适的而非被吹得天花乱坠的。</li>
</ul>


<h2>软件过程</h2>

<p>一个软件的生命周期中，除了开发还有很多其他步骤，也都是需要掌握的一些技术。</p>

<ul>
<li>项目管理：项目管理对于一个软件的开发是非常重要的，能够保证项目进度有条不紊地进行，在可控的时间内以一定的质量交付。瀑布开发模型、螺旋开发模型是传统的项目管理模型。在互联网的开发工作中，敏捷开发则是比较受推崇的开发方式。所谓敏捷开发即快速实现原型，然后快速迭代。Scrum是目前普遍流行的敏捷开发方式之一。</li>
<li>测试驱动开发：在平时的开发过程中，目前比较流行也是行之有效的一种方式就是Test Driven Develop，即测试驱动开发。此种方式的核心就是编写单元测试。简单来讲，就是先完成某一个功能的单元测试用例，然后在逐步消除测试用例的编译错误的过程中完成功能的开发。</li>
<li>持续集成：某一个软件功能完成开发之后，后续还有测试、预发布、部署等过程。整个过程称之为集成，而持续集成指的是无需人工干预可以不断地进行这个过程。Jenkins、Quick Build以及后起之秀Travis CI都是比较典型的持续集成工具。 此外，持续集成的子过程持续部署指的是将集成结果部署到不同的环境供用户使用，并且立即反馈部署结果，Rundeck是这方面用的比较多的软件。它提供了Web界面和命令行来执行shell命令和job工作流，能够自定义job步骤设置shell命令/job运行周期，可以在任意数量的服务器上批量执行不同的任务，降低对自动化的部署、执行、维护的工作难度。</li>
</ul>


<h2>日常开发</h2>

<p>日常开发指的是一些日常需要掌握的技能、工具等。</p>

<ul>
<li>编辑器：开发中现在用的比较多的编辑器包括Emacs、Vim和SublimeText。笔者用的最多的就是SublimeText，基本能够满足自己的开发需求，包括编写脚本代码、查看代码文件等。Vim和Emacs这两款编辑器相对SublimeText来说需要记住很多命令，有一定的上手门槛。</li>
<li>源码版本管理：代码的版本管理工具由CVS到SVN再到现在的Git，已经在事实上形成了以分布式版本管理为主的版本管理方案。基于Git，可以采用Git Flow做为源码管理模型。</li>
<li>项目工具：Github是一个第三方Git中央仓库，目前是世界最大的开源代码库，也能够做为私人的代码管理软件；Facebook开源的Phabrictor提供了非常强大的任务管理、Bug管理、测试、代码管理等，但其上手门槛相对较高；禅道是国人开发的一款项目管理工具，但是其免费版功能有限；以Tower.im为代表的第三方项目管理服务也是一个可选择的方案，风险在于数据都不再是私有的。</li>
</ul>


<h2>运行环境</h2>

<p>后端应用开发完成之后是需要部署到服务器上对外提供服务的。从最开始的直接在物理机上部署服务到后来的虚拟环境、云环境再到现在火热的容器，直至最近兴起的无服务器技术。都是为了让服务的运行环境能够更加便于建立、更容易维护、更容易扩展。</p>

<ul>
<li>Linux: 说到后端服务器肯定绕不过Linux。至少现在互联网的后端服务绝大多数都是部署在Linux的各种服务器版本中的。其中CentOS、Ubuntu以及Debian是用的比较多的版本。对于Linux，需要熟练掌握的就是很多常用Shell命令如ps、netstat、lsof、ss、df、dh等等。此外，很多性能分析命令如top、vmstat、iostat、sar等也需要熟练使用。</li>
<li>应用服务器：就Java来讲，很多时候开发的都是Web应用，以HTTP协议对外提供服务。除了对性能要求比较苛刻的情况下会自己构建HTTP服务之外，大部分情况是需要依赖于支持Java程序的应用服务器的。目前最为常用的有：Tomcat、Jetty。严格来讲，这两者只是Servlet容器，真正的JavaEE应用服务器如Jboss、Weblogic在互联网领域很少使用。当然，这些软件并没有提供URL重写、请求委托等Web服务器功能，还不足以担当完整Web服务器的角色。Nginx则是目前最为流行的Web服务器。</li>
<li>负载均衡：在高并发流量环境下，后端服务会以集群的模式对外提供服务。在集群的前面，需要负载均衡器将请求分配到集群的各个结点上。LVS是最为流行的四层负载均衡软件,HAProxy是另一个即支持四层又支持七层负载均衡的软件，Nginx则是七层负载均衡最为流行的解决方案。当然，性能最为好的负载均衡方案是以F5为代表的硬件负载均衡，但由于其昂贵的成本因此在互联网团队中很少使用。此外，这里需要补充的是为了保证同等角色的服务的高可用，如LVS经常作为流量的入口，因此会部署多个LVS结点互为主备防止一个挂掉的时候造成服务不可用。而实现互为主备的技术目前用的最多的就是Keepalived。</li>
<li>虚拟化：虚拟化技术是前几年经常用来做私有云的一种技术。即将自己的物理主机通过虚拟化技术分裂为多个虚拟主机，能够隔离资源。其中，VPS（虚拟专用服务器）的代表技术包括：微软的Virtual Server、VMware的ESX Server、SWsoft的Virtuozzo。此外，OpenStack提供的构建私有IIAS的功能、Cloud Foundry提供的构建私有平台运行环境以及Docker、Kunernetes带来的容器服务都是虚拟化技术的一种。</li>
</ul>


<h2>第三方服务</h2>

<p>虽然从根本上讲所有的软件服务都是可以自己开发的或者部署到自己服务器上的。但是受限于成本、周期或者其他客观因素，很多服务还是需要使用第三方的。</p>

<ul>
<li>IAAS：Infrastructure As A Service, 是云计算最开始的一种模式，现在基本上所有的云服务商都有IAAS的服务。其中，全球最强大的云服务提供商是亚马逊的AWS，国内的则当属阿里云。就目前来看，即使是强如AWS也会出现一些运维故障，因此国内的这些云计算提供商很多时候的服务健壮性、运维响应更是经常被人吐糟。就笔者自己的经历来看。2010年左右，盛大云的云服务其实做的还不错，但后来由于种种原因现在基本已经没啥份额了。国内除了阿里云，UCloud算是专注做云计算的一个比较靠谱的公司了。此外，还有一个青云，做的东西略显高大上，也是一个不错的选择。当然，现在这些云服务商早就不仅仅是IAAS了，也做了很多PAAS的服务。</li>
<li>PAAS：Platform As A Service，即只需要提交代码到指定的运行环境，其他的诸如代码打包、部署、IP绑定都由平台完成。除了可以使用Cloud Foundry构建自己的PAAS平台以外，现在最为流行的第三方PAAS服务有：新浪的SAE、百度的BAE以及Google的GAE。</li>
<li>域名：有个可以提供服务的应用后，那么域名也是一个必须的基础设施。一个好的域名不仅仅代表企业的形象，也能够更加方便用户的记忆与传播。目前购买域名可以通过国外的name.com、godaddy以及国内的万网等。有了域名之后下一步就得进行备案，域名提供商一般都提供了配套服务或者去找一些代理也可以办下来。此外，对于域名的解析，域名提供商一般会内置解析功能，也可以使用独立的DNS服务，如dnspod。</li>
<li>CDN: 内容分发网络，即就近请求的一种技术实现。服务提供方将会被大量访问的内容在全国的多个结点都做缓存，这样当用户访问时就能够就近选择，从而减少网络传输延时，提高访问速度。国内目前七牛和又拍都提供了不错的CDN服务，当然像阿里云、UCloud这种综合云服务商也都有CDN服务。</li>
<li>邮件发送：这个主要需要依赖邮件服务器，然后通过SMTP协议就可以实现发送。可以选择自己搭建，也可以选择诸如腾讯邮箱、网易邮箱等。</li>
<li>短信发送：使用短信发送验证码、营销短信是很常见的应用场景。由于短信是需要运营商支持的，所以这一块基本上都是需要依赖第三方代理的。市面上也有很多短信网关代理。</li>
<li>消息推送：在移动应用上，推送已经成为一个标配功能。目前个推应该是第三方推送服务中的佼佼者，而且由于其客户很多，在联盟唤醒上有很大的优势。</li>
<li>开放平台：通过开放平台，可以使用OAuth等协议获取用户在第三方平台上的信息实现第三方平台登录等。目前，微博、微信、QQ是最常见的第三方登录方式，基本上都是使用OAuth协议为第三方开发者提供服务的。</li>
<li>支付接口：支付接口是很多内置购买功能软件的必备组件。目前，接入最多的无非是支付宝和微信，都提供了开放平台供商家接入。当然，也有直接绑定银行卡支付的，此时需要走的就是银行或者银联的网关接口。</li>
</ul>


<h2>计算机基础科学知识</h2>

<p>对于像数据结构、算法、计算机网络、操作系统、计算机组成原理这些计算机科学基础知识，不管是后端还是其他领域都是必须的技能，也是所有软件开发的基础。扎实的计算机科学基础才能让你在学习、使用某种技术开发软件、调试软件、排查问题时能够心里有底、有据可循。</p>

<ul>
<li>数据结构：数据结构是组成程序的基础。经典的数据结构包括：字符串、数组、链表、哈希表、树（二叉树、平衡树、红黑树、B树）、堆栈、队列、图。</li>
<li>算法: 经典的排序和查找算法在平时的开发工作中经常会用到，如：冒泡排序、插入排序、选择排序、归并排序、快速排序、希尔排序、堆排序以及二分查找等。此外，在函数/方法的算法实现中要注意递归和迭代各自的优缺点。而衡量算法性能无外乎空间复杂度和时间复杂度。</li>
<li>业务相关算法：除了上面的基本算法之外，业务中还会经常涉及到一些更为复杂的算法，如：压缩算法、LRU缓存算法、缓存一致性、编译原理中的状态机等。此外，目前越来越火的机器学习中有很多算法也是在很多业务场景中有很大用途的，如：用于文本分词的结巴分词和中科院ICTCLAS；用于关键词提取的TF-IDF和TextRank；用于计算文本相似度的主题模型、Word2Vec、余弦相似度以及欧几里得距离；用于文本分类的朴素贝叶斯；用于推荐的聚类、协同过滤、用户画像、隐语义模型等。</li>
<li>计算机网络： TCP/IP协议是网络最根本的协议，其七层/四层协议栈的设计都是非常精华的东西，连接的建立、断开以及连接的各种状态的转换都是排查、解决网络问题的根本依据。从TCP/IP往上，HTTP协议是现在绝大多数后端应用对外提供的协议，发展到现在已经将要步入HTTP2.0时代，带来了持久连接、连接复用等令人振奋的新特性。此外，基于HTTP的HTTPS协议由于其安全性在逐渐的成为后端服务对外开放的主流协议。业务层面，基于HTTP协议的RESTful规范正成为对外接口的主流规范，而OAuth2.0协议也在成为开放平台对外的主流协议。除了HTTP之外，SMTP是另一个基于TCP/IP的应用协议，主要用在发送邮件上。</li>
<li>设计模式： 在软件开发中，前人的经验形成了很多经典设计模式供我们使用，能够使得软件的实现可服用、可扩展、可维护。经典的工厂模式、简单工厂模式、单例模式、观察者模式、代理模式、建筑者模式、门面模式、适配器模式、装饰器模式在日常的很多开发场景下都具有很重要的意义。</li>
</ul>


<h2>数据</h2>

<p>现在互联网的所有业务其实都是围绕数据来进行的。而数据传输、数据存储、数据分析处理都是关键的部分。</p>

<ul>
<li>高速缓存：目前用的最为广泛的缓存软件Redis能够支持丰富的数据结构，如：字符串、列表、有序集合等多种数据的存储。了解缓存实现的原理、内存淘汰的策略能够更好地使用缓存。此外由于缓存的成本较高，在使用缓存的时候一定要做好量化和存储优化工作。</li>
<li>数据库：掌握数据库的很大一个关键点就在于对索引的使用，可以说，正确地使用索引就基本等于掌握了数据库的使用。目前绝大多数据库都是使用B树做为索引的数据结构，目的就是为了利用磁盘顺序读写的特性。不同的数据库由于本身设计目的的不同，都有一些独特的优势，如：MongoDB天然支持sharding，但受限于NoSQL，在重事务、有关联关系的场景下并不适用；HBase使用LSM作为底层数据结构，牺牲了读性能来换取高速的写性能。</li>
<li>搜索引擎：搜索引擎主要应对全文检索以及多维度查询的业务场景。掌握搜索引擎使用的数据结构、集群方式、配置的关键点有助于更好地使用搜索引擎服务于业务应用。</li>
<li>消息队列：消息队列有两种角色：生产者和消费者，两种角色对于消息队列的需求也不一样。其中，对于消费者来说，消息消费的方式包括发布-订阅和队列两种。消息队列在语义保证上分为：At Most Once、At Least Once、Exactly Once三种模式，需要更具特定的业务场景选择合适的语义保证。此外，消息队列对于高可用、消息安全的保证决定了此消息队列的可靠性。</li>
<li>数据存储和分析：数据存储下来最终还是要用来做分析和处理的。数据的处理分为离线处理和实时处理。离线处理的优势在于能够处理大量数据，但是一般会有T+1的延迟，适用于计算量大但是对于结果允许有延时的场景。但对于离线数据分析，还有一个很关键的就是数据倾斜问题。所谓数据倾斜指的是region数据分布不均，造成有的结点负载很低，而有些却负载很高，从而影响整体的性能。因此，处理好数据倾斜问题对于离线数据处理是很关键的。而实时处理一般是流式处理方式，适用于数据能够转换为数据流，对于结果要求及时性的场景。对于实时数据分析，需要注意的就是实时数据处理结果写入存储的时候，要考虑并发的问题，虽然对于Storm的Bolt程序来说不会有并发的问题，但是写入的存储介质是会面临多任务同时读写的。通常采用的方案就是采用时间窗口的方式对数据做缓冲后批量写入。此外，基于Yarn、Mesos这种资源统一管理调度系统进行数据分析需要根据运行原理的不同进行适当的配置。</li>
<li>数据同步：数据仓库的数据来源除了直接的日志外还有一个很关键的就是业务数据库。从业务数据库到数据仓库的过程称为数据同步。有基于SQL的同步方案，也有基于MySQL binglog的增量同步方案。</li>
</ul>


<h2>Java</h2>

<p>对于Java方面的技能来说，主要有两个大的部分，包括Java编程和JVM。</p>

<p>先来看一下Java编程部分，这也是Java工程师最最基础的技能。</p>

<ul>
<li>IDE: 目前用的最多的Java IDE当属Eclipse和Intellij IDEA。前者是老牌IDE，逐步淘汰了Jbuilder以及Netbeans，占领了大部分Java IDE市场。后者则是后起之秀，由于其增量编译、智能分析代码等带来的性能提升，现在已经得到了大规模使用，大有取代Eclipse之势。</li>
<li>核心语法：目前用的最多的当属JDK6的Java语法。而到了Java7引入了try with resource、switch string、diamonds等语法。Java8则又引入了lambda、stream等语法。</li>
<li>集合类：集合类是Java语言中非常精华的部分，包括：HashMap、ArrayList、LinkedList、HashSet、TreeSet以及线程安全的ConcurrentHashMap、ConcurrentLinkedQueue等线程安全集合。了解他们的实现原理以及查询、修改的性能以及使用场景是非常必要的。</li>
<li>工具类：Google Guava、Apache commons、FastJson提供了很多JDK本身没有的工具类、集合等。此外，ASM字节码操作以及CGLIB代码生成能够提供更底层的java编程功能。</li>
<li>高级特性：抛开Java核心的基本编程，并发编程、泛型、网络编程、序列化RPC都属于java的高级编程特性。其中并发编程需要掌握Executors提供的各种并发工具、Java7带来的fork/join框架以及CountDownLatch、Semaphore、CyclicBarrier等同步工具；网络编程要区分好BIO、NIO以及AIO；序列化中除了JDK自带的序列化实现之外，Protobuf和Kryo是比较高效的第三方实现；RPC的实现中，Thrift、Hessian、Dubbo以及RMI则是比较常用的几个协议,其中的Hessian是基于Http协议的，Dubbo是基于TCP协议，而Thrift则同时支持。</li>
<li>JavaEE: JavaEE现在是Java应用最为普遍的一个领域。Servlet是JavaEE中最根本的组件之一。而Servlet3.0带来的异步Servlet提高了其处理请求的性能。</li>
<li>项目构建：目前用的最多的Java项目构建工具包括Maven和Gradle，提供了源码包依赖管理、编译、打包、部署等一系列功能。</li>
<li>编程框架：Spring是Java编程中避不开的一个框架，发展到现在除了Spring核心的IOC、AOP之外，SpringMVC、Spring Data、Spring Cloud、Spring Boot等等都给Java开发者们带来了开发上的便利，大大提高了开发效率；ORM框架MyBatis也是Java领域比较火的框架之一，实现了数据库记录到Java对象的映射操作；Jersey则提供了从客户端到服务端的一整套符合RESTful规范的开发框架。此外，Vert.x、Spring Flux这种非常适用于IO密集型应用的异步响应式编程框架也开始兴起。</li>
<li>测试：测试是任何编程都需要的一步。黑盒测试主要指的通常进行的功能测试，白盒测试则主要指的对代码功能、质量进行的测试。此外，关键的单元测试则是开发工程师需要着重注意的地方，“测试驱动开发”的理念也是值得推崇的开发方式。JUnit是目前Java中实现单元测试的主流方案。</li>
</ul>


<p>一般来说掌握上面所述的Java编程技能是能够应付大多编程工作的。但是如果在代码层面已经做到最大努力却还是达不到性能要求的时候，就需要在JVM虚拟机层面做一些努力了。可以说掌握JVM相关技术是Java开发进阶的一个关键步骤。</p>

<ul>
<li>虚拟机实现: Java的虚拟机实现除了我们常用的HotSpot外，还有JRockit、J9以及移动平台的Dalvkit、ART（Android4.4后引入）。我们通常锁描述的JVM优化绝大多是是针对HotSpot虚拟机来说的。</li>
<li>类加载机制：JVM的类加载机器遵循双亲委派原则，即当前类加载器需要先去请求父加载器去加载当前类，如果无法完成自己才去尝试进行加载。OSGI框架则打破了此机制，采用了平等的、网状的类加载机制，以实现模块化的加载方案。</li>
<li>运行时内存组成: 程序计数器、堆栈、方法区、堆、堆外内存，这些一起组成了JVM的运行时内存。</li>
<li>Java内存模型：Java的主内存+线程私有内存的模型是线程安全问题产生的根本。</li>
<li>GC原理和调优：与C、C++这些语言相比，GC是Java的优势，但因为GC的细节被JVM屏蔽了，在对内存、性能要求非常苛刻的情况下难以进行自由控制，某种程度这也是劣势。如果想在某些场景下发挥GC的最大性能，能做的就是对GC的各种参数做优化配置，如新生代和老年代的垃圾回收器选择、各种垃圾回收参数的配置等。此外，很多时候由于代码质量或者外部客观因素，造成了JVM频繁GC，需要使用相关的工具快速进行问题定位和解决。</li>
<li>性能调优和监控工具：JDK自带了很多强大的调优和监控工具，包括jmap、jstack、jcmd、jconsole、jinfo等。此外，btrace是一款非常强大的在线问题动态排查工具，能够无须重启Java进程，动态的插入一些代码逻辑，从而拦截代码执行逻辑打印日志，从而排查问题。</li>
</ul>


<h2>系统架构</h2>

<p>一个应用从0开始一般会经历单体应用、垂直应用到分布式服务架构的演化（具体的会随着业务的不同有所不同）。如下图所示：</p>

<p><img src="//post_images/javatech/arch.png" alt="" /></p>

<ul>
<li>单体应用：当应用规模、团队规模比较小的时候，只需要一个包括了所有功能的应用即可。减少部署结点，也减少了部署成本。此时，对数据库的ORM操作是架构实现的关键点。</li>
<li>垂直应用：当应用的用户规模越来越大，请求量越来越高的时候。单体应用增加结点带来的资源浪费会凸现出来，因为绝大多数接口请求量并没有特别大，根本没必要扩充到多个结点。此时，就可以将单体应用拆分成互不相关的几个应用，分别对外提供服务。此时，加速每个应用开发的MVC框架是架构实现的关键点。</li>
<li>分布式服务：当垂直应用越来越多，应用之间的交互不可避免。抽离核心业务单独部署，逐渐形成稳定的服务中心。而随着团队规模的相应扩大，服务会随着团队的增多变得越来越多，粒度也会变得越来越小,也就逐步形成了分布式服务的架构，而当粒度细到某种程度、服务数量多到一定程度则可以称之为微服务。即在设计好业务边界之后将原来的单体应用分解成一个个细粒度的服务，彼此之间通过某种方式进行通信。微服务架构的关键在于如何做好服务的治理、调度、维护工作。目前，Dubbo算是微服务架构中用的比较多的框架，但Dubbo仅仅解决了微服务架构中的一部分问题。Spring Cloud则基本上涵盖了微服务架构的各个方面。</li>
</ul>


<h2>部署架构</h2>

<p>对于Web应用来说，LVS+Nginx+Tomcat+MySQL+Redis即可构成一个简单通用的部署架构，如下图所示：</p>

<p><img src="//post_images/javatech/web-arch.png" alt="" /></p>

<ul>
<li>LVS作为最前置的结点，负责在网络第四层转发流量、负载均衡。</li>
<li>多个LVS使用Keepalived互为主备实现高可用。</li>
<li>Nginx作为反向代理，负责在网络第七层转发流量、负载均衡。此外，其做为高性能Web服务器，还可以负责静态页面/资源的访问。也可以通过Nginx lua应对一些高并发的动态场景。</li>
<li>Tomcat做为业务容器，主要的应用代码都在这里面。</li>
<li>Redis作为缓存，隔离高并发请求和后端数据库。</li>
<li>MySQL以主从模式对数据做持久化。</li>
</ul>


<p>其中，虚线部分是数据库层，采用的是主从模式。也可以使用Redis Cluster（Codis等）以及MySQL Cluster（Cobar等）来替换。</p>

<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何学习后端技术？]]></title>
    <link href="http://www.rowkey.me/blog/2018/04/13/how-to-study-tech/"/>
    <updated>2018-04-13T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/04/13/how-to-study-tech</id>
    <content type="html"><![CDATA[<p>学习后端技术和学习其他的技术并没有什么大的不同。因此，题目换做如何学习技术也是讲的通的。概括来讲，有以下几点建议：</p>

<ul>
<li>扎实的计算机基础知识</li>
<li>知其然更要知其所以然</li>
<li>动手实践</li>
<li>频繁练习</li>
<li>持续学习</li>
<li>自我总结</li>
<li>学会规划</li>
</ul>


<!--more-->


<h2>扎实的计算机基础知识</h2>

<ul>
<li>数据结构和算法：程序是由数据和算法组成的，因此这两个东西是计算机软件的基础。诸如B树、哈希表、栈以及七大排序算法、查找算法这些，在很多软件的代码中都可以看得到。有时候，一个优秀的工程师和一个普通工程师的区别也就在于是否能够合理使用合适的数据结构和算法。</li>
<li>计算机操作系统：操作系统可以说是集大成于一身的一个软件程序。资源调度、任务调度、IO调度、进程通信等等，每一个设计都是很精华的，也是很多其他应用软件设计的思想来源。</li>
<li>计算机网络：目前只要有数据传输功能的程序绝大多数都是离不开网络的。网络七层或者四层协议栈的设计非常精妙。了解网络连接如何建立、断开以及每个连接状态的意义都有助于对程序网络问题的排查。</li>
<li>计算机组成原理：这是计算机最底层的设计，也是计算机一切的基础。了解这些有助于消除你对计算机的神秘感，毕竟符合冯诺依曼原理的计算机无非就是存储数据、程序按序运行。</li>
</ul>


<p>以上是计算机专业的一些比较普遍的基础知识课程。这里不得不说的一点是，虽然现在各大高校的计算机专业课程是比较落后的，但是这些基础课程，由于多少年也没有怎么变过，因此不管怎样都是需要扎实掌握的。也许上学的时候你感觉不到有多大的用处。但是进入实际的开发工作中，是否能够掌握扎实的基础知识往往决定了一个开发工程师的上限，这也是很多大的互联网公司无论是校招还是社招，都侧重于一些底层知识考察的原因。毕竟，你会使用什么东西只能决定你的下限，而你的基础知识和学习能力才决定了你的上限。</p>

<p>此外，其实很多平时开发中的一些技术都可以类比到一些基础知识的。比如，我们经常为了提高查询性能而使用的缓存技术，和为了兼容CPU和IO速度不匹配的而设计的CPU Cache就是同样的东西；操作系统中的进程间通信方式和服务之间的异步同步通信也是差不多的道理。诸如此类，其实计算机科学基础凝聚了很多精华的设计，无论是计算机硬件架构、计算机操作系统还是计算网络。</p>

<h2>知其然更要知其所以然</h2>

<p>经常遇到来面试的工程师，他们简历上写了很多项目，也用过很多技术，怎么看都是非常不错的候选人。但是面试一旦深入到原理或者是优化层面，很多工程师甚至是一些公司的资深架构师都会支支吾吾，答非所问或者说是没关注过。听到最多的解释就是业务压力太忙，没有时间去研究这个。其实，自我经历来看，业务忙是原因，但是没有时间却肯定是借口，毕竟阅读一个项目的源码虽然比较耗费时间，但是去网上看看已有的原理分析其实是花不了太多的时间的。归根结底，还是没有一种知其然更要知其所以然的基本意识。很多东西，你学会了使用会很兴奋，但是你有没有想过这么兴奋的功能是如何实现的呢？最简单的例子，Java中的HashMap，大家都在用，但是他到底是怎么实现的呢？很多人甚至都不知道这和数据结构课程上的哈希表是什么关系，更别说让他说出解决冲突的方式了。</p>

<p>这也可以映射到现在的一种现象：很多开发工程师工作了很久，看着经验丰富，但基本都是拿着一年的工作经验重复n年的。基本上每一份工作，每一个项目都在那里做重复劳动，而且也并不去考虑如何避免重复劳动这件事。</p>

<p>进一步的，除了遇到问题再去看源码、究底层，主动阅读经典类库、高质量开源项目的源码以及其他同事写的代码，学习其中好的架构、设计、编码风格以及类库的使用也是促进自身技术进步的一个非常有效的方式。</p>

<p>这也牵扯到了技术的广度和深度的问题。就我自己来看，对于刚刚毕业或者刚刚入职的工程师来说，首要的是深度问题，只有你在某一领域有了深入的研究和造诣了，你才能融汇贯通，迅速地扩大自己的知识面，在广度上做到突破。而对于有一定工作经验的工程师来说，虽然深度不是那么必须了，但是遇到的问题、新学到的东西还是刨根问底才好，否则一旦出现问题再去盲羊补牢会让你显得非常被动，也不利于自己的技术发展。毕竟，一个什么都做过、什么都用过却什么也不精的人可替代性太强了。</p>

<h2>动手实践</h2>

<p>学习领域有所谓721模型：个人的成长70%来自于岗位实践，20%来自向他人学习，10%来自于培训。虽然这种理论存在争议，但在笔者看来对于程序员来说按照实践、学习和培训的方式进行重要性排序是合理的。普遍公认的一种学习技术的最佳实践-“项目驱动型学习”，也就是这里说的动手实践。很多技术，只是看书，你会云里雾里，看了就忘。必须要经过你自己的实践或者项目中使用到了这种技术，你才能很快地掌握并熟练。此外，现在朋友圈、微博上都充斥各种所谓干货，很多人阅读大量的资料自以为收货满满，其实对于里面的东西根本就没有去实践过。甚至有时候就是感叹一下别人真厉害而已。真正的干货是需要自己消化的，消化的一种最好的模式就是实践，无论是对资料中的例子还是一笔带过的知识。</p>

<h2>频繁练习</h2>

<p>动手实践能够让你快速入门，但只有频繁练习才能让你熟练使用。</p>

<p>“一万小时”理论讲的是任何一个行业都至少需要一万小时的实践才能成为专家。先不去争论此理论是否正确，可以想想当你长时间不写代码或者不用某个技术后你再去做相关的开发，那种生涩陌生感想必是每个人都有体会的。可见对于研发这个角色，频繁练习是有多么的重要。</p>

<p>当然，这里的频繁练习并非指的重复劳动。应该是带着自己的思考去练习，多去想一下为什么这么做？有没有更好的方式？</p>

<h2>持续学习</h2>

<p>“活到老，学到老”这句话用在程序员这个职业上再合适不过。IT技术尤其是互联网开发中的技术，其迭代是非常迅速的。也许你今天学的，过不了几年就成了被抛弃的。虽然相比起前端技术，后端技术算是比较稳定的，但相比起其他行业，迭代速度还是非常快的，像Struts这种当年火的一塌糊涂的技术现在也成了过时的东西。因此，一定要对新事物、新技术具有敏感性，要不断地去涉猎业界最新的知识点，扩充自己的知识库。而学习新的知识的时候，与读一些书籍和网上的博文相比，直接阅读相关知识的官方文档是笔者推崇的方式，毕竟经过二次加工的书籍、博文很多时候由于写作者水平或者个人理解的问题会有错误或者偏离原作者的意思。而由于目前IT技术绝大多数都是源自欧美，欧美的技术水平也领先国内很多，因此英文对于IT技术从业者的要求也是比较高的，需要达到熟知各种计算机术语，通畅地阅读各类英文资料的水平才不至于在学习方面落后。</p>

<p>这里还需要提到一点就是要“逃离舒适区”。人对自己熟悉的东西都比较亲切，对自己熟练掌握的技术一般也能够自信地使用，然而当需要使用自己没接触过的技术时，很多人就望而却步、不敢尝试，进而也就丧失了学习新的知识、扩充自己知识库的机会。最好的方式应该是敢于“逃离舒适区”、敢于使用新的技术，这样才能让自己具有持续的学习兴趣，促进自己的持续进步。</p>

<h2>自我总结</h2>

<p>相信很多人在平常的工作中，经常会遇到一些问题，然后通过查阅网上资料、询问同事、翻看源码等手段解决了，当再次遇到类似的问题甚至是相同的问题时，还是一头雾水。先不提记忆力的问题，造成这种情形的很大一个原因就是没有去总结。当然，这里的总结不仅仅指的是把你平时遇到的问题记录下来，更深一层的是要找到问题发生的本质原因，如何避免发生同样的问题，从中有什么启发和收获。再进一步的则需要经常将自己一段时间内的知识收获组织成体系或者融入到自己的知识体系中，这样才能举一反三，遇到相同的问题可以有据可循。</p>

<p>而自我总结的方式包括记笔记、写博客、做分享。其中，比起记笔记来说，写博客、做分享是笔者更为推荐的方式。毕竟，和别人交流一方面能促使你对总结质量的把控，另一方面分享知识给别人带来的“荣誉感”反过来会产生某种正向反馈让你更加乐于总结和分享。</p>

<h2>学会规划</h2>

<p>平时和不少工程师聊过关于职业规划的事情，其中有些人对自己的职业道路有很清晰的认识，但更多的则是没有任何概念，只是觉得能挣钱养家就好。很明显前者是属于有规划的人，对于这种人来说，其努力是有目标的，因此走的路也会更踏实，更具有可持续性。</p>

<p>对于研发职位来说，学会规划是一个很关键的特质。而规划可以分为长期规划和短期规划。上面说的职业规划就是一种长期规划，需要高瞻远瞩的定下自己前进的方向。如在五年内成长为一个后端服务架构师就可以看做一个长期规划。笔者自己的长期规划如下：</p>

<ul>
<li>35岁之前只做能提高自己技术水平的事情，能够成为公认的某一个技术领域的专家。</li>
<li>绝不为了钱加入自己并不认同的企业或者团队。</li>
</ul>


<p>而对于短期规划来说，则是一些具体技能、晋升、学习方面的规划。如，笔者近一年的学习计划包括：</p>

<ul>
<li>学习机器学习技术，能够成为“调参工程师”。</li>
<li>加强自身的管理技能，能够带领部门有好的业绩。</li>
<li>完成《增长黑客》、《分布式系统概念与设计》等十本书的阅读。</li>
</ul>


<p>需要注意的是，对于这些短期规划，要设定的比较合理，具有可达性，也要设定好优先级，根据优先级逐步去完成。此外，规划不要定死，可以根据实际情况灵活调整。</p>

<h2>如何学习一门新技术</h2>

<p>上面主要讲述了宏观层面的如何学习技术，而具体到学习某一个新技术，其实也是有法可循的。如下图所示：</p>

<p><img src="//post_images/howtostudy/15127185777816.jpg" alt="" /></p>

<p>由于很多技术的模块非常多，源码也非常复杂，很多时候在看源码的时候会陷进去越看越不得章法，因此这里着重说明一下“看源码”的一个典型流程：</p>

<ol>
<li>阅读该技术的架构文档，了解其总体架构和组成。</li>
<li>根据总体架构，将源码文件以模块或者上下层级进行分类。</li>
<li>从未阅读过的模块中选择最独立（依赖性最小）的模块代码读起。</li>
<li>阅读此模块的功能介绍文档。</li>
<li>阅读此模块的源代码。</li>
<li>一边阅读一边整理调用关系（以表或者树的形式）。</li>
<li>转到第三步。</li>
</ol>


<h2>总结</h2>

<p>程序员是一个金字塔结构的职业体系，越往上，人越少也越难达到。如下图所示：
<img src="//post_images/howtostudy/15022677629156.jpg" alt="" /></p>

<p>一步步走到金字塔顶部需要不断的学习和进步，包括正确的态度、正确的方法以及持续的努力。本文所述只是笔者自己的体会，也是自己一直在践行的东西。除此之外，肯定还有很多其他优秀的方法和思想能够促进这个过程。</p>

<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何成为一名合格的Java工程师?]]></title>
    <link href="http://www.rowkey.me/blog/2018/04/01/pje-release/"/>
    <updated>2018-04-01T19:29:34+08:00</updated>
    <id>http://www.rowkey.me/blog/2018/04/01/pje-release</id>
    <content type="html"><![CDATA[<p>Java开发一直是当前互联网领域最火热的开发技能之一，Java工程师也一直是需求量非常大的开发职位。那么如何成为一名合格的Java工程师呢？一名合格的Java工程师又应该具有哪些技能呢？针对这些，笔者的新书《Java工程师修炼之道》做了一些经验性的阐述和讲解。</p>

<p><img src="http://www.rowkey.me/post_images/book.png" width="250"/></p>

<!--more-->


<p>写作此书的想法萌生于2015年，主要是在研发招聘过程中，尤其是校招，感受到了目前后端工程师教育的匮乏。对于一个后端工程师的技术体系，先不说学生，不少工作很长时间的人都没有一个清晰的认识。就打算写一本后端工程师技术体系书籍的想法，希望能够给选择后端这个方向的人一些指导，也算是对自己的一个阶段性总结。</p>

<p>2016年初，博文视点“永恒的侠少”（张春雨编辑）找到我，算是正式开始写作此书。历时一年多的时间，于2017年8月份交稿，中间历经许多次修改，《Java工程师修炼之道》终于出版。这本书是自己出的第一本书，所以写作的过程一直是如履薄冰的，一直害怕写成一本没有任何意义的烂书，因此一遍遍地去读，一遍遍地修正，也一遍遍地更新一些知识点，希望最后不要沦为一本鸡肋无味的技术书。</p>

<p>本书主要针对一名合格的Java工程师的必备技能做了大纲性的总结和阐述。内容主要来自于公司内的后端工程师学习计划、自己以前的一些博客文章和自己从业以来积累的知识库。包括了工程化、常用开发框架、数据存储、数据传输、Java编程高级知识、性能优化、安全技术等，基本涵盖了Java工程师需要掌握的绝大部分技能点。此外，由于笔者的学习、工作笔记是平时工作中查阅网上资料并经过辨伪后记录下来的零散知识点，难免会有一些对网上资料的引用，特别对这些资料的原创者表示感谢，如果有侵权请联系我。</p>

<p>本书可以看作一本Java工程师的入职指南，也可以看作一本串联Java后端技能点的参考手册，同样可以作为创业团队做技术选型的一个参考。通过精心编排的内容，刚入门的Java工程师能够体系化地学习相关开发技能，有经验的Java工程师则能够查漏补缺，进一步加强自身的Java技术体系。</p>

<p>其中的部分内容，会陆续在我的博客和公众号放出。</p>

<p>希望这本书会给想要学习Java后端开发的同学或者还未形成自己技术体系的Java工程师们带来帮助。</p>

<p><strong><em>需要注意的是，本书关于每一技能的知识点并没有讲述的很深，毕竟一方面确实没必要，每一个知识点都有更厉害的专家和更专业的书籍；另一方面，要面面俱到，这本书的厚度估计得翻三倍，自己确实没这精力。因此，本书并不适合对内容深度有要求的同学。</em></strong></p>

<p><strong>购买</strong>: <a href="https://item.jd.com/12325207.html">https://item.jd.com/12325207.html</a></p>

<p><img src="//post_images/book_jd.png" alt="" /></p>

<p><strong>目录</strong></p>

<blockquote><p>第一章 后端技术导言</p>

<p>1.1 后端基础设施</p>

<p>1.2 Java后端技术概览</p>

<p>1.3 如何学习后端技术</p>

<p>第二章 Java项目工程化</p>

<p>2.1 项目构建</p>

<p>2.2 代码版本控制</p>

<p>2.3 代码质量保证</p>

<p>第三章 开发框架</p>

<p>3.1 依赖注入</p>

<p>3.2 对象关系映射</p>

<p>3.3 日志</p>

<p>3.4 Web MVC</p>

<p>第四章 Spring</p>

<p>4.1 Spring核心组件</p>

<p>4.2 Spring数据操作框架</p>

<p>4.3 Spring Boot</p>

<p>4.4 Spring常用组件</p>

<p>4.5 总结</p>

<p>第五章 数据存储</p>

<p>5.1 关系型数据库-MySQL</p>

<p>5.2 非关系型数据库</p>

<p>5.3 缓存</p>

<p>5.4 搜索引擎-Elasticsearch</p>

<p>第六章 数据通信</p>

<p>6.1 RESTful架构风格</p>

<p>6.2 远程过程调用-RPC</p>

<p>6.3 消息中间件</p>

<p>第七章 Java编程进阶</p>

<p>7.1 Java内存管理</p>

<p>7.2 Java网络编程</p>

<p>7.3 Java并发编程</p>

<p>7.4 Java开发利器</p>

<p>7.5 Java新版本特性</p>

<p>7.6 总结</p>

<p>第八章 性能调优</p>

<p>8.1 调优准备</p>

<p>8.2 性能分析</p>

<p>8.3 性能调优</p>

<p>第九章 安全技术</p>

<p>9.1 Java加密</p>

<p>9.2 安全Http - HTTPS</p>

<p>9.3 Web安全</p></blockquote>

<p><strong>推荐</strong></p>

<blockquote><p>2013年，我和本书作者的接触是从基于网易的一个大型互联网应用合作开始的，我见证了从第一行代码到整个系统服务于亿级用户的过程，并且相信这种经历对开发者来说是一笔巨大的财富，其中大量的开发和实战经验都会在本书中得到充分的体现，相信读者能从书中直接领略到丰富的实战知识。在与本书作者的合作过程中，其对Java技术的热爱与追求孜孜不倦，对问题刨根问底，直到理解透彻、灵活应用，这些都令我印象深刻。这些年，我与本书作者一直保持沟通交流、相互学习，他将近十年的实战经验沉底于本书以实现对后端技术的探索、布道，非常值得开发者与近高窗卧听秋。</p>

<p>后端技术涉及内容非常广泛，Java语言也是互联网开发行业使用的主流语言，相信后续也将继续流行很长一段时间，而本书作者也一直从事Java后端开发工作。在本书中作者比较系统地从总体上描述了后端技术相关的理论知识，包括基础设施、网关服务及框架选型等基本原则，然后以实际经验进行示例说明，接着详细梳理了Java的后端技术，相信读者读完本书后会更全面地理解后端技术。互联网的业务建设需要不同角色的开发者共同协作完成，因此，系统工程化是开发者首先要共同遵守的规范或约定，包括代码规范、版本管理和代码质量检查等。</p>

<p>开发框架的选型进一步地为工程化提供了基础，也能加速推进互联网开发，尽管是否重复造轮子是一个恒久的话题，但是没有永远的银弹，只要在合适的时间里根据团队的能力选择合适的技术框架就好。一般来讲，目前常用的框架包括基本的依赖注入、AOP、事务管理、连接池管理、数据操作、日志服务等，在众多的框架中，本书作者选用目前在Java领域使用最广泛的Spring做深入的分析，详细地说明各组件的基础知识、基本原理和实际使用案例，最难得的是把较多开发者遇到的坑都用真实的示例进行了说明，可以帮助开发者快速地跳过这些伤心地带，同时也把最佳实践画龙点睛地带给开发者。</p>

<p>数据存储无疑是所有系统应用中非常重要的一环，应用的场景用例也和数据库的选型有极其重要的关系，开发者选择关系型数据库还是非关系型数据库是需要根据软件成本与人力成本来进行权衡的，比如是选择MySQL、Oracle等开源或商业的数据库。本书重点从数据库的基础知识、索引和表优化等方面以详尽的示例为更好地选择数据库的存储类型提供了更多的知识。</p>

<p>早期的关系型数据库一般能满足数据达到一定规模的企业的需求，而在互联网业务领域，特别是移动互联网领域内的元数据或者日志数据等，达到亿数量级别是很常见的，这时通常使用非关系型数据库，在非关系型数据库里使用非常多的有MongoDB、HBase等分布式数据库系统。作者在自身的企业开发实践中，得到了大量的使用经验和最佳实践。为了加速后端应用，缓存热数据是加速业务、提高业务性能、提升用户体验的重要手段，通过使用本地缓存、远程缓存进行数据加速、数据预热或提高数据的命中率，是开发者在应用开发的过程中常会遇到的场景。</p>

<p>“路漫漫其修远兮，吾将上下而求索”，后端技术每年都在不断发展，所用技术也有变化，近些年Java语言的发展速度不那么快了，但是总体是在不断前进发展的，本书作者带领的团队一直深耕此领域并希望通过本书为技术开发人员带来更多帮助。</p>

<p>&ndash; <strong>尧飘海，网易云基础服务（蜂巢）首席架构师</strong></p></blockquote>

<hr />

<blockquote><p>Hey！新来的读者，为了吸引你的注意力我真是煞费苦心，但最终还是没能写出一句特别吸引眼球的话来，毕竟写序的我不是标题党出生。此刻我真的非常能理解你拿到新书之后那渴望知识的心情，所以你恨不得一个字的“序”也不要看到，直接到达“最有价值”的知识点。但作为一名资深转业码农（对！你没看错，是“转业”，不是“专业”）还是想说一句，你先看完序，5分钟后到达知识的战场，会更稳！</p>

<p>相信你已经在看“序”了，那么我们来说点正经事。</p>

<p>你的知识体系的养成有3个关键阶段：看山是山、看山不是山、看山还是山。本书的适用人群是“看山不是山”的那些人，如果你恰好处于这个阶段，恭喜你！书钱没白花。</p>

<p>Java是一门非常容易入门的语言，初学者经过初期的学习之后基本能掌握DEMO级别的编程应用。相信读者你已经度过了这个阶段，但是Java庞大的体系可能会把你绕晕，又或者你还没看到Java的生态系统有多么复杂。此时，你需要本书。从事程序员这个工作，到比较高阶的时候，其实是不挑语言的，语言只是工具，而你可以在纷繁复杂中游刃有余。但几乎每一位高手都是先深入一个领域，再横向发展的。你可以不用着急后续的横向发展，先坚定自己学习Java的信心！因为，从广泛的应用场景、顶级的开源生态、未来可期的薪水和职位来说，Java都是非常不错的选择。</p>

<p>敲黑板，画重点！下面来解释一下，为什么本书面向的是“看山不是山”的人群。在度过Java的入门期之后，会有一个烦恼，那就是面对Java这么庞大的体系，我们究竟应该学习什么？选择方向，往往比努力更重要！是使用J2SE编写桌面程序？是使用J2ME编写嵌入式应用？还是使用J2EE编写企业级应用？这些是我们那个泛黄的年代特有的烦恼。而现在的烦恼可能是学Android？还是学Java后端？即便大方向你已经十分坚定，而且选择了Java后端编程，但因为复杂的知识体系和Google发布的各种教程文档，眼前看到的已经不再是清晰的山脉，而是一片迷雾。此时，你需要本书，因为它给你指明了努力的方向。</p>

<p>本书的结构、阐述的方式和大部分的“指南”书籍有较大的区别，本书是以笔记和要点的形式进行呈现的，用现在的话说就是捞干货。本书涵盖的知识，是以现代工程实践中的实际案例出发来组织的，所以知识点范围非常广泛，每一个点都对最关键的“Best Practice”简明扼要地进行了说明。你在阅读本书的时候需要一些相关经验，不然无法跟上作者的节奏，建议在有一定的知识准备后再阅读本书，这样你会受益匪浅。从另外一个角度看，在你有了一定的基础积累之后，本书可以帮助你全面地了解一个现代化的最先进的工程实践是怎样的。本书讲述了目前行业中最常用的，经过了实践的工程方案，这将是你快速进阶的最佳指引。</p>

<p>&ndash; <strong>孙建，随身云（中华万年历）联合创始人&amp;CEO</strong></p></blockquote>

<hr />

<blockquote><p>扎实的基础理论知识是内功底子，丰富的实践经验是招式。如本书作者所说，精妙的招式决定了你的武功下限，而深厚的内功底蕴会承载你所能企及的高度。那么，在后端技术栈中，内功与招式之间如何去关联起来，本书作者以其多年的钻研与实践结合心得，通过本书为你一一梳理。</p>

<p>&ndash; <strong>阙杭宁，网易云信CTO</strong></p></blockquote>

<hr />

<blockquote><p>作者是一位技术人,有多年的Java技术积累,是极少数真正热爱技术的人。在随身云架构师的工作让他有机会站在更高的层次进行系统架构的工作,这些实践经验和平时感悟都沉淀在作者的著作和博客中,相信每位Java工程师都能从中获取帮助。</p>

<p>&ndash; <strong>秦绪震，十露盘科技联合创始人，技术负责人</strong></p></blockquote>

<hr />

<blockquote><p>本书作者根据自身多年的JAVA后台开发经验, 提纲挈领的总结JAVA后台开发的各个关键技术点，这些知识点都是一个合格的JAVA工程师必须掌握的技能。它既可以作为新人的技术学习指南，也可以帮助老手对于自己的知识面进行查漏补缺，是一本非常好的技术指南。</p>

<p>&ndash; <strong>饶洵（蜚天），阿里巴巴技术专家</strong></p></blockquote>

<hr />

<blockquote><p>作为一个在后端摸爬多年的Java开发工程师，这本书让我温故而知新。书中介绍的Java相关的知识技能树，不仅涵盖了我个人多年的Java开发技术知识点，也对我所陌生的一些知识点进行了详解，让我突然有一种继续学习的冲动。</p>

<p>一个Java开发工程师的成长，不仅要对Java语言及其特性有深层次的理解，也需要掌握与Java相关的框架、生态及后端开发知识。这本书正是将后端开发工程师需要掌握的技能做了总结，对于提高开发技能有很好的指导作用。</p>

<p>我推荐这本书，对于具有一定Java基础和后端开发知识的读者来说，该书不仅具有仔细学习的价值，同时也是一本可以经常翻阅的工具书籍，对于Java开发工程师的成长和进阶有很大的指导作用。</p>

<p>一本好的技术书籍，不仅要仔细阅读、学习理解，还需要进行较多的实践，将所看所学进行应用，通过不断地实践，加深知识点印象，从而形成永久的记忆和技能。希望各位读者能够通过掌握书中的知识和技能，逐步成长为技术骨干和专家，从而创造更多的技术输出、产品输出，创造更多的财富。</p>

<p>&ndash; <strong>张小川，网易考拉海购架构师，供应链技术主管</strong></p></blockquote>

<p><strong>后续计划</strong></p>

<blockquote><p>此书一开始是计划有一章专门讲述大数据开发技术，毕竟现在越来越多的公司在构建自己的大数据平台，大数据技术也逐渐成了Java工程师的必备技能。但自己此方面经验较少，自认并没有达到可以向别人输出知识的程度，于是暂时搁置此部分。</p></blockquote>

<p>逐步把部分内容开源在笔者的<a href="https://github.com/superhj1987/pragmatic-java-engineer">Github（superhj1987）</a>中，并补充一些新的内容进来。</p>

<ul>
<li>Zookeepr本来是想放在大数据一章，现在会作为数据存储的一节补充进来。</li>
<li>异步响应式Web框架会补充在开发框架一章，以Vert.x为主，Spring Flux为辅。</li>
<li>Redis加入新版本的特性，并补充如何使用Redis实现分布式锁。</li>
<li>Kafka加入最新版本的特性，尤其是Kafka Streams和Exactly one语义。</li>
<li>Elastissearch基于5.0版本更新。</li>
<li>补充协程到并发编程中。</li>
<li>补充Netty到网络编程中。</li>
<li>使用Hystrix做资源隔离和限流会补充在Java开发利器中。</li>
<li>补充RxJava的使用在Java开发利器中。</li>
<li>补充Java10和Kotlin的部分到Java新版本特性。</li>
</ul>

]]></content>
  </entry>
  
</feed>
