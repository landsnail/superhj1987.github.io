<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: manage | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/manage/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2020-06-27T16:15:53+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《清教徒的礼物》学习笔记]]></title>
    <link href="http://www.rowkey.me/blog/2020/05/31/qjt/"/>
    <updated>2020-05-31T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/05/31/qjt</id>
    <content type="html"><![CDATA[<p>同学推荐的一本管理书籍，主要是讲的美国的管理文化在世界各地的普及，尤其是日本和中国。阐述了清教徒（第一批欧洲移民，起源于英国，在北美殖民地得以实践与发展）的一些特质，也是美国能够打赢两次世界大战的原因，包括：建造“人间天国”的坚定信念；亲力亲为的技师精神；集体主义；组织能力：善于协调各种财力、物力和人力的组织能力。并且在书的最后给出了管理黄金时代优秀实务背后的25条原理。看完这本书，对于其中的一些东西很有共鸣，比如：自下而上的管理、专家（职业经理人）崇拜的危害等。</p>

<!--more-->


<p><img src="//post_images/qjt-notes.png" alt="" /></p>

<ul>
<li>清教的四个特点

<ul>
<li>建造“人间天国”的坚定信念</li>
<li>亲力亲为的技师精神：重视技术、重视技术人员</li>
<li>集体主义：集体大于个人</li>
<li>组织能力：善于协调各种财力、物力和人力的组织能力</li>
</ul>
</li>
<li>自下而上的管理

<ul>
<li>逐步去中心化</li>
<li>在十分正式的组织上面强加一个高度非正式的组织</li>
<li>把决策权沿指挥链下放至愿意承担又能够承担的最低层级</li>
<li>火线管理者从事基本的管理工作，上级管理层的工作是派生的</li>
<li>所有权力和责任都集中在火线管理者，只有火线管理者独立完成不了的，才交给上级管理者</li>
</ul>
</li>
<li>专家崇拜的危害：不懂业务的管理专家会带来诸多负面影响，包括各种强制量化，唯数据论等。</li>
<li>指导下属自学是自下而上管理的基本方法之一<strong>【杠杆率高的工作】</strong></li>
<li>优秀实务背后的25个原理

<ul>
<li>所有成功组织，不管多么简单，都由系统嵌套而成。</li>
<li>所有系统都离不开常规工作的补充，这些常规要定期审查和更新。</li>
<li>任何组织最重要的子系统都是层级，其基础很有可能是某种形式的直线职能制。</li>
<li>最好的层级形式是“自下而上”。</li>
<li>”集体决策“带来正确的决定<strong>【集体决策是风险最小的决策，但不一定是最正确的决策】</strong></li>
<li>领导层应尽量实行集体决策制或“共治“</li>
<li>中层管理者是管理的”拱心石“</li>
<li>一人一上司<strong>【混血型组织一般是多重汇报机制】</strong></li>
<li>会议是”管理工作的媒介“</li>
<li>计划应该分为短期（1-4年）、中期（5-8年）和长期（9年以上）。</li>
<li>研究前人的成败，从前人的经验中学习。</li>
<li>各个方向尤其是向上的信息流动畅通无阻，对组织的成功非常必要。</li>
<li>管理者在实际意义和道德意义上都应该是领导者</li>
<li>应该保守地使用顾问；应该把顾问”放在手边“而非”供在头上“</li>
<li>管理者应该清楚自己的社会责任，包括把员工当人而非商品对待</li>
<li>不要等坏了才修，要注意保养和改进。</li>
<li>像回避瘟神一样回避债务，如果不可能做到完全回避，那么尽可能少借债。</li>
<li>管理者应该拥有或获得”领域知识“，即深刻了解公司的技术和业务，这种知识只能通过在公司或公司所在行业长期实践才能获得</li>
<li>对管理者的考核和培训应该是实用的、连续的。</li>
<li>任何想晋升到顶层的管理者都该从底层做起。</li>
<li>工作轮换有利于打造”全才型“经理人。</li>
<li>用人应该持长期导向，这个长期至少8年，最好是10年。</li>
<li>互补是任命的关键之一。</li>
<li>薪酬制度应该奖励并促进合作。</li>
<li>像回避瘟神一样回避炫耀和张扬。</li>
</ul>
</li>
</ul>


<p>&ndash;</p>

<p>书籍链接：<a href="https://book.douban.com/subject/26760576/">https://book.douban.com/subject/26760576/</a></p>

<p><img src="http://www.rowkey.me/post_images/qjt.png" width="300"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术管理者标准管理模板]]></title>
    <link href="http://www.rowkey.me/blog/2020/04/25/tech-leader-manage/"/>
    <updated>2020-04-25T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/04/25/tech-leader-manage</id>
    <content type="html"><![CDATA[<p>对于技术团队新晋升的一些研发Leader，即使在大公司具有完善的培训机制，大多数人在一开始还是会手足无措，不能很好地做到从个人贡献者到团队贡献者角色的转变。于是根据自己以及公司内部很多技术管理者的工作经验梳理出了一些技术管理者的管理模板，可以作为管理工作的实践参考。</p>

<!--more-->


<p><img src="//post_images/tech-manage.png" alt="" /></p>

<h2>看方向</h2>

<ul>
<li><p>向上级明确团队的职责</p></li>
<li><p>基于职责确定团队的使命、目标</p></li>
<li><p>把职责、使命向团队成员传达清楚</p></li>
<li><p>做好团队规划，包括：规模、分工、梯队、资源盘点等</p></li>
<li><p>建立团队的WIki，包括：职责、使命、目标、团队规划、人员分工、规章制度等</p></li>
</ul>


<h2>管事</h2>

<ul>
<li><p>OKR</p>

<ul>
<li><p>制定团队OKR，对齐公司和部门OKR</p></li>
<li><p>跟进团队成员的个人OKR制定和进度跟踪</p></li>
<li><p>跟踪OKR进展，识别高绩效人才</p></li>
</ul>
</li>
<li><p>技术管理</p>

<ul>
<li><p>参与技术方向决策，将研发规范、例会等信息明确传达给团队成员并推进</p>

<ul>
<li><p>技术评审规范</p></li>
<li><p>代码风格规范</p></li>
<li><p>代码开发规范</p></li>
<li><p>代码管理规范</p></li>
<li><p>CodeReview规范</p></li>
</ul>
</li>
<li><p>组织技术评审、CodeReview</p></li>
<li><p>制定学习分享机制并切实推行</p></li>
<li><p>团队所负责维护的系统的周期巡检</p></li>
<li><p>公司层面基础技术以及成熟开源项目的引入和推进</p></li>
<li><p>了解技术方向相关技术的技术采纳生命周期，根据公司现状知道何时引入相应的技术</p></li>
</ul>
</li>
<li><p>项目管理</p>

<ul>
<li><p>技术方案确定</p>

<ul>
<li><p>技术选型</p></li>
<li><p>技术架构</p></li>
<li><p>技术难点</p></li>
<li><p>性能瓶颈</p></li>
<li><p>上下游系统</p></li>
<li><p>功能模块</p></li>
</ul>
</li>
<li><p>根据技术评审的结果预估开发工期并做好关键时间点的把控</p>

<ul>
<li><p>系统、模块、功能的设计以及简述</p></li>
<li><p>参与的研发人员以及分工</p></li>
<li><p>预估工时</p></li>
<li><p>预计完成时间</p></li>
<li><p>关键时间点、里程碑</p></li>
<li><p>确定会议机制：晨会、周会</p></li>
</ul>
</li>
<li><p>创建并保持项目文档的更新</p>

<ul>
<li><p>技术调研文档</p></li>
<li><p>方案选型文档</p></li>
<li><p>需求文档</p></li>
<li><p>系统设计文档</p></li>
</ul>
</li>
<li><p>项目风险管理</p></li>
<li><p>项目质量管理，包括代码质量把控和监控告警设施的接入</p></li>
<li><p>协调资源推进项目进展</p></li>
</ul>
</li>
<li><p>技术产品运营</p>

<ul>
<li><p>提炼团队项目的公共抽象部分，组件化和平台化</p></li>
<li><p>组件、技术平台的推广</p></li>
</ul>
</li>
<li><p>成本管理</p>

<ul>
<li><p>技术选型时把成本做为重要考量项</p></li>
<li><p>提升团队资源的利用率</p></li>
<li><p>关注团队的人力成本和技术成本</p></li>
<li><p>关注团队的产出价值</p></li>
</ul>
</li>
<li><p>流程改进</p>

<ul>
<li><p>定位阻碍研发的流程节点，寻找有效的解决方案</p></li>
<li><p>寻求有效工具或者方案提升关键流程效率</p></li>
</ul>
</li>
<li><p>制度建设</p>

<ul>
<li><p>明确公司和部门的规章制度并推进实行</p></li>
<li><p>根据团队需要，制定团队规章制度</p></li>
<li><p>制定SOP，保障下限水准</p></li>
<li><p>明确团队例会制度</p></li>
</ul>
</li>
</ul>


<h2>管人</h2>

<ul>
<li><p>定期的一对一沟通</p>

<ul>
<li><p>你所负责业务的完成情况到现在怎么样？目标完成情况怎么样？</p></li>
<li><p>这段时间自我评价绩效如何？什么原因？</p></li>
<li><p>你个人有没有什么你觉得我应该知道的？</p></li>
</ul>
</li>
<li><p>关注团队成员职业规划和能力成长，给与指导和建议</p></li>
<li><p>关注团队成员工作状态</p></li>
<li><p>组织团建，提高团队凝聚力</p></li>
</ul>


<h2>管理仪表盘</h2>

<p>建立自己的管理仪表盘，关注关键数据</p>

<ul>
<li><p>系统监控数据（QPS、硬件资源使用率、错误数等） -> 提前发现系统瓶颈，消除隐患；提高资源利用率，降低成本</p></li>
<li><p>项目构建报告（单元测试覆盖率报告、代码质量报告、构建失败与成功概况） -> 关注项目研发质量，保障持续交付</p></li>
<li><p>项目/任务进度 -> 保证项目/任务正常进行</p></li>
<li><p>业务关键数据指标 -> 关注业务价值，提升团队成员成就感</p></li>
<li><p>OKR进度 -> 关注OKR实现状况，识别高绩效人员</p></li>
<li><p>团队成员的每日/周的工作状况 -> 关注团队成员状况</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《管理的常识》学习笔记]]></title>
    <link href="http://www.rowkey.me/blog/2019/12/20/manage-notes/"/>
    <updated>2019-12-20T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/12/20/manage-notes</id>
    <content type="html"><![CDATA[<blockquote><p>作者是陈春花教授，既是企业管理教授也有企业高管经历，是国内管理大师级的人物，写了非常多的管理著作，其公众号“春暖花开”会经常分享她对管理的一些思考，非常值得订阅。《管理的常识》此书主要讲了管理理论中的一些常识，包括了管理的概念、组织、组织结构、领导、激励、决策等。让自己印象深刻的包括管理最终只以成就做为衡量标准；职能部门是不能具有权利的；群体决策并不是最好的决策方式，而是风险较小的决策方式。推荐企业管理者阅读此书。</p></blockquote>

<p>今年随着公司人员规模的不断扩大，自己越发意识到了管理的重要性。尤其对于技术管理者来说，程序员的思维和管理者的思维有很多地方是截然不同的，如果不做好认知的改变和思维的转变，很容易用惯性思维来做事，那么一个非常优秀的研发工程师很可能会成为一个非常不合格的管理者。所以，自己一直在寻找管理的书籍、课程来学习。其中，《管理的常识》这本书是极客邦TGO寄来的礼物，仔细阅读了一下，还是有不少启发的。</p>

<!--more-->


<p>先给出自己笔记的思维导图，如下：</p>

<p><a href="http://www.rowkey.me/post_images/manage-notes.png" target="_blank"><img src="http://www.rowkey.me/post_images/manage-notes.png"/></a></p>

<p>其中让自己印象比较深刻的几点：</p>

<ul>
<li>管理最终只以成就做为衡量标准，需要知行合一</li>
<li>职能部门不能具有权利，因为其并不直接与业务相关</li>
<li>群体决策并不是最好的决策方式，而是风险较小的决策方式。当品质比成员接受程度高时，独断式决策；当接受程度比品质重要时，群体决策（共识）；品质和接受程度都高时，咨询式决策；品质和成员接受程度都不高时，哪个方便选择哪个</li>
</ul>


<p>&ndash;</p>

<p>书籍链接：<a href="https://book.douban.com/subject/26901342/">https://book.douban.com/subject/26901342/</a></p>

<p><img src="http://www.rowkey.me/post_images/manage.png" width="300"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理的一些要点]]></title>
    <link href="http://www.rowkey.me/blog/2018/07/28/manage-notes/"/>
    <updated>2018-07-28T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/07/28/manage-notes</id>
    <content type="html"><![CDATA[<p>去年以及今年由于工作需要，参加了公司请的美国管理协会的《高价值经理人》及敏捷OKR绩效管理的培训课程，此外也阅读了《格鲁夫给管理人的第一课》、《架构即未来》、《技术管理之巅》、《OKR：源于英特尔和谷歌的目标管理利器》几本书。总体来看很多管理的理论其实日常自己也在实践，不过这些书的确让自己形成了自己的管理体系，能够有序有法的进行一些管理实践。本文从通用管理和技术管理两部分总结其中最让自己感到受用的几点心得。</p>

<!--more-->


<h2>通用管理</h2>

<ul>
<li><p>管理是推，领导是拉，领导设定目的地和通往目的地的路线图，管理设法达到目的地。</p></li>
<li><p>有效的管理是在期望的时间以可能的最低成本完成期望的品质。</p></li>
<li><p>任何工作都有产出，需要设定好指标衡量产出。疏与度量注定事情永远不会改变。</p></li>
<li><p>在一件事情越早的环节发现问题那么解决问题的成本就越小。</p></li>
<li><p>作为管理人员，要去做高杠杆率的事情，比如传授技能、知识、价值观等。</p></li>
<li><p>会议分为两种：过程导向会议和任务导向性会议。前者是规律化的，是有必要的，可以选择效率高的方式；后者是临时的，需要尽量减少此种会议。</p></li>
<li><p>凡是有会议每个参会者都要有会议记录，可以防止开会的时候开小差。</p></li>
<li><p>全体会议一定要有一个主持者，避免陷入两人交谈。主持者最好是一个职位较高的人，可以避免同级全体综合征。</p></li>
<li><p>规律周期性的一对一沟通是非常有必要的，尤其是对于不喜欢主动沟通的属下。</p></li>
<li><p>需要建立有效沟通机制和处理问题的模式，如例会，避免下属缺乏反应问题的渠道而抱怨。</p></li>
<li><p>将员工可以划分为四象限，不同的人适用的管理方法是不一样的。对于第一象限的人，需要提供其更多的机会，做好适当的监督即可；对于第二象限的人需要给予工作上的指导，使其能够走到第一象限；对于第三象限的人，需要解决其心理问题；对于第四象限的人则需要谈话改进。</p>

<p>  <img src="//post_images/readiness.png" alt="" /></p>

<p>  总体来说，要做第一和第二象限的人。坚决杜绝成为第四象限的人。</p></li>
<li><p>需要根据工作成熟度的不同，适当的干涉下属工作，做好必要的监督。</p></li>
<li><p>可以把权利下放，但必须对其结果承担所有的责任。把赞扬留给团队，承认失败并公开的承担责任。</p></li>
<li><p>推行某种制度/规范的时候合理的做法是先降一个力度，等适应后再100%推行。</p></li>
<li><p>敏捷性组织有利于可扩展的组织架构。</p></li>
<li><p>亚马逊的两张比萨饼团队：任何一个团队的规模不能大过两张比萨所能喂饱的人数，超过则需要拆分。</p></li>
<li><p>AKA（All Know All Things）。要营造一种公开、公平的氛围，不搞遮遮掩掩的事情，让大家都知道所有的事情。</p></li>
<li><p>混血性组织（组织之间有人员交叉，在不同的组织中担任不同的角色）需要双重汇报。</p></li>
<li><p>决策权利不能仅仅靠职位决定，还需要考虑专业技能和知识。</p></li>
<li><p>使用KPI做绩效考核如果遇到诸如难以打分、沟通不畅、抱怨强制分配等问题可以采用OKR做考核管理。</p></li>
<li><p>借鉴Google，可以采取<strong>半年绩效考核（自评+他评）+OKR->总分</strong>的方式做考核。其中采取半年的节奏是一方面是为了和OKR季度回顾的频率错开，另一方面对于某个重大失误可以凭借后续的其他贡献做中和；自评是需要自己陈述考核周期内的工作，他评需要被考核人邀请和自己工作相关的n个人给自己打分/评价；OKR部分的最终得分只是作为参考；总分最后由直属Leader综合考虑几个方面打出。</p></li>
</ul>


<h2>技术管理</h2>

<ul>
<li><p>公司不同时期的重点技术工作</p>

<ul>
<li>初创期：开发产品原型，做技术储备</li>
<li>发展期：保障产品升级、制定技术服务体系，处理业务部门的需求和抱怨</li>
<li>成熟期：技术产品创新效率的提升</li>
</ul>
</li>
<li><p>布鲁克斯定律，研发者的生产力随着团队规模的增加而减少。努力的成本是团队规模的平方。so，技术团队的规模需要控制，人数过多的话需要考虑分拆。</p></li>
<li><p>技术需要与业务高度融合，需要培训懂业务的技术专家，切忌离开业务空谈技术。</p></li>
<li><p>十人以上技术团队可以采取轮岗来提高大家的技术热情和技术广度，但需要做好岗前培训，尤其对于技术门槛较高的岗位。</p></li>
<li><p>理解事故和问题的区别。事故需要立刻解决，而问题是要找到事故的原因。</p></li>
<li><p>以价值为导向，建立需求管理闭环，给业务需求方设定信用分，价值预估，上线后进行价值验证以判定价值达成率，从而直接影响信用分。</p></li>
<li><p>面试可以采取行为面试法，即给予实际案例看其解决问题的专业能力和思维能力。</p></li>
<li><p>技术团队超过300人需要建立职业发展体系、能力发展体系以及培训发展体系。</p></li>
<li><p>技术管理者需要发展三方面能力：专业能力、领导能力以通用能力（沟通能力、执行力、团队协作、责任心等）。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
