<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2019-06-13T07:05:40+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微服务杂谈]]></title>
    <link href="http://www.rowkey.me/blog/2019/05/30/msa/"/>
    <updated>2019-05-30T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/05/30/msa</id>
    <content type="html"><![CDATA[<p>这几年在Java工程师招聘时，会看到很多人的简历都写着使用了Spring Cloud做微服务实现，使用Docker做自动化部署，并且也会把这些做为自己的亮点。而比较有趣的这其中以小公司出来的人为绝大多数，大的公司出来的人简历上倒是很少提这些东西。</p>

<p>对于我自己来说，从15年就开始关注这一块，看过马丁.福勒最开始的关于微服务的论文、也看过不少对微服务的论证的英文文章和书，也研究过Spring Cloud、Sofa等开源实现以及Service mesh。考虑到我们公司研发团队人力不足、基础设施不完善，当初是没有推行微服务的。但随着看到上述的那种简历越来越多，有时候我也会疑问：难道真的不用微服务就落后了吗？公司的同事如果不掌握这些就真的没有竞争力了吗。而随着最近公司业务的逐步提升，研发人员越来越多，借着在梳理公司的微服务落地计划时，也梳理了一下微服务的相关知识点，也是本文的主要内容。</p>

<p>开篇之前先声明我对微服务的几点态度:</p>

<ol>
<li>架构模式有很多，微服务不是唯一的选择也不是什么银弹。国内绝大多数中小公司引入微服务都是在盲目追新，也能看出做此种技术选型的工程师基础架构素质的不足。</li>
<li>“你必须长的足够高才能使用微服务”。微服务基础设施，尤其是容器技术、自动化部署、自动化测试这些不完备，微服务形同虚设，不会带来什么质的提升。</li>
<li>微服务架构的关键不在于具体的实现，而在于如何合理地划分服务边界以及组织架构是否相匹配。不考虑研发团队的规模和组成就盲目上微服务是不良的技术选型。</li>
<li>Spring Boot是Spring全家桶的上层封装，并不是什么崭新的技术，也不是什么值得觉得成为自己杀手锏的技术。</li>
<li>Spring Cloud中Spring Cloud Netflix的组件是经过生产环境验证的，其他的则建议慎重选择。</li>
</ol>


<!--more-->


<h2>微服务是什么</h2>

<p>微服务起源于2005年Peter Rodgers博士在云端运算博览会提出的微Web服务(Micro-Web-Service)，根本思想类似于Unix的管道设计理念。2014年，由Martin Fowler 与 James Lewis共同提出了微服务的概念，定义了微服务架构风格是一种通过一套小型服务来开发单个应用的方法，每个服务运行在自己的进程中，并通过轻量级的机制进行通讯（HTTP API）。关键的三点是<strong>small、automated以及lightweight</strong>。</p>

<p>对比SOA，微服务可以看做是SOA的子集，是轻量级的SOA，粒度更细的服务，独立进程、数据分离，更注重<strong>敏捷、持续交付、DevOps以及去中心化实践</strong>。其共同的<strong>架构原理</strong>：</p>

<ul>
<li>单一职责</li>
<li>关注分离：控制与逻辑相分离</li>
<li>模块化和分而治之</li>
</ul>


<p><strong>特点</strong>：</p>

<ul>
<li>用服务进行组件化</li>
<li>围绕业务能力进行组织</li>
<li>是产品而非项目</li>
<li>端点智能化和哑管道: 控制逻辑都在端点，管道仅仅是传输</li>
<li>全自动化部署</li>
<li>语言和数据的去中心化控制</li>
<li>面向失败设计</li>
<li>渐进式设计</li>
</ul>


<p>综合来看，其优缺点如下：</p>

<p><strong>优点</strong>：</p>

<ul>
<li>模块的强边界</li>
<li>独立部署</li>
<li>技术选型的多样性</li>
</ul>


<p><strong>缺点</strong>：</p>

<ul>
<li>分布式带来编程复杂度，远程调用的消耗</li>
<li>舍弃强一致性，实现最终一致性</li>
<li>操作复杂性要求有一个成熟的运维团队或者运维基础设施</li>
</ul>


<h2>为什么要采用微服务</h2>

<p>是否选择微服务取决于你要设计的系统的复杂度。微服务是用来把控复杂系统的，但是随之而来的就是引入了微服务本身的复杂度。需要解决包括自动化部署、监控、容错处理、最终一致性等其他分布式系统面临的问题。即使已经有一些普遍使用的解决方案，但是仍然是有不小的成本的。</p>

<p><img src="http://www.rowkey.me/post_images/msa/productivity.png" alt="" /></p>

<p>生产力和复杂度的关系如图所示，可见系统越复杂，微服务带来的收益越大。此外，无论是单体应用还是微服务，团队的技能都需要能够把控住。</p>

<p>马丁.福勒的一个观点是：除非管理单体应用的成本已经太复杂了（太大导致很难修改和部署），否则都不要考虑微服务。大部分应用都应该选择单体架构，做好单体应用的模块化而不是拆分成服务。</p>

<p>因此，<strong>系统一开始采用单体架构，做好模块化，之后随着系统变得越来越复杂、模块/服务间的边界越来越清晰，再重构为微服务架构是一个合理的架构演化路径。</strong></p>

<p><strong>四个可以考虑上微服务的情况</strong>：</p>

<ol>
<li>多人开发一个模块/项目，提交代码频繁出现大量冲突。</li>
<li>模块间严重耦合，互相依赖，每次变动需要牵扯多个团队，单次上线需求太多，风险大。</li>
<li>主要业务和次要业务耦合，横向扩展流程复杂。</li>
<li>熔断降级全靠if-else。</li>
</ol>


<p><strong>微服务的三个阶段</strong>：</p>

<ol>
<li>微服务1.0：仅使用注册发现，基于SpringCloud或者Dubbo进行开发。</li>
<li>微服务2.0：使用了熔断、限流、降级等服务治理策略，并配备完整服务工具和平台。</li>
<li>微服务3.0：Service Mesh将服务治理作为通用组件，下沉到平台层实现，应用层仅仅关注业务逻辑，平台层可以根据业务监控自动调度和参数调整，实现AIOps和智能调度。</li>
</ol>


<h2>微服务架构</h2>

<h3>先决条件</h3>

<ul>
<li>快速的环境提供能力：依赖于云计算、容器技术，快速交付环境。</li>
<li>基本的监控能力：包括基础的技术监控和业务监控。</li>
<li>快速的应用部署能力：需要部署管道提供快速的部署能力。</li>
<li>Devops文化：需要具有良好的持续交付能力，包括全链路追踪、快速环境提供和部署等，还需要快速的反应能力（对问题、故障的快速响应），开发和运维的协同工作。</li>
</ul>


<p>此外，根据康威定律和逆康威定律（技术架构倒逼组织架构改进），组织架构也是一个很关键的因素。对应于微服务架构，组织架构需要遵循以下原则：</p>

<ol>
<li>一个微服务由一个团队维护，团队成员以三人为宜。</li>
<li>单个团队的任务和发展是独立的，不受其他因素影响。</li>
<li>团队是功能齐全、全栈、自治的，扁平、自我管理。</li>
</ol>


<h3>基础设施</h3>

<p>微服务的推行需要依赖于很多底层基础设施，包括提供微服务的编译、集成、打包、部署、配置等工作，采用PaaS平台解决微服务从开发到运行的全生命周期管理，同时提供异构环境管理、容器资源隔离与互通、服务伸缩漂移、服务升级与回退、服务熔断与降级、服务注册与发现。</p>

<ol>
<li><p>最基本的基础设施</p>

<ul>
<li>进程间通讯机制：微服务是独立进程的，需要确定之间的通讯方式。</li>
<li>服务发现+服务路由: 提供服务注册中心，服务提供者和消费者通过服务发现获取服务的信息从而调用服务，实现服务的负载均衡等。</li>
<li>服务容错：微服务架构中，由于服务非常多，往往是一个服务挂了，整个请求链路的服务都受到影响，因此需要服务容错，在服务调用失败的时候能够处理错误或者快速失败，包括熔断、fallback、重试、流控和服务隔离等。</li>
<li>分布式事务支持：随着业务拆分为服务，那么有时候不开避免的就是跨服务的事务，即分布式事务的问题。原则是尽量避免分布式事务，如果无法避免那么可以使用消息系统或者CQRS和Event Sourcing方案来实现最终一致性。如果需要强一致性，则有两阶段提交、三阶段提交、TCC等分布式事务解决方案。</li>
</ul>
</li>
<li><p>提升外部服务对接效率和内部开发效率</p>

<ul>
<li>API网关: 负责外部系统的访问，负责跨横切面的公共层面的工作，包括安全、日志、权限控制、传输加密、请求转发、流量控制等。典型的网关功能即对外暴露一个域名xx.com，根据第一级目录做反向路由xx.com/user，xx.com/trade。每一级目录，如user、trade对应一个服务的域名。此外，API网关也可以有服务编排的功能（不推荐）。</li>
<li>接口框架: 规范服务之间通讯使用的数据格式、解析包、自解释文档，便于服务使用方快速上手等。</li>
</ul>
</li>
<li><p>提升测试和运维效率</p>

<ul>
<li>配置中心: 运行时配置管理能够解决动态修改配置并批量生效的问题。包括配置版本管理、配置项管理、节点管理、配置同步等。</li>
<li>持续交付：包括持续集成、自动化部署等流程。目的就是小步迭代，快速交付。

<ul>
<li>持续集成：这一部分并非是微服务特定的，对于之前的单体应用，此部分一般来说也是必要的。主要是指通过自动化手段，持续地对代码进程编译构建、自动化测试，以得到快速有效的质量反馈，从而保证代码的顺利交付。自动化测试包括代码级别的单元测试、单个系统的集成测试、系统间的接口测试。</li>
<li>自动化部署：微服务架构，节点数动辄上百上千，自动化部署能够提高部署速度和部署频率，从而保证持续交付。包括版本管理、资源管理、部署操作、回滚操作等功能。而对于微服务的部署方式，包括<strong>蓝绿部署、滚动部署以及金丝雀部署</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><p>进一步提升运维效率</p>

<ul>
<li>服务监控: 微服务架构下节点数目众多，需要监控的机器、网络、进程、接口等的数量大大增加，需要一个强大的监控系统，能够提供实时搜集信息进行分析以及实时分析之上的预警。包括监控服务的<strong>请求次数、响应时间分布、最大/最小响应值、错误码分布</strong>等</li>
<li>服务跟踪：跟踪一个请求的完整路径，包括<strong>请求发起时间、响应时间、响应码、请求参数、返回结果</strong>等信息，也叫做全链路跟踪。通常的服务监控可以和服务监控做在一起，宏观信息由服务跟踪呈现，微观单个服务/节点的信息由服务监控呈现。服务跟踪目前的实现理论基本都是Google的Dapper论文。</li>
<li>服务安全：内网之间的微服务调用原则上讲应该是都可以互相访问写，一般并不需要权限控制，但有时候限于业务要求，会对接口、数据等方面有安全控制的要求。此部分可以以配置的方式存在于服务注册中心中，和服务绑定，在请求时由做为服务提供者的服务节点进行安全策略控制。配置则可以存储在配置中心以方便动态修改。</li>
</ul>
</li>
</ol>


<p>在微服务数量很少的情况下，以上基础设施的优先级自上而下降低。否则，仅仅依赖人工操作，则投入产出比会很低。</p>

<p>还需要提到的是Docker容器技术。虽然这个对于微服务并不是必须的，但是容器技术<strong>轻量级、灵活、与应用依存、屏蔽环境差异</strong>的特性对于持续交付的实现是至关重要的，即使对于传统的单体应用也能够给其带来交付效率的大幅提升。</p>

<h3>架构设计模式</h3>

<p>在引入微服务之后，传统的单体应用变为了一个一个服务，之前一个应用直接提供接口给客户端访问的架构不再适用。微服务架构下，针对不同设备的接口做为BFF层（Backend For Frontend），也叫做用户体验适配层，负责聚合、编排微服务的数据转换成前端需要的数据。服务之间的调用则在允许的情况下（允许延迟）尽可能使用异步消息传递方式，如此形成<strong>面向用户体验的微服务架构设计模式</strong>。如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/msa/msa-arch.png" alt="" /></p>

<p><strong>Client -> API Gateway -> BFF（Backend For Frontend） -> Downstream Microservices</strong></p>

<ul>
<li>后台采用微服务架构，微服务可以采用不同的编程语言和不同的存储机制。</li>
<li>前台采用BFF模式对不同的用户体验（如桌面浏览器，Native App，平板响应式Web）进行适配。</li>
<li>BFF、API Orchestration Layer，Edge Service Layer，Device Wrapper Layer是相同的概念。</li>
<li>BFF不能过多，过多会造成代码逻辑重复冗余。</li>
<li>可以将网关承担的功能，如Geoip、限流、安全认证等跨横切面功能和BFF做在同一层，虽然增加了BFF层的复杂性，但能够得到性能优势。</li>
</ul>


<h3>服务拆分</h3>

<p>微服务架构最核心的环节，主要是对服务的<strong>横向拆分</strong>。服务拆分就是讲一个完整的业务系统解耦为服务，<strong>服务需要职责单一，之间没有耦合关系，能够独立开发和维护</strong>。</p>

<p>服务拆分不是一蹴而就的，需要在开发过程中不断地理清边界。在完全理清服务之前，尽量推迟对服务的拆分，尤其是对数据库的拆分。</p>

<p><strong>拆分方法</strong>如下：</p>

<ul>
<li>基于业务逻辑拆分</li>
<li>基于可扩展拆分</li>
<li>基于可靠性拆分</li>
<li>基于性能拆分</li>
</ul>


<p>其中，对于无法修改的遗留系统，采用绞杀者模式：在遗留系统外面增加新的功能做成微服务方式，而不是直接修改原有系统，逐步的实现对老系统替换。</p>

<p><strong>拆分过程需要遵守的规范</strong>如下：</p>

<ul>
<li>先少后多、先粗后细（粒度）</li>
<li>服务纵向拆分最多三层，两次调用：Controller、组合服务、基础服务</li>
<li>仅仅单向调用，禁止循环调用</li>
<li>串行调用改为并行调用或者异步化</li>
<li>接口应该幂等</li>
<li>接口数据定义严禁内嵌，透传</li>
<li>规范化工程名</li>
<li>先拆分服务，等服务粒度确定后再拆分数据库。</li>
</ul>


<h3>微服务框架</h3>

<p>上面讲述了微服务架构的众多基础设施，如果每一个基础设施都需要自己开发的话是非常巨大的开发工作。目前市面上已经有不少开源的微服务框架可以选择。</p>

<ol>
<li><p>Spring Boot</p>

<p> Spring Boot是用来简化新Spring应用的初始搭建以及开发过程的。其虽然不是微服务框架，但其设计的初衷本质就是微应用的底层框架，因此非常适合用于微服务基础设施的开发以及微服务的应用开发。尤其对于Spring技术栈的团队来说，基于Spring Boot开发微服务框架和应用是自然而然的一个选择。</p></li>
<li><p>Dubbo&amp;&amp;Motan</p>

<p> Dubbo阿里开源的服务治理框架。其出现在微服务理念兴起之前，可以看做是SOA框架的集大成之作。但其仅仅包含了微服务基础设施的部分功能，诸如熔断、服务跟踪、网关等都没有实现。</p>

<ul>
<li>服务发现 ：服务发布、订阅、通知</li>
<li>高可用策略 ：失败重试（Failover）、快速失败（Failfast）、资源隔离 - 负载均衡 ：最少活跃连接、一致性 Hash、随机请求、轮询等</li>
<li>扩展性 ：支持 SPI 扩展（service provider interface）</li>
<li>其他 ：调用统计、访问日志等</li>
</ul>


<p>Motan则是微博开源的类似Dubbo的RPC框架，与Dubbo相比更轻量级。</p></li>
<li><p>Spring Cloud</p>

<p> Spring Cloud是基于Spring Boot实现的微服务框架，也可以看做一套微服务实现规范。基本涵盖了微服务基础设施的方方面面，包括配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等。其基于Spring生态，社区支持非常好。但其很多组件都没有经过生产环境验证，需要慎重选择。</p>

<p> Spring Cloud Netflix是Spring Cloud的一个子项目，是Spring对Netflix OSS的集成实现。基于Netflix的大规模使用，其中的已经被广泛使用的组件包括：</p>

<ul>
<li>Eureka： 服务注册和服务发现</li>
<li>Ribbon：弹性而智能的进程间和服务通讯机制，客户端负载均衡</li>
<li>Hystrix： 熔断器，在运行时提供延迟和容错的隔离</li>
<li>Zuul: 服务网关</li>
</ul>


<p>此外，另一个子项目Spring Cloud Alibaba则是Alibaba开源的基于Spring Boot的微服务框架，主要是对阿里云服务的支持。</p></li>
<li><p>Service Mesh</p>

<p> 上述的微服务框架都是侵入式的，服务化的过程都需要进行代码改造。Service Mesh则是下一代微服务架构，最明显的特征就是无入侵。采用sidecar模式来解决系统架构微服务化后的服务间通信和治理问题。如下如所示：</p>

<p> <img src="http://www.rowkey.me/post_images/msa/sm.png" alt="" /></p>

<p> 目前主流的开源实现包括：</p>

<ul>
<li>Linkerd和Envoy：以 sidecar 为核心，关注如何做好proxy，并完成一些通用控制平面的功能。缺乏对这些sidecar的管理和控制。</li>
<li>Istio和Conduit：目前最为流行的Service Mesh实现方案，集中在更加强大的控制平面(sidecar被称为数据平面)功能。前者由Google和IBM合作，并使用了Envoy作为sidecar部分的实现；后者则是Linkerd作者的作品。相比起来，Istio有巨头背景，功能强大，但可用性和易用性一直不高，Conduit则相对简单、功能聚焦。</li>
</ul>


<p>限于Service Mesh带来的性能延迟的开销以及sidecar对分布复杂性的增加，其对大规模部署(微服务数目多)、异构复杂(交互协议/开发语言类型多)的微服务架构带来的收益会更大。</p></li>
<li><p>Sofastack</p>

<p> 蚂蚁金服开源的构建金融级分布式架构的一套中间件。包括微服务开发框架、RPC框架、服务注册中心、全链路追踪、服务监控、Service Mesh等一整套分布式应用开发工具。</p>

<p> 特别值得一提的是SOFAMesh。其实对下一代微服务架构Service Mesh的大规模落地方案实践，基于 Istio改进和扩展而来，应该是国内最为成熟的开源Service Mesh方案。</p></li>
</ol>


<p>此外，需要提到<strong>Kubernetes(K8s)</strong>，其本身提供了部分的微服务特性支持（通过域名做服务发现），对代码无侵入。但服务调用、熔断这些都需要自己实现。</p>

<p>综上，目前公司技术团队技术栈是Spring，并且已有服务的实现都是基于Dubbo，因此选择Spring Cloud Netflix做为基础的微服务框架，对其中不成熟或者缺乏的组件，选择业界更为成熟的组件替代即可。</p>

<p><img src="http://www.rowkey.me/post_images/msa/msa-basic.png" alt="" /></p>

<ul>
<li>API网关：Zuul</li>
<li>服务注册中心：Dubbo</li>
<li>配置中心：disconf</li>
<li>服务监控&amp;&amp;全链路追踪：CAT</li>
<li>服务开发框架：Spring Boot</li>
<li>日志监控、告警：ELK + Elasalert</li>
<li>流量控制：Sentinel</li>
<li>消息队列：Kafka</li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.ben-morris.com/whats-so-bad-about-monoliths-anyway/">What’s so bad about monoliths anyway…?!</a></li>
<li><a href="https://martinfowler.com/articles/microservices.html">Microservice</a></li>
<li><a href="https://martinfowler.com/bliki/MicroservicePremium.html">MicroservicePremium</a></li>
<li><a href="https://martinfowler.com/articles/microservice-trade-offs.html">Microservice Trade-Offs</a></li>
<li><a href="https://martinfowler.com/bliki/MicroservicePrerequisites.html">MicroservicePrerequisites</a></li>
<li><a href="https://martinfowler.com/bliki/MonolithFirst.html">MonolithFirst</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI2MzM3MzkyMg==&amp;mid=2247486544&amp;idx=1&amp;sn=999be8b4f06150b96d9a46ada6bb9ded&amp;chksm=eabd995dddca104bd3c6262d491572f7be9b2a763a43a388f66bd0e90e4bd60e5037727107e4&amp;mpshare=1&amp;scene=1&amp;srcid=0201lT7ZBVBGmTki8bYnmDgl%23rd">服务怎么拆？</a></li>
<li><a href="https://www.thoughtworks.com/insights/blog/bff-soundcloud">BFF@SoundCloud</a></li>
<li><a href="http://www.importnew.com/28798.html">Service Mesh 及其主流开源实现解析</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这些知识决定了程序员的上限（PPT版）]]></title>
    <link href="http://www.rowkey.me/blog/2019/04/22/upforprogrammer/"/>
    <updated>2019-04-22T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/04/22/upforprogrammer</id>
    <content type="html"><![CDATA[<p>讲述决定程序员上限的一些知识技能点，包括如何学习、如何阅读源码、计算机科学基础知识体系等。来自内部分享PPT，后续会发布<strong>详细版</strong>。</p>

<!--more-->


<h2>什么是程序员？</h2>

<ul>
<li>码农、程序猿、程序媛</li>
<li>使用<strong>程序</strong>实现价值</li>
<li>程序=数据+算法</li>
<li>软件=程序+软件工程</li>
<li>程序员=工程师？</li>
</ul>


<h2>程序员金字塔</h2>

<p><img src="http://www.rowkey.me/post_images/ufp/programmer-pyramid.png" width="500"/></p>

<h2>程序员知识结构</h2>

<p><img src="http://www.rowkey.me/post_images/ufp/knowledge.png" alt="" /></p>

<ul>
<li>面试造火箭，工作打蚊子</li>
<li>会什么是你的下限，能够会什么是你的上限</li>
<li>越底层的东西越决定上限</li>
</ul>


<h2>学习欲望</h2>

<blockquote><p>杜绝<strong>1</strong>年工作经验重复<strong>N</strong>年</p></blockquote>

<ul>
<li>如果自己遇到这种问题会怎么解决，与资料中的解决方案相比优劣如何？</li>
<li>别人为什么会想到这种解决方案？</li>
<li>自己是由于经验欠缺还是技能点欠缺才导致没有想到好的解决方案？</li>
<li>解决这类问题的根本思路是什么样的？</li>
</ul>


<h2>学习能力</h2>

<blockquote><p>不是懂得多，而是学得快</p></blockquote>

<ul>
<li><strong>知其然更要知其所以然</strong>：技术以深度优先</li>
<li><strong>类比现实</strong>：对现实世界的模拟</li>
<li><strong>更好地接受信息</strong>：建立自己的知识体系；阅读并记笔记，纳入知识体系</li>
<li><strong>深度思考</strong>：阅读书籍</li>
<li><strong>动手实践、频繁练习</strong>：项目驱动型学习；主动思考</li>
<li><strong>自我总结</strong>：完善知识体系；笔记、博客、分享</li>
<li><strong>持续学习</strong>：逃离舒适区；学到老，活到老</li>
</ul>


<h2>如何学习新技术</h2>

<p><img src="http://www.rowkey.me/post_images/ufp/study-new-tech.png" width="500"/></p>

<h2>如何阅读源码</h2>

<ol>
<li>阅读该技术的架构文档，了解其总体架构和组成</li>
<li>根据总体架构，将源码文件以模块或者上下层级进行分类。</li>
<li>从未阅读过的模块中选择最独立（依赖性最小）的模块代码读起。</li>
<li>阅读此模块的功能介绍文档。</li>
<li>阅读此模块的源代码：<strong>运行程序，断点调试</strong>。</li>
<li>一边阅读一边整理调用关系图。</li>
<li>转到第三步。</li>
</ol>


<blockquote><p>参考<strong>官方文档或者经典书籍</strong></p></blockquote>

<h2>计算机思维</h2>

<ul>
<li><strong>冯.诺依曼体系</strong>：程序存储，顺序执行。</li>
<li><strong>二进制存储</strong>：用比特解决问题</li>
<li><strong>位运算</strong>：位运算的高效</li>
<li><strong>逻辑分支</strong>：条件判断、循环、迭代、递归</li>
</ul>


<h2>个人规划</h2>

<ul>
<li><strong>长期规划</strong>：职业规划；高瞻远瞩</li>
<li><strong>短期规划</strong>：具体技能、晋升、学习方面的规划；优先级排序</li>
</ul>


<h2>基础学科</h2>

<ul>
<li><strong>物理</strong>：电路原理；量子计算机</li>
<li><strong>数学</strong>：工程优化；线性代数；微积分</li>
<li><strong>英语！！</strong>：阅读英文文献；计算机术语</li>
</ul>


<h2>计算机组成原理</h2>

<blockquote><p>计算机的硬件组成和运行原理</p></blockquote>

<ul>
<li><strong>冯诺依曼体系</strong>、<strong>摩尔定律</strong>、<strong>阿曼达定律</strong></li>
<li><strong>数据的机器表示</strong>：原码、补码、反码、浮点数/定点数</li>
<li><strong>指令系统</strong>：复杂指令集、简单指令集</li>
<li><strong>存储器</strong>：分类、缓存</li>
<li><strong>CPU</strong>: 流水线、伪共享、缓存</li>
<li><strong>IO设备</strong>：IO总线、DMA、中断</li>
</ul>


<h2>计算机操作系统</h2>

<blockquote><p>屏蔽计算机硬件的中间层</p></blockquote>

<ul>
<li><strong>作业调度</strong>: 调度策略、优先级</li>
<li><strong>进程管理</strong>：进程和线程、进程间通信</li>
<li><strong>存储管理</strong>：内存、虚拟内存、文件系统、页、页缓存</li>
<li><strong>IO管理</strong>：IO设备读写操作</li>
<li>Linux操作系统</li>
</ul>


<h2>计算机网络</h2>

<blockquote><p>单个计算机之间的互连</p></blockquote>

<ul>
<li><strong>TCP/IP协议栈</strong>：四层/七层</li>
<li>TCP连接状态</li>
<li>TCP与UDP的区别</li>
<li>HTTP协议、RESTful规范</li>
<li>网络安全</li>
<li><strong>下一代互联网</strong>：IPv6、物联网、5G</li>
</ul>


<h2>编译原理</h2>

<blockquote><p>将代码转换成机器可理解的二进制，有助于实现DSL</p></blockquote>

<ul>
<li>词法分析、语法分析</li>
<li>类型检查</li>
<li>运行时环境、中间代码</li>
<li>代码生成、代码优化</li>
</ul>


<h2>数据结构和算法</h2>

<blockquote><p>程序=数据+算法</p></blockquote>

<ul>
<li><strong>基本数据结构</strong>：数组、链表、栈、队列、哈希表</li>
<li><strong>最大堆、最小堆</strong>：TopN问题</li>
<li><strong>树</strong>：平衡二叉树、B树、B+树、红黑树</li>
<li><strong>跳跃表</strong>: 简单可实现</li>
<li><strong>经典排序算法</strong>：快速排序、归并排序、插入排序、冒泡排序</li>
<li><strong>经典查找算法</strong>：顺序查找、二分查找</li>
<li><strong>高级算法</strong>：贪心、分治、回溯、动态规划</li>
<li><strong>大数据处理</strong>：Bitmap、Bloomfilter、Hyperloglog、MapReduce、MPP</li>
</ul>


<h2>设计模式</h2>

<blockquote><p>软件可复用、可扩展、可维护。善用而不滥用。</p></blockquote>

<ul>
<li><strong>面向对象SOLID设计原则</strong>：单一职责、开闭原则、里氏代换、接口隔离、依赖倒转</li>
<li><strong>常用设计模式</strong>：单例模式、工厂模式、代理模式、适配器模式、观察者模式</li>
<li><strong>常用框架中的设计模式</strong>：Spring</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术 in Netflix]]></title>
    <link href="http://www.rowkey.me/blog/2019/04/13/netflix/"/>
    <updated>2019-04-13T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/04/13/netflix</id>
    <content type="html"><![CDATA[<p>综合市面上的公开资料总结了Netflix在技术上面的一些实践和创新，从中能够得到不少启发和提示。</p>

<p><strong>来自公司内部分享</strong></p>

<!--more-->


<p><img src="http://www.rowkey.me/post_images/netflix/arch-2.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-3.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-4.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-5.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-6.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-7.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-8.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-9.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-10.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-11.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-12.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-13.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-14.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-15.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-16.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-17.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-18.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-19.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/netflix/arch-20.jpeg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术面试的应该与不应该]]></title>
    <link href="http://www.rowkey.me/blog/2019/03/08/interview-basic/"/>
    <updated>2019-03-08T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/03/08/interview-basic</id>
    <content type="html"><![CDATA[<p>进入软件开发这个行业差不多10年，做为候选人被面试过，也做为面试官面试过别人。这几年做为后者的角色越来越多，慢慢总结出来了一些技术面试的原则，也是自己在实践的一些原则。</p>

<!--more-->


<h3>Should</h3>

<ul>
<li>让候选人介绍自己拿手的项目或者模块，考察其问题描述能力、沟通能力。</li>
<li>根据简历上写的的项目经验，考察候选人对用过的东西有没有消化、掌握的深度，判断其是否是一个善于思考、主动学习的人。</li>
<li>计算机科学基础知识，考察候选人的计算机基本功，能达到的上限有多高。尤其是对于实习生或者应届生来说是最最重要的一点。社招可以适当放宽要求，但起码要对常用的计算机基础知识有大概的印象。</li>
<li>实际工作中需要的知识，考察候选人能否胜任职位要求的工作。</li>
<li>开放性问题（算法或者实际场景下的问题，是候选人没有接触过或者接触不深的）考察候选人是否聪明，思路是否活跃。</li>
<li>问候选人觉得自己相比其他人的优点是什么，具体的实例。可以基于这个优点出一些题目。从而考察候选人对自己是否有明确的自我认知。</li>
</ul>


<h3>Shouldn&rsquo;t</h3>

<ul>
<li>不要抱着证明自己比候选人强的心理进行面试。包括一直试图找候选人的缺点、问自己拿手的而候选人没有接触过或者接触很浅的点（除非是职位的关键技能点）。面试的目的是看候选人是否能够胜任职位，而不是挑剔候选人。</li>
<li>不要问候选人没有接触过的RTFM问题。这类问题，查阅手册/文档就能知晓，并不是什么核心竞争力。</li>
<li>不要问脑筋急转弯式的问题。</li>
<li>不要太看重面试人已经会的，多看一下候选人的基础素质、学习能力、学习欲望、上进心等决定上限的点。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[缓存这些事]]></title>
    <link href="http://www.rowkey.me/blog/2019/02/25/cache/"/>
    <updated>2019-02-25T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/02/25/cache</id>
    <content type="html"><![CDATA[<p><strong>最新版本可见:<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter5-datastore/cache.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter5-datastore/cache.md</a></strong></p>

<p>缓存是为了弥补持久化存储服务如数据库的性能缓慢而出现的一种将数据存储在内存中，从而大大提高应用性能的服务。如缓存五分钟法则所讲：如果一个数据频繁被访问，那么就应该放内存中。这里的缓存就是一种读写效率都非常高的存储方案，能够应对高并发的访问请求，通常情况下也不需要持久化的保证。但相对其他存储来说，缓存一般是基于内存的，成本比较昂贵，因此不能滥用。</p>

<p>缓存可以分为：本地缓存和分布式缓存。</p>

<!--more-->


<h2>本地缓存</h2>

<p>本地缓存指的是内存中的缓存机制，适用于尺寸较小、高频的读取操作、变更操作较少的存储场景。在Java开发中常用的本地缓存实现有：</p>

<ol>
<li><p>ConcurrentHashMap</p>

<p> 这是JDK自带的线程安全map实现，适合用户全局缓存。其get、put的操作比较简单，不用赘述。如果想要实现缓存的失效、淘汰策略则需要自定义实现。</p></li>
<li><p>LinkedHashMap</p>

<p> LinkedHashMap也是JDK的实现。其简单的用途是一个可以保持插入或者访问顺序的HashMap，但其实其配置好是可以当做LRU cache的。这里的LRU即least recently used, 指的是固定容量的缓存，当缓存满的时候，优先淘汰的是最近未被访问的数据。</p>

<pre><code class="`"> int cacheSize = 1000; //最大缓存1000个元素

 LinkedHashMap cache = new LinkedHashMap&lt;String, String&gt;(16, 0.75f, true) {
     @Override
     protected boolean removeEldestEntry(Map.Entry&lt;String, String&gt; eldest) {
         return size() &gt; cacheSize;
     }
 };
</code></pre>

<p> 需要注意的是，LinkedHashMap是非线程安全的，如果是全局使用，需要做并发控制。</p></li>
<li><p>Guava Cache</p>

<p> Guava Cache来自于Google开源的Guava类库中，是一个实现的比较完全的本地缓存，包括缓存失效、LRU都做了支持。</p>

<pre><code class="`"> final int MAX_ENTRIES = 1000; //最大元素数目
 LoadingCache&lt;String, String&gt; cache = CacheBuilder.newBuilder()
     .maximumSize(MAX_ENTRIES)
     .concurrencyLevel(Runtime.getRuntime().availableProcessors())//并行度
     .expireAfterWrite(2, TimeUnit.SECONDS) //写入2秒后失效
     .build(new CacheLoader&lt;String, String&gt;() { 
         @Override
         public String load(String key) throws Exception {
             return ...;//异步加载数据到缓存
         }

         @Override
         public ListenableFuture&lt;String&gt; reload(String key, String oldValue) throws Exception {
             return ...;
         }
     }); 

 //Using the cache
 String value= cache.getUnchecked("testKey");
</code></pre>

<p> 上面的load方法是第一次加载对应的key的缓存时调用的方法,重载此方法可以实现单一线程回源，而reload方法的重载，则可以在后台定时刷新数据的过程中，依然使用旧数据响应请求，不会造成卡顿，这里默认的实现是load方法的代理，是同步的，建议重新用异步方式实现。此外，里面并行度指的是允许并行修改的线程数，此值建议根据当前机器的CPU核数来设置。</p>

<p> 上述的例子中使用了基于maximumSize和基于时间expireAfterWrite的缓存剔除，除此之外，还可以通过：</p>

<ol>
<li><p>基于权重的缓存剔除</p>

<pre><code class="`"> CacheBuilder.newBuilder()
     .maximumWeight(10000)             
     .weigher(new Weigher&lt;String, Object&gt;() {  
         @Override  
         public int weigh(String key, Object value) {  
             return key.length();  
         }  
     })
     .build();
</code></pre>

<p> 这样当cache中put一个key时，都会计算它的weight值并累加，当达到maximumWeight阀值时，会触发剔除操作。</p></li>
<li><p>制定key和value使用的引用类型来做缓存剔除</p>

<pre><code class="`"> CacheBuilder.newBuilder().weakKeys();
 CacheBuilder.newBuilder().weakValues();
 CacheBuilder.newBuilder().softValues();
</code></pre></li>
</ol>


<p> 还需要指明的一点是，Guava Cache中的缓存失效并非立即生效的，通常是延迟的, 在各种写入数据时都去检查并cleanUp。</p>

<p> 此外，Guava Cache还提供了asMap视图，可以获取保存数据使用的ConcurrentMap形式。使用此视图时需要注意读写操作会重置相关缓存项的访问时间，包括asMap().get()方法和Cache.asMap().put()方法，但asMap().containsKey()方法和遍历asMap().entrySet()除外。</p>

<p> 这里还需要提到的一点是，缓存框架Caffeine使用Java8对Guava进行了重写，包括驱逐策略、过期策略和并发机制，使得缓存性能得到了显著提升，并且使用上可以兼容Guava的API。如果是在Java8上的开发，推荐直接使用Caffeine作为本地缓存实现。</p>

<pre><code class="`"> LoadingCache&lt;String, String&gt; cache = CaffeinatedGuava.build(
            Caffeine.newBuilder().maximumSize(MAX_ENTRIES),
            new CacheLoader&lt;String, String&gt;() { // Guava's CacheLoader
                @Override
                public String load(String key) throws Exception {
                    return "";
                }
            });
</code></pre></li>
<li><p>Ehcache</p>

<p> Ehcache是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider，使用比较广泛，支持多级存储，可以将数据存储到磁盘上。其最新版本为3.x，但使用不多，且兼容性也不好，推荐使用其2.x版本即可。</p></li>
</ol>


<h2>分布式缓存</h2>

<p>分布式缓存指的是单独的缓存服务，独立部署，通过协议、接口等提供缓存服务。相比起本地缓存，能够支持更大的容量。</p>

<p>几年前最流行的分布式缓存软件是Memcached，但其支持的数据结构太少，现在已经基本被Redis所取代。Redis能够支持丰富的数据结构，基于事件驱动的单线程非阻塞IO也能够应对高并发的业务场景。这里主要针对Redis来讲述，Redis版本为3.2.10。</p>

<p>Redis是非常强大的，既可以作为数据库又可以作为缓存，还能当做队列。总体概括来讲，其有以下用途：</p>

<ol>
<li>最简单的String,可以作为Memcached的替代品，用作缓存系统。</li>
<li>使用SetNx可以实现简单的分布式锁(如果需要对锁设置失效期，建议使用SET key value [EX|PX] NX xx命令以保证原子性),也可参考Redis作者的RedLock算法实现分布式锁（<a href="http://redis.cn/topics/distlock.html%EF%BC%89%E3%80%82">http://redis.cn/topics/distlock.html%EF%BC%89%E3%80%82</a></li>
<li>使用List的pop和push功能可以作为阻塞队列/非阻塞队列。</li>
<li>使用SUBSCRIBE和PUBLISH可以实现发布订阅模型。</li>
<li>对数据进行实时分析，如可以累加统计等。</li>
<li>使用Set做去重的计数统计。</li>
<li>使用SortedSet可以做排行榜等排序场景。</li>
<li>使用getbit、setbit、bitcount做大数据量的去重统计，允许误差的情况下可使用HyperLogLog。</li>
<li>使用GEO可以实现位置定位、附近的人。</li>
</ol>


<p>以上场景基本上涵盖了Redis支持的各种存储结构：</p>

<ul>
<li>Key: 可以是任意类型，但最终都会存储为byte[]。</li>
<li>String: 简单的(key,value)存储结构，支持数据的自增、支持BitSet结构。</li>
<li>Hash：哈希表数据结构，支持对field的自增等操作。</li>
<li>List：列表，支持按照索引、索引范围获取元素以及pop、push等堆栈操作。</li>
<li>Set：集合，去重的列表。</li>
<li>SortedSet：有序集合。</li>
<li>HyperLogLog：可对大数据进行去重，有一定的误差率。</li>
<li>GEO：地理位置的存储结构，支持GEOHASH。</li>
</ul>


<h3>内存压缩</h3>

<p>Redis的存储是以内存为主的，因此如何节省内存是使用的时候一个非常关键的地方。毕竟一个String类型的存储即使key和value是简单的1字节，其占用空间也达到了差不多64字节（估算近似值，包括了dictEntry、redisObject、key、value以及内存对齐等）。</p>

<p>首先，key越短越好，可以采取编码或者简写的方式。如用户的笔记数目缓存key可以使用u:{uid}:n_count作为Key。同时,key的数量也要控制，可以考虑使用hash做二级存储来合并类似的key从而减少key的数量。</p>

<p>其次，value也是越小越好，尤其是存储序列化后的字节时，要选择最节省内存的序列化方式, 如Kryo、Protobuf等。</p>

<p>此外，Redis支持的数据结构的底层实现会对内存使用有很大的影响，如：缓存用户的头像时，可以根据用户ID做分段存储，每一段使用hash结构进行存储:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//第一段 1-999
</span><span class='line'>hset u:avatar:1 1 http://xxxx
</span><span class='line'>hset u:avatar:1 2 http://xxxx
</span><span class='line'>
</span><span class='line'>//第二段 1000-1999
</span><span class='line'>hset u:avatar:2 1000 http://xxxx
</span><span class='line'>hset u:avatar:2 1999 http://xxxx</span></code></pre></td></tr></table></div></figure>


<p>这样，相比起使用String存储，hash底层会使用ziplist做存储，极大地节省内存使用。但这里需要注意的是Redis有一个hash-max-ziplist-entries的参数，默认是512，如果hash中的field数目超过此值，那么hash将不再使用ziplist存储，开始使用hashtable。但是，此值设置过大，那么在查询的时候就会变慢。从实践来看，此值设置为1000，hash分段大小也为1000，此时的修改和查询性能最佳。此外，还有一个hash-max-ziplist-value参数，默认是64字节，value的最大字符串字节大小如果大于此值，那么则不会使用ziplist。</p>

<p>除了hash之外，其他数据结构也有类似的内存编码变化，使用的时候也需要注意。如下所示：</p>

<table>
<thead>
<tr>
<th>数据结构 </th>
<th> 编码 </th>
<th> 条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>hash</td>
<td> ziplist</td>
<td> 最大value大小 &lt;= hash-max-ziplist-value &amp;&amp; field个数 &lt;= hash-max-ziplist-entries</td>
</tr>
<tr>
<td>hash</td>
<td> hashtable </td>
<td> 最大value大小 > hash-max-ziplist-value || field个数 > hash-max-ziplist-entries</td>
</tr>
<tr>
<td>list</td>
<td> ziplist</td>
<td> 最大value大小 &lt;= list-max-ziplist-value &amp;&amp; field个数 &lt;= list-max-ziplist-entries</td>
</tr>
<tr>
<td>list</td>
<td> linkedlist</td>
<td> 最大value大小 > list-max-ziplist-value || 列表长度 > list-max-ziplist-entries</td>
</tr>
<tr>
<td>set</td>
<td> intset</td>
<td> 元素都为整数 &amp;&amp; 集合长度 &lt;= set-max-intset-entries</td>
</tr>
<tr>
<td>set</td>
<td> hashtable</td>
<td> 元素非整数类型 || 集合长度 > set-max-intset-entries</td>
</tr>
<tr>
<td>sortedSet </td>
<td> ziplist</td>
<td> 最大value大小 &lt;= zset-max-ziplist-value &amp;&amp; 集合长度 &lt;= zset-max-ziplist-entries</td>
</tr>
<tr>
<td>sortedSet </td>
<td> skiplist </td>
<td> 最大value大小 > zset-max-ziplist-value || 集合长度 > zset-max-ziplist-entries</td>
</tr>
</tbody>
</table>


<p>此外，对于list来说，Redis 3.2使用了新的数据结构quicklist来编码实现，废弃了list-max-ziplist-value和list-max-ziplist-entries配置，使用list-max-ziplist-size（负数表示最大占用空间或者正数表示最大压缩长度）和list-compress-depth（最大压缩深度）这俩参数进行配置。</p>

<p>还有一点需要注意的是内存碎片，所谓内存碎片指的是小的非连续的内存，这种内存无法得到充分使用，会造成浪费。我们可以通过info命令获取mem_fragmentation_ratio（used_memory_rss/used_memory）此值来观察内存碎片的程度。</p>

<ul>
<li>此值通常在1左右，越大表示表示存在（内部或外部的）内存碎片。</li>
<li>小于1时表示Redis的部分内存被换出到了交换空间，会降低操作性能。</li>
</ul>


<h3>Redis Lua</h3>

<p>一般情况下，Redis提供的各种操作命令已经能够满足我们的需求。如果需要一次将多个操作请求发送到服务端，可以通过Jedis客户端的pipeline接口批量执行。但如果有以下三种需求，就需要使用Redis Lua：</p>

<ul>
<li>需要保证这些命令做为一个整体的原子性。</li>
<li>这些命令之间有依赖关系、</li>
<li>业务逻辑除了Redis操作还包括其他逻辑运算。</li>
</ul>


<p>Redis从2.6后内置对Lua Script的支持，通过eval或者evalsha执行Lua脚本。其脚本的执行具有原子性，因此适用于秒杀、签到等需要并发互斥且有一些业务逻辑的业务场景。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String REDIS_SCRIPT_GRAB_GIFT =
</span><span class='line'>            "local giftLeft = tonumber(redis.call('get',KEYS[1])) or 0;" //读取礼物剩余数量
</span><span class='line'>                    + "if(giftLeft &lt;= 0) then return 0; end;" //抢购失败
</span><span class='line'>                    + "redis.call('decr',KEYS[1]);" //减少礼物数量
</span><span class='line'>                    + "return 1;";
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>Object grabResutl = jedis.eval(REDIS_SCRIPT_GRAB_GIFT, Lists.newArrayList("test:gifts:" + giftId + ":left"),null);
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>使用Redis Lua需要注意的是：</p>

<ul>
<li>Lua脚本里涉及的所有key尽量用变量，从外面传入，使Redis一开始就知道你要改变哪些key，尤其是在使用redis集群的时候。</li>
<li>建议先用SCRIPT LOAD载入script，返回哈希值。然后用EVALHASH执行脚本，可以节省脚本传输的成本。</li>
<li>如果想从Lua返回一个浮点数，应该将它作为一个字符串（比如ZSCORE命令）。因为Lua中整数和浮点数之间没有什么区别，在返回浮点数据类型时会转换为整数。</li>
</ul>


<h3>数据失效和淘汰</h3>

<p>如果某些数据并不需要永远存在，可以通过Expire设置其失效时间，让其在这段时间后被删除。这里设置了失效时间之后可以通过SET 和 GETSET 命令覆写失效期或者使用PERSIST去掉失效期。需要注意的是如果一个命令只是更新一个带生存时间的 key 的值而不是用一个新的 key 值来代替它的话，那么生存时间不会被改变。如INCR、DECR、LPUSH、HSET等命令就不改变key的失效时间。此外，设置了失效期的key其ttl是大于0的，直至被删除会变为-2, 未设置失效期的key其ttl为-1。</p>

<p>和大部分缓存一样，过期数据并非立即被删除的。在Redis中，其采取的方式如下：</p>

<ul>
<li>消极方法：主动get或set时触发失效删除</li>
<li>积极方法：后台线程周期性（每100ms一次）随机选取100个设置了有效期的key进行失效删除，如果有1/4的key失效，那么立即再选取100个设置了有效期的key进行失效删除。</li>
</ul>


<p>这里需要注意的是当使用主从模式时，删除操作只在Master端做，在Slave端做是无效的。</p>

<p>此外，当对Redis设置了最大内存maxmemory, 那么当内存使用达到maxmemory后，会触发缓存淘汰。Redis支持以下几种淘汰策略：</p>

<ul>
<li>volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰。</li>
<li>volatile-ttl：从已设置过期时间的数据集中挑选将要过期的数据淘汰。</li>
<li>volatile-random：从已设置过期时间的数据集中任意选择数据淘汰。</li>
<li>allkeys-lru：从数据集中挑选最近最少使用的数据淘汰。</li>
<li>allkeys-random：从数据集中任意选择数据淘汰。</li>
<li>noeviction：禁止驱逐数据。</li>
</ul>


<p>其中，volatile-lru是3.0版本之前的默认淘汰策略，之后的版本默认策略改成了noeviction。</p>

<p>为了配合LRU的淘汰策略，Redis的内部数据结构中有一个lru字段记录了对象最后一次被访问的时间。可以通过object idletime [key]来在不更新lru字段的情况下查看相应key的空闲时间。进一步的可以结合使用scan+object idletile [key]来查询哪些健长时间未被访问，以判定热点key和冷key。</p>

<p>这里需要注意的是Redis中为了节省内存占用使用了整数对象池（即共享整数对象），但当淘汰策略为LRU时，由于无法对对象池的同一个对象设置多个访问时间戳，因此不再会使用整数对象池。</p>

<h3>持久化</h3>

<p>Redis支持对内存中的数据进行持久化，包括两种实现方式：</p>

<ol>
<li><p>RDB</p>

<p> RDB是基于二进制快照的持久化方案，其在指定的时间间隔内（默认触发策略是60秒内改了1万次或300秒内改了10次或900秒内改了1次）生成数据集的时间点快照（point-in-time snapshot),从而实现持久化。基于快照的特性，使其会丢失一些数据，比较适用于对Redis的数据进行备份。此外，RDB进行时，Redis会fork()出一个子进程，并由子进程来遍历内存中的所有数据进行持久化。在数据集比较庞大时，由于fork出的子进程需要复制内存中的数据，因此这个过程会非常耗时，会造成服务器停止处理客户端，停止时间可能会长达一秒。</p>

<p> 可配置RDB对数据进行压缩存储，支持字符串的LZF算法和String形式的数字变回int形式。</p></li>
<li><p>AOF</p>

<p> AOF是基于日志的持久化方案，记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。这些命令全部以 Redis 协议的格式来保存（纯文本文件），新命令会被追加到文件的末尾。此外，为了避免AOF的文件体积超出保存数据集状态所需的实际大小，Redis在AOF文件过大时会fork出一个进程对AOF文件进行重写（将历史AOF记录中的命令合并替换成key-value的插入命令）。AOF这种方案，默认是每隔1秒进行一次fsync（将日志写入磁盘），因此与RDB相比，其最多丢失1秒钟的数据，当然如果配置成每次执行写入命令时 fsync（执行命令成功后进行aof，非常慢），甚至可以避免任何数据的丢失。但其文件的体积是明显大于RDB的，将日志刷到磁盘和从AOF恢复数据的过程也是慢于RDB的。</p></li>
</ol>


<p>如果想要保证数据的安全性，建议同时开启AOF和RDB，此时由于RDB有可能丢失文件，Redis重启时会优先使用AOF进行数据恢复。</p>

<p>此外，可以通过save或者bgsave命令来手动触发RDB持久化，通过bgrewriteaof触发aof重写。如此可以将rdb或者aof文件传到另一个Redis结点进行数据迁移。</p>

<p>需要注意的是，如果通过kill -9或者Ctrl+c来关闭redis,那么RDB和AOF都不会触发，会造成数据丢失，建议使用redis-cli shutdown或者kill优雅关闭Redis。</p>

<h3>分布式</h3>

<p>Redis对分布式的支持有三种：</p>

<ol>
<li><p>Master-Slave</p>

<p> 简单的主从模式，通过执行slaveof命令来启动，一旦执行， Slave会清掉自己的所有数据，同时Master会bgsave出一个RDB文件并以Client的方式连接Slave发送写命令给Slave传输数据（多个slave连接时，只要在master的bgsave完成之前，那么就不会多次bgsave）。2.8版本后，Redis提供了PSYNC协议，支持主备间的增量同步，类似于断点续传，不会每次连接Master都全量同步数据。</p>

<p> Redis提供了Redis Sentinel做上述方案的fail-over，能够对 Redis 主从复制进行监控，并实现主挂掉之后的自动故障转移。</p>

<p> 首先，Sentinel会在Master上建一个pub/sub channel，通告各种信息。所有Sentinel通过接收pub/sub channel上的+sentinel的信息发现彼此（Sentinel每5秒会发送一次<strong>sentinel</strong>:hello消息)。然后，Seneinel每秒钟会对所有Master、Slave和其他Sentinel执行ping，这些redis-server会响应+PONG、-LOADING或者-MASTERDOWN告知其存活状态等。如果一台Sentinel在30s中内没有收到Master的应答，会认为Master已经处于SDOWN状态同时会询问其他Sentinel此Master是否SDOWN,如果quonum台Sentinels认为Master已经SDOWN,那么认为Master是真的挂掉（ODOWN），此时会选出一个状态正常且与Master的连接没有断开太久的Slave作为新的Master。</p>

<p> Redis Sentinel提供了notify脚本机制可以接受任何pub/sub消息，以便于发出故障告警等信息；提供了reconfig脚本机制在Slave开始提升成Master、所有Slave都已指向新Master、提升被终止等情况下触发对此类脚本的调用，可以实现一些自定义的配置逻辑。</p></li>
<li><p>Redis Cluster</p>

<p> Redis 3.0后内置的集群方案。此方案没有中心节点的，每一个Redis实例都负责一部分slot（存储一部分key），业务应用需要通过Redis Cluster客户端程序对数据进行操作。客户端可以向任一实例发出请求，如果所需数据不在该实例中，则该实例引导客户端去对应实例读写数据。Redis Cluster的成员管理（节点名称、IP、端口、状态、角色）等，都通过节点之间两两通讯，基于Gossip协议定期交换并更新。是一种比较重的集群方案。</p>

<p> Redis的集群方案除了内置的Redis Cluster之外，很多公司都采用基于代理中间件的思路做了一些实现，Twemproxy、Codis是其中用的比较多的软件。相比起官方的集群方案，其使用方式和单点Redis是一模一样的，原有的业务改动很少（个别命令会不支持），且其数据存储和分布式逻辑是分离的便于扩展和升级。</p></li>
<li><p>客户端分片</p>

<p> 除了上述集群方案之外，在客户端做分片也是一种常用的Redis集群实现方式，不依赖于第三方分布式中间件，实现方法和代码都自己掌控，相比代理方式少了中间环节。但是此方式数据迁移、合并等都不够灵活，建议慎用。Jedis2.0开始就提供了ShardedJedis实现客户端分片，但实际应用并不多见。</p></li>
</ol>


<h3>使用提示</h3>

<h3>Redis数据操作</h3>

<ul>
<li>不同业务共用同一Redis实例时，务必使用前缀来区分各个key，以防止key冲突覆盖。</li>
<li>尽量减少字符串频繁修改操作如append，setrange, 改为直接使用set修改字符串，可以降低预分配带来的内存浪费和内存碎片化。</li>
<li>不要在大数据量线上环境中使用keys命令，很容易造成Redis阻塞。</li>
<li>缓存的失效时间不要集中在同一时刻，会导致缓存占满内存触发内存淘汰（占用CPU）或者直接导致缓存雪崩。</li>
<li>String类型在1KB（Redis官方测试）是一个吞吐量性能拐点，因此String类型的大小以1KB以内为宜（局域网环境下，1KB以内吞吐性能基本一致），最大不超过10KB。</li>
<li>SortedSet中元素的score使用双精度64位浮点数，取值范围为-(2<sup>53</sup>)到+(2<sup>53</sup>)。更大的整数在内部用指数形式表示，因此如果为分数设置一个非常大的整数，其本质是一个近似的十进制数。</li>
<li>尽量使用mset、hmset等做批量操作，以节省网络IO消耗。此外，lpush、rpush、sadd也支持一次输入多个value，同样可以节省网络IO。但需要注意单次请求操作的数量尽量控制在500以内，从而避免慢查询。</li>
<li>使用Redis的事务命令（multi、exec、discard）, 其事务级别类似于Read Committed，即事务无法看到其他事务未提交的改动。还可以使用watch对某一个key做监控，当key对应的值被改变时，事务会被打断，能够达到CAS的效果。但需要注意的是Redis的事务和关系型数据库的事务不同，并非严格的ACID事务，仅仅能达到Isolation。</li>
<li>在Java中使用Jedis的pipeline一次执行多条互相没有依赖关系的命令可以节省网络IO的成本，但pipeline和事务不同，其只是一种批量写批量读的多命令流水线机制，Redis服务器并不保证这些命令的原子性。</li>
<li>可以使用SortedSet做范围查询，如：使用日期作为score,那么就可以根据日期来查询。此外，还可以在范围数据中进行查询，例如：IP定位库的数据一般是某一段IP范围属于哪一个城市,那么可以使用SortedSet存储每一段范围的最小IP和最大IP做为score，城市做为memeber。当给定一个IP时，根据score先找出大于这个IP的最小值，再找出小于这个IP的最大值，如果两者对应的城市相同，即完成定位，否则，无法获取到位置信息。</li>
<li>使用List做队列时，如果需要ack, 可以考虑再使用一个SortedSet，每次队列中pop出一个元素则按照访问时间将其存储到SortedSet中，消费完后进行删除。</li>
<li>控制集合键数据（list、set、zset、hash）的元素个数在5000以内，防止造成大key的查询阻塞其他请求的处理。可以使用zsan、hsan、sscan进行渐进操作或者分拆key来处理。</li>
<li>当无法避免对大集合键数据（元素非常多）进行全量读取时，可以通过搭建多个slave来提升性能，也可以使用Memcached作为Redis前面全量读取的缓存，从而利用MC的多线程实现方式以及对二进制KV的高效读取来获得性能的提升。</li>
<li><p>对大集合键数据的删除避免使用del，会造成Redis阻塞。</p>

<ul>
<li>hash: 通过hscan命令，每次获取一部分字段，再用hdel命令，每次删除1个字段。</li>
<li>list： 使用ltrim命令每次删除少量元素。</li>
<li>set: 使用sscan命令，每次扫描集合中一部分元素，再用srem命令每次删除一个键。</li>
<li>zset: 使用zremrangebyrank命令,每次删除top 100个元素。</li>
</ul>
</li>
<li><p>在Java开发中一般选择直接使用Jedis即可。如果需要诸如分布式锁、主从等分布式特性或者应用层级的Redis操作封装（布隆过滤器、队列），可以选择使用Redisson库来操作Redis。此外，Spring Data Redis也是一种选择，在4.2.2中做过讲述。</p></li>
</ul>


<h3>配置与监控</h3>

<ul>
<li>可以通过monitor命令监测Redis上命令执行的情况。</li>
<li>使用redis-cli &ndash;bigkeys可以扫描出每种数据类型最大的key。</li>
<li>由于Redis自身单线程的原因，切忌慢查询会阻塞住整个Redis, 可以通过slowlog get来查看慢查询日志。</li>
<li>设置Redis最大内存，以防内存用爆。</li>
<li>使用redis-rdb-tools对rdb文件进行分析，如每条key对应value所占的大小，从而做量化分析。</li>
<li>可以使用Redis Sampler，统计Redis中的数据分布情况。</li>
<li>Redis的最大连接数默认为10000（通过命令CONFIG GET maxclients得到），可以在redis.conf配置（maxclients: 10000）。如果还是有限制，需要考虑修改系统的单个进程可打开的最大文件个数（ulimit -n）以及网络的并发连接数。</li>
<li>单点Redis的性能一般能够达到10万QPS左右。</li>
</ul>


<h2>缓存设计</h2>

<p>在使用缓存系统的时候，还需要考虑缓存设计的问题，重点在于缓存失效时的处理和如何更新缓存。</p>

<p>缓存失效是在使用缓存时不得不面对的问题。在业务开发中，缓存失效由于找不到整个数据，一般会出于容错考虑，从存储层再进行查询，如果有则放入缓存。如果查找的数据压根在存储层就不存在，缓存失去意义，还给后端服务带来了巨大的请求压力，会进一步引起雪崩效应。这种现象又称为缓存穿透。</p>

<p>目前常用的解决缓存穿透问题的方案如下：</p>

<ol>
<li>在底层存储系统之上加一层布隆过滤器，将所有可能存在的数据哈希到一个足够大的BitMap中，一个一定不存在的数据会被这个BitMap拦截掉，从而避免了对底层存储系统的查询压力。</li>
<li>如果数据在存储层查询也为空，那么对此空结果也进行缓存，但要设置合适的失效时间。</li>
</ol>


<p>更进一步的，解决缓存穿透的问题其实是和缓存的更新机制是相关的。缓存更新的常用三种模式如下：</p>

<ul>
<li>Cache Aside Pattern: 应用程序以数据库为准，失效则从底层存储更新，更新数据先写入数据库再更新缓存。是最常用的缓存更新模式。</li>
<li>Read/Write Through Pattern: 以缓存为准，应用只读写缓存，但是需要保证数据同步更新到了数据库中。</li>
<li>Write Behind Caching Pattern: 以缓存为准，应用只读写缓存，数据异步更新到数据库，不保证数据正确写回，会丢数据。可以采用Write Ahead Logging等机制避免丢数据。</li>
</ul>


<p>如上，在缓存失效时采用何种策略去更新缓存直接决定了能否解决缓存穿透的问题。Cache Aside Pattern中缓存失效则从底层存储更新无法避免缓存穿透的问题。基于以上三种模式采用下面更为细化的更新机制可以在一定程度上避免缓存穿透的问题：</p>

<ol>
<li>缓存失效时，用加锁或者队列的方式单线程/进程去更更新缓存并等待结果。</li>
<li>缓存失效时，先使用旧值，同时异步（控制为同时只有一个线程/进程）更新缓存，缓存更新失败则抛出异常。</li>
<li>缓存失效时，先使用旧值，同时异步（控制为同时只有一个线程/进程）更新缓存，缓存更新失败延续旧值的有效期。</li>
<li>数据写入或者修改时，更新数据存储后再更新缓存。缓存失效时即认为数据不存在。</li>
<li>数据写入或者修改时，只更新缓存，使用单独线程周期批量刷新缓存到底层存储。缓存失效时即认为数据不存在。此种方案不能保障数据的安全性，有可能会丢数据。</li>
<li>采用单独线程/进程周期将数据从底层存储放到缓存中（MySQL可以基于binlog增量更新缓存）。缓存失效时即认为数据不存在。此种方案无法保证缓存数据和底层存储的数据强一致性。</li>
</ol>


<p>如果一开始设计缓存结构的时候注意切分粒度，把缓存力度划分的细一点，那么缓存命中率相对会越高，也能在一定程度上避免缓存穿透的问题。</p>

<p>此外，还可以在后端做流量控制、服务降级或者动态扩展，以应对缓存穿透带来的访问压力。</p>

<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2018]]></title>
    <link href="http://www.rowkey.me/blog/2019/01/26/my2018/"/>
    <updated>2019-01-26T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2019/01/26/my2018</id>
    <content type="html"><![CDATA[<p>此文是我在部门内的一次公开信（经过脱敏），想法来自于《原则》和《谷歌是如何运营公司的》两本书。极度求真、 极度透明的原则是一个想要做出大事业的公司应该具有的气度，而对所有同事能够客观地陈述自己的得与失，并欢迎吐槽，这不仅仅是真诚文化、极度透明原则的体现，也是对自己的一种压力和驱动。</p>

<!--more-->


<hr />

<p>hi, 技术平台部的各位同学：</p>

<p>2018年，我们优化升级了我们的大数据基础设施、运维平台以及推荐引擎，保障了业务的稳步前进；进一步发挥了数据分析师的作用，为业务和商业的发展指明了方向；上线了广告DSP平台，加速了公司的商业变现&hellip;虽然期间出现了一些事故，但总体上还是受到了其他部门的一致好评。感谢大家一年的努力，让我们技术平台部发挥了该有的”平台“作用。希望大家在新的一年继续加油，贯彻“平台”理念，为业务发展提供强有力的保障。</p>

<p>之前安排了大家做每个人和每个团队2018年的工作总结和2019年的工作规划。看到大部分人都能认识到过去的一年自己的问题，也能做好新的一年的规划。现在我把自己的总结规划分享给你们，希望能给你们一些启发。当然，如果有我自己没觉察到的我自身存在的问题，欢迎私信给我。</p>

<p>自己今年的工作可以从四个大方面来讲：部门管理、技术委员会、架构、数据挖掘。</p>

<h3>部门管理</h3>

<p>2018年自己有了新的角色定位，需要对公司的整个技术团队负责，这也让18年成为了自己写代码最少的一年，也是让自己决心进行角色转变的一年。虽然之前也在对整个后端团队以及部门（平台事业部->后台技术中心->技术平台部）做管理工作，但对自己来说，很长一段时间心里对管理是排斥的，尤其是当管理杂事越来越多，写代码的时间越来越少。自己的性格也是属于偏情绪化的，很多时候会让潜意识占了上风，说一些错误的话，发一些没必要发的脾气。在之前的管理工作中，自己意识到管理的并不好，一直还处于研发工程师的角色上。这在18年开始自己就进行了刻意的改变，试着跳出工程师思维，多从团队整体考虑问题，多从对方角度看待问题。具体的事情包括：</p>

<ul>
<li>优化月度考核机制，强调考核的具体原则以及从团队角度进行评估的视角。最终形成了主管和员工两条线、优秀员工投票选举、优秀主管负责人指定的月度考核机制。</li>
<li>加强一对一沟通，建立反馈问题的模式。</li>
<li>确立部门月会&amp;&amp;Leader周会的会议机制。</li>
<li>建立部门的操作手册让流程公开透明，提高做事效率。</li>
<li>带领大家学习并切实的开始实践OKR。建立部门的OKR流程，做到季度末部门月度会议复盘上一季度OKR、制定下一季度OKR。</li>
<li>强调“件件有着落，事事有回音”的团队文化，旨在解决很多人对交待的任务不主动响应、不主动汇报进度的非职业素养问题。</li>
</ul>


<p>此外，年初新业务的突击上线自己担任了项目管理和架构师的角色，后续自己也花了一些时间协助业务部门定位排查故障。日常的简历筛选、面试也占用不少时间和精力。</p>

<p>在年度考核中，看到同事们对自己的一些意见，基本都符合我的自我认知，也是在管理方面自己需要改进的：</p>

<ul>
<li>说服力：有些时候会比较急，语气比较强烈，因此会让人有抵触的情绪，需要进一步提高自己的沟通技巧和说服力。此外，有时候并没有了解事情的来龙去脉就下结论，这个需要竭力避免自己的主观臆断。</li>
<li>应变能力：转变为管理角色后，需要培养自己之前很抵触的审时度势、待人处事灵活的特质。</li>
<li>激励团队：目前对团队的激励的方式包括团队聚餐、项目奖励、月度奖励、技术书籍奖励等，并没有其他更加有效的激励措施。这一点需要改进，多想一些赋能方式来激励团队。</li>
<li>协作：和说服力那一点一样，在协作时有时候会太急，用职权影响力或者情绪化来影响结果。这个都是自己没有很好转变角色的问题。</li>
<li>高估团队：这个的本质问题还是观念改变，需要自己认识到目前团队成员的状况，对不同的人采取不同的领导策略，不能全部是放养状态，做好辅导和问题预估的协助。</li>
</ul>


<h3>技术委员会</h3>

<p>公司的技术委员会已经成立了三年，其一开始是为了评选“技术创新奖励”，后来随着公司的组织架构调整为按照业务为单位的敏捷式组织，技术委员会的横向管理职责越来越大。2018年限于业务迭代压力的问题，技术委员会的运行并没有走上正轨，但也做出了一些产出：</p>

<ul>
<li>确立了技术分享机制，大前端和后端都进行了系列分享。</li>
<li>制定了各个研发职位的能力模型，让技术团队成员都能够对自己的职业发展有清晰的认识。</li>
<li>完善了研发职位的学习计划，给入门的工程师提供学习指导。</li>
<li>制定了事故制度和研发高压线，规范事故处理流程，明确不可触碰的高压线。</li>
<li>制定技术选型原则，给技术团队做技术选型的指导。</li>
<li>制定实习生培养制度，规范化实习生转正流程。</li>
<li>进行“Hold住前后端系列分享”，提高资深以上工程师整体技术把控能力</li>
<li>带领各个技术Leader做了《技术管理实战三十六讲》的学习和沟通，解惑了很多程序员在转型管理时候面对的问题，让大家对“管理”有了更明确的认知。</li>
<li>例行的技术周刊、技术创新奖励继续得到有效执行。</li>
</ul>


<h3>架构</h3>

<p>架构方面，产出了一些公共组件和规范：</p>

<ul>
<li>制定了技术评审机制，强调对容器、中间件的容量预估和限流，从架构设计开始尽量规避性能故障。</li>
<li>梳理架构隐患分析流程，强调对架构的隐患分析和预防。</li>
<li>梳理系统稳定性原则，给系统设计时的稳定性予以指导。</li>
<li>制定架构设计文档模板：技术调研、技术方案分析、系统设计，规范系统设计流程。</li>
<li>研发公共组件：antares分布式调度中心。</li>
</ul>


<p>由于业务增长给后端带来了很大压力，在年底筹划并成立了架构组，由各个后端Leader组成，是一个虚拟的横向组织。其主要负责公司的架构规范梳理和制定以及公共组件/中间件的开发。目前基本上囊括了自己进入公司以来做的一些公共组件开发和架构规范工作，最近也产出了公共组件搜索平台供研发人员使用。</p>

<p>此外，为了进一步提高各个Leader的架构能力，给大家购买了极客时间《从0开始学架构》课程并组织了学习讨论会，在去年进行过一次架构学习的基础上再一次让大家讨论了对架构的认识和理解。并且做了《浅析区块链》、《后端基础设施》、《架构设计与原则》、《如何排查在线故障》的分享，提高大家的架构、故障排查等能力。</p>

<h3>数据挖掘</h3>

<p>数据挖掘这一方面，由于客观原因，自己一直在跟进。年初给自己定的目标是成为一个合格的机器学习调参工程师，能够熟知、理解和实现常用的机器学习算法。这一年也一直在看《机器学习》西瓜书、《机器学习实战》两本书。不过由于各种杂事以及架构工作的干扰，进度一直很慢。虽然最终阅读完了《机器学习实战》这本书，也实现了大部分算法，但数据挖掘有了更加合适的人来做具体工作，基本能Hold住目前的需求，自己也没有那么多时间专注这一块，在权衡了收益之后（把精力放在架构上给团队带来的收益会更大），最后决定放弃。毕竟，数据挖掘这一块入门需要花大量的时间来补充大量知识。如果没有那么多的时间专注做这件事情，入门都难，更难谈熟悉和精通。</p>

<p>所以，这一年参与了很小一部分推荐系统的开发工作，大部分是在担任推荐引擎的项目管理工作。本年度推荐系统最大的一个改进是做了架构的升级，引入了召回+CTR预估的推荐机制，合理划分了推荐引擎的分层架构。</p>

<h3>学习</h3>

<p>学习方面，平时会零零散散看一些微信和博客上的文章，并把其中自己觉得受到启发的点经过验证后纳入到自己的知识体系文档中。此外，自己今年包括在线课程一共学习了14本书/课程。如下：</p>

<ul>
<li><p>OKR: 源于英特尔和谷歌的目标管理利器</p>

<blockquote><p>此书是公司管理层进行统一学习的一本书，不厚，花了三个晚上大约6个小时就读完了。主要是对OKR这种目标管理方法的入门指导。不同于绩效的，OKR强调的是自驱力和挑战性，并不用来考核，是为了识别高绩效员工。O表示Objective，KR表示Key result。把周期内的事务分解为一个个目标，再把完成这个目标的衡量标准分解为一个个关键结果。周期结束复盘关键结果的完成度，也就相当于复盘了目标的完成度。</p></blockquote></li>
<li><p>尽在双11，阿里巴巴技术演进与超越</p>

<blockquote><p>此书讲述的是阿里巴巴为了支撑双十一技术上的一些演化。包括大数据平台、机器学习平台、数据中间件、容量规划、全链路压测、系统稳定性保障、流控方案、协同运维、移动端混合开发等技术。能够看到架构和技术是随着业务的发展而不断演进的，能够给我们这种小公司一个未来技术规划的路线图。</p></blockquote></li>
<li><p>深入分布式缓存</p>

<blockquote><p>集结各大公司技术网红的一本主要讲分布式缓存的书籍。包括缓存和分布式理论、Ehcache和Guava Cache本地缓存框架、Memcached、Redis、Tair、Evcache、Aerospike等集中式缓存，并讲述了这些技术在各大公司的实际应用案例。对自己最有启发的是此书对CAP的讲解，发现自己之前对这个理论的理解貌似有点偏差，就把相关的英文论文又看了几遍。此外，有一章讲述社交场景架构进化，虽然个别指标数字的来源比较模糊也没有说明，但是从数据库到缓存的设计和演进思路确实让我眼前一亮，比如通过前缀+保序压缩设计主键来使用覆盖索引。还值得一提的是在这里第一次看到了Aerospike在广告场景的使用，这个现在已经在我们公司的广告平台进行了实践并取得了较好的效果。</p></blockquote></li>
<li><p>增长黑客</p>

<blockquote><p>一本前几年非常火的书。也是这本书把“增长黑客”的概念引入国内。讲述了什么是增长黑客、增长在做什么、如何做增长等内容。由于工作中与增长并不密切相关，因此感触并不多。算是自己在增长方面的一个入门读物。</p></blockquote></li>
<li><p>Microservices AntiPatterns and Pitfalls</p>

<blockquote><p>微服务的反模式和陷阱。是O’Reilly的免费电子书，主要讲述了在做微服务设计和实现的时候经常会做错的一些事情。强烈推荐想要做微服务的同学看一下此书。我自己的翻译见：<a href="http://www.rowkey.me/blog/2018/06/02/microservice-pitfall/">http://www.rowkey.me/blog/2018/06/02/microservice-pitfall/</a>。</p></blockquote></li>
<li><p>Reactive Microservices Architecture</p>

<blockquote><p>响应式微服务架构-分布式系统设计原则。同样是O’Reilly的免费电子书，主要讲述了在做微服务设计的时候需要遵循的原则。结合上面的微服务的反模式和陷阱，能够更好地认识、设计和实现微服务。我自己的翻译见：<a href="http://www.rowkey.me/blog/2018/06/07/reactive-microservice/">http://www.rowkey.me/blog/2018/06/07/reactive-microservice/</a></p></blockquote></li>
<li><p>进化-运维技术变革与实践探索</p>

<blockquote><p>来自极客时间相关课程的一个书籍。主要讲述了运维技术的演进和实践。其中让我自己印象比较深的，一个地方是其讲述的架构师负责设计架构，运维则是负责管理架构；另一个地方是美丽说实践的一个办公室测试环境（小蘑菇环境），这个我们公司后来也进行了实践和推行。此外，这本书给出的事故定则维度和研发高压线也给了自己一些启发，进一步出台了公司的相关制度。</p></blockquote></li>
<li><p>推荐系统三十六计</p>

<blockquote><p>极客时间的一个课程。讲述的业界推荐系统主流的一些做法，包括各种召回策略/算法、融合排序方案、EE问题解决方案等，基本能够解决推荐系统80%的问题。此书给了自己不少启发，后续公司的推荐引擎的架构升级和团队规划的想法就来源于此。</p></blockquote></li>
<li><p>码农翻身</p>

<blockquote><p>花了差不多四个晚上大约4个小时阅读完此书。全书基本都是些基础知识，收获有一点（巩固了一些自己之前似是而非的点，比如Java动态代理为什么不能代理没有实现接口的类），但确实不太多。不过这种用故事讲技术的方式的确让自己有了一些启发，很多时候能够把技术和现实联系起来，既能够加深自己的理解，也能够更容易给别人讲明白。而最后作者给出的程序员需要<strong>克服内向心里，凡事必先上虎背</strong>，这个自己非常认同，人很多时候不逼自己一把是不知道自己有多少实力的。</p></blockquote></li>
<li><p>原则</p>

<blockquote><p>今年非常火的一本书，是桥水的创始人对自己生活以及工作的原则所做的总结。其中最让我印象深刻也注意后续实践的包括：头脑极度开放、极度求真和极度透明。第一点让自己突破了心里的一个坎，认识到人都有自我意识和思维盲点，会经常审视自己是否不敢接受自己在某些方面的欠缺，是否能够以开放的心态聆听别人的意见和看法，讨论问题时是否是抱着解决问题而不是论证自己的观点的态度。后面两点在公司里其实很难实现，但一旦实现，换来的是全员的目标一致、利益一致，随之而来的会是高效地产出。这个也是后续自己要在部门坚定推行的一种文化。此外，也注意到在评估一个工作业绩不突出的同事时要区分是其能力（包括学习能力）不够还是经验不够。经验不够可以学习弥补，但如果是能力不够则需要考虑淘汰。</p></blockquote></li>
<li><p>从0开始学架构</p>

<blockquote><p>来自极客时间的专栏课程，是对架构的一个入门讲解。其中的很多知识点都印证了自己之前的一些总结和实践。让自己受用的主要是其提供的几个架构设计文档模板：技术方案设计、技术方案评估和选择、详细方案设计。</p></blockquote></li>
<li><p>技术管理实战36讲</p>

<blockquote><p>同样是来自极客时间的专栏课程，给公司的所有技术Leader都购买并进行了学习讨论。主要就是解惑技术转管理面对的那些问题。如技术人的职业后期的方向有哪些？技术人适合做管理吗？管理到底做什么？管理能够成为自己的立身之本吗？其阐述的管理就是“看方向”、“带人”、“做事”，非常接地气的阐述了管理的职责。从公司几个技术Leader的反应来看，都觉得很受启发，尤其是角色认知这方面。相比起其他管理方法论，这个更加联系实际，更加干货。其讲述的团队规划方案、驱动力3.0等后来也运用在了实际工作中。</p></blockquote></li>
<li><p>机器学习实战</p>

<blockquote><p>这本书是入门机器学习的经典书籍之一，结合代码和原理讲解常用的机器学习算法。基本涵盖了机器学习常用的分类、预测、聚类、频繁项发现等算法。结合《机器学习》西瓜书，理论+实践，是入门机器学习的推荐方式。</p></blockquote></li>
<li><p>重新定义公司：谷歌是如何运营的</p>

<blockquote><p>这本书是在去参加年会的路上看完的，也就3个小时左右。主要讲述了Google特色的运营公司的方法。当然，Google能那么做并不代表你也可以这么做，毕竟人才的素养差距有点大。其中让自己感到受用的有两方面：会议的决策者应该亲力亲为，从通知议程、会议召开、保证质量、设立目标、确定与会人员到会议纪要都要亲自执行；要做好职业规划，想象自己五年后希望的职业，那个职位的JD是什么样子的，要求如何?并对照看自己的优势/劣势在哪，怎么去改进。</p></blockquote></li>
</ul>


<p>以上书籍/课程的学习笔记我都放在了Github(<a href="https://github.com/superhj1987/ToDo/issues/1">https://github.com/superhj1987/ToDo/issues/1</a>)上，通过issue的方式串联起来，确实提高了记录笔记的速度和学习的有效性。不过最近发现使用幕布（<a href="https://mubu.com">https://mubu.com</a>）这个软件思维导图的方式更加合适做学习笔记，也正在转移到这上面。当然，像marginnote则是更为强大的阅读笔记软件，感兴趣的可以使用。这里要再强调一下的是做读书笔记的重要性，之前有朋友特别喜欢购买书籍，书架上全是，咋看之下，绝对是啥都懂的超级大神，但其实大部分书都没有翻过，翻过的也基本看完就放在那里了。这样如果看书不注意记录笔记和学习心得并纳入到自己的知识体系中，效果是大打折扣的，尤其是当这本书的知识点和你实际的工作联系并不紧密时，很快你就会就把这本书讲的东西给忘了。我一直以来的做法是看书的过程会通过拍照、文字等形式记录笔记，并在完成阅读后，再概览一遍书的目录，把其中觉得有用的点都纳入到我的知识体系文档中。这样即使后来由于不经常使用而淡忘了也能够快速定位到相关的知识点。</p>

<p>18年也有一些计划的书并没有完成阅读，都纳入到了19年的学习计划中。目前计划的读书列表如下：</p>

<ul>
<li>Clean Architecture</li>
<li>分布式系统概念与设计</li>
<li>复杂</li>
<li>清教徒的礼物</li>
</ul>


<h3>工作之外</h3>

<p>工作之外，自己把2015年就有初步构想的书给出了，最近也收到了编辑寄来的2018年度优秀作者的奖杯。由于书的类型还算新颖，所以结果还不错，但自己其实挺遗憾的。出版前review了很多次，还是在出版后发现了不少错误，甚至一些自己怎么都想不明白为何会犯的错误。这也警醒了自己，不管东西多大多小，只要是输出的东西，务必保证准确性，不求能帮助所有人，但一定也不至于误导别人。与之关联的，自己也一直跟公司的技术团队强调，对于市面上的资料一定要学会甄别，国内的文章、书籍很多都是不可靠的，很多知识点都是copy来copy去，并没有经过作者亲自求证。如果要学习知识，最好的资料就是官方文档，之后是相关的英文书籍或者其权威翻译版本。毕竟，总是去看别人嚼过的知识，那么也就意味着你一直在follow别人，而无法获取技术的第一手资料，也就无法站在技术的前沿。计算机领域绝大多数第一手资料都是英文的，这造成了很多人觉得难以阅读而去看各种中文资料。一个外国朋友更是表达了他对中国技术人员的一个直观的印象就是英文不好，从来不看英文文档或者看的不够仔细，直接导致对技术的运用会有很大的偏差。他说的的确是中国大部分程序员的现状，但我真心不希望我们的技术团队是这样的一个团队，希望大家能够多强迫自己阅读并理解各种英文文档、英文书籍，久了自然而然就会越来越顺手，理解起来也就会越来越容易。</p>

<p>个人生活方面，最主要的还是一直以来的入睡困难、睡眠质量差的问题在困扰自己，导致自己很晚才能入睡，进一步导致自己无法早起，也就让自己失去了很多可以学习工作的时间，想想会觉得很难受。曾经想过很多办法，都效果不大。从8月份开始决定通过健身来彻底改变这些问题，最近也开始注意饮食，希望不久能够从根本上解决这个困扰自己多年的问题，给自己带来更多的学习、生活、工作时间。这里也想跟大家强调一下身体的重要性，任何东西都是以身体为基础的，身体如果不能够健健康康，那么其他的都无从谈起，所以一定要注意锻炼身体从而保证充足的活力和健康。此外，虽然公司给咱们买了保险，还是建议大家都给自己补充一些商业保险，这个其实也是理财的一种形式，用不上最好，一旦用上真的是解决大问题。</p>

<h3>总结</h3>

<p>以上是自己对2018的工作生活的总结，对照18年初的计划基本都达成了，自己大体也是满意的。对于其中各个方面的不足，新的一年也会采取措施来改善。对于2019年的规划，大体如下：</p>

<ol>
<li>加强技术委员会的横向管理作用，全面提升各个技术方向的研发实力。</li>
<li>采取更多更有效的方式提升各个技术Leader的技术管理以及架构能力。</li>
<li>把控架构组的日常工作和组件研发。</li>
<li>做好蜂巢推荐引擎的进一步推进工作，争取能够有突破性的进展。</li>
<li>完善各个团队的梯队建设。</li>
<li>进一步明确自己的角色定位，改善自己的沟通能力和管理能力。</li>
<li>每周做至少2-3道leetcode medium题目，保持自己的编程感觉。</li>
<li>改善自己的睡眠问题和身体状况，提高自己的活力，能够有更多的时间在工作、学习和生活上。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin语法简明指南]]></title>
    <link href="http://www.rowkey.me/blog/2018/12/08/kotlin-notes/"/>
    <updated>2018-12-08T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/12/08/kotlin-notes</id>
    <content type="html"><![CDATA[<p>Kotlin是Intellij IDEA的发明团队JetBrains带来的新一代JVM语言。虽然JVM上一次又一次出现新的语言叫嚣着取代Java，但时至今日，Java也开始吸纳其他语言的各种优势，其生命力依旧强盛，生态也越发强大。那么Kotlin的出现是又一次重蹈覆辙还是有其突破性的特性？</p>

<p>本文对其语法作了简要概括。</p>

<!--more-->


<p><strong>Kotlin版本：1.3.11</strong></p>

<ol>
<li><p>包的定义</p>

<p> 与Java类似，但包的定义与目录结构无需匹配，源代码可以在文件系统任意位置。</p>

<p> 与Java有一点不同，导入包的时候，可以使用import as实现重命名来解决名字冲突的问题。如：</p>

<pre><code class="`"> import me.rowkey.MainClass as aClass // aClass 代表“me.rowkey.MainClass”
</code></pre></li>
<li><p>没有类型的Java</p>

<p> 虽然Kotlin是静态语言，但其引入的安全类型推断让其无须声明类型。使用val/var即可，其中val定义只读变量，var定义可变变量。</p>

<pre><code class="`"> var str1 : String = "a" //有初始值，可以省略类型
 val str2 : String //无初始值，不能省略类型
 str2 = "b"
 var str = "i can change"
 val immutableStr = "i cannot change"
</code></pre></li>
<li><p>不需要的public</p>

<p> Kotlin中默认的可见性修饰符是public，所以public修饰符不需要写。其他修饰符如下：</p>

<ul>
<li>private：只在类内部/声明文件内部可见。</li>
<li>protected：private+子类中可见。</li>
<li>internal: 同一模块（编译在一起的一套Kotlin文件）可见。</li>
</ul>
</li>
<li><p>函数定义</p>

<p> 用fun关键字声明函数</p>

<pre><code class="`"> fun main(args: Array&lt;String&gt;) {
  ...
 }
</code></pre>

<p> 其中，函数参数使用 Pascal 表示法定义，即 name: type。参数用逗号隔开。每个参数必须有显式类型。</p>

<p> Kotlin中还能够直接通过表达式做为函数体来定义函数。</p>

<pre><code class="`"> fun sum(a : Int, b : Int) = a + b
</code></pre>

<p> Kotlin中的函数和Java中的方法是一致的，但与Java不同的是，Kotlin中的函数可以属于任何类，文件当中直接定义则作为“包级函数”，和类的使用方式一致</p></li>
<li><p>默认参数值</p>

<p> 函数的参数可以指定默认值。</p>

<pre><code class="`"> fun getList(list: Array&lt;String&gt;, offset: Int = 0, size: Int = list.size) { …… }
</code></pre>

<p> 不指定第2个参数调用方法时，offset参数取默认值0, size参数默认取第一个参数的size。</p></li>
<li><p>可变参数</p>

<p> 函数的参数（通常是最后一个）可以用 vararg 修饰符标记：</p>

<pre><code class="`"> fun printIntArray(vararg input: Int) {
     for (i in input) {
         println(i)
     }
 }
</code></pre></li>
<li><p>不需要的语句结束符</p>

<p> Kotlin中没有语句结束符，当然为了与java保持一致性，也可以使用;号作为语句结束符。</p></li>
<li><p>字符串连接符</p>

<p> 跟java一样，如果你需要把一个字符串写在多行里，可以使用+号连接字符串。代码可以这样写：</p>

<pre><code>val str = "hello" + "world" + "!!!";
</code></pre>

<p> Kotlin中的写法也可以这样：</p>

<pre><code class="`"> val str = """hello
 world
 !!!
 """
</code></pre>

<p> 三个”号之间不在需要+号进行连接，不过字符串中的格式符都会被保留，包括回车和tab。</p></li>
<li><p>字符串模板</p>

<p> Kotlin提供了$符来做字符串内的变量替换，并且可以做一些字符串操作。如下：</p>

<pre><code class="`"> var name = "hj"
 var strTemplate = "My name is $name"//My name is hj

 strTemplate = "My name is ${name.replace("j","a")}"// My name is ha
</code></pre></li>
<li><p>一切皆对象</p>

<p> Kotlin中一切皆对象。即使赋值为基本数据类型，也会自动转换为对应的类。</p></li>
<li><p>if条件表达式</p>

<p> Kotlin中支持if条件表达式。</p>

<pre><code class="`">val a = if(x &gt; 0) 1 else 2
fun maxOf(a: Int, b: Int) = if (a &gt; b) a else b
</code></pre></li>
<li><p>循环</p>

<p> Kotlin的while循环和Java没什么不同, 在for循环引入了区间的概念。</p>

<pre><code class="`"> for(i in 1..10){
     println(i)
 }

 for(i in 1..10 step 2){
     println(i)
 }

 for(i in 10 downTo 1 step 1){
     println(i)
 }

 for (i in 1 until 10) {
     // i in [1, 10) 排除了 10
     println(i)
 }

 for(c in 'A'..'Z'){
     println(c)
 }
</code></pre>

<p> 需要注意的是在Kotlin中不再支持Java的for循环形式：</p>

<pre><code class="`"> for(int i =0;i &lt; 10;i++){
     ...
 }
</code></pre></li>
<li><p>when</p>

<p>  Kotlin中没有switch。提供when做分支条件选择。</p>

<pre><code class="``">  when (x) {
     1 -&gt; print("x == 1")
     2 -&gt; print("x == 2")
     3, 4 -&gt; print("x == 3 or x == 4")
     in 10..99999 -&gt; print("x &gt; 10")
     else -&gt; { // 注意这个块
         print("x is neither 1 nor 2")
     }
 }

 when {
     x.isOdd() -&gt; print("x is odd")
     x.isEven() -&gt; print("x is even")
     else -&gt; print("x is funny")
  }
</code></pre>

<p>   when 既可以被当做表达式使用也可以被当做语句使用。如果它被当做表达式， 符合条件的分支的值就是整个表达式的值，如果当做语句使用， 则忽略个别分支的值。</p></li>
<li><p>操作符重载</p>

<p> Kotlin提供了操作符重载的支持。对于常用的”+“、&#8221;-&ldquo;等操作符，创建带有operator且名称符合要求的方法，即可实现。如：</p>

<pre><code class="`"> data class Point(val x: Int, val y: Int)

 operator fun Point.unaryMinus() = Point(-x, -y)

 val point = Point(10, 20)

 fun main() {
     println(-point)  // 输出“Point(x=-10, y=-20)”
 }
</code></pre>

<p> 上面即完成了对-的重载。</p></li>
<li><p>集合</p>

<p>Kotlin把集合分为可变集合和不可变集合。其创建需要通过标准库的方法：listOf()、 mutableListOf()、 setOf()、 mutableSetOf()、hashMapOf()、mutableHashMapOf()</p>

<pre><code>val list = listOf("1","2","3",""4)
val set = setOf("1","2")
val map = hashMapOf("name" to "hj","sex" to "male")
</code></pre>

<p>这些集合类实现了操作符重载，如下：</p>

<pre><code>val list1 = list - listOf("1","2")
val list2 = list + "2"
println(list1[0])

val map = hashMapOf("name" to "hj","sex" to "male")
val map1 = map + ("name2" to "hah") //{"name":"hj","name2":"ha","sex":"male"}
val map2 = map - "name"//{"sex":"male"}
println(map2)
</code></pre>

<p>Map的遍历如下：</p>

<pre><code>for ((k, v) in map) {
    println("$k -&gt; $v")
}
</code></pre>

<p>Kotlin中的集合具有类似Java中的Stream的操作如filter、map、foreach等。</p>

<pre><code>val positives = list.filter { x -&gt; x &gt; 0 }
//val positives = list.filter { it &gt; 0 }
</code></pre></li>
<li><p>Elvis操作符</p>

<p> 三目运算符通常以这种形式出现：</p>

<pre><code class="`"> String displayName = name != null ? name : "Unknown";
</code></pre>

<p> Kotlin中可以简化为：</p>

<pre><code class="`"> val displayName = name ?: "Unknown";
</code></pre></li>
<li><p>可空/非可空引用/函数返回值</p>

<p> Kotlin中区分一个引用可以容纳null和不能容纳null。默认的引用是不可空的。</p>

<pre><code class="`"> var a = "abc"
 a = null // 编译错误    ```
</code></pre>

<p> 需要使用?使其变为可空引用。</p>

<pre><code class="`"> var b : String ? = "abc"
 b = null
</code></pre>

<p> 如此，后续如果你调用a的任何方法都可以，但是调用b的会有编译错误。会强制去检查b是否为空</p>

<pre><code class="`"> val l = if (b != null) b.length else -1
</code></pre>

<p> 也可以使用?做安全调用</p>

<pre><code class="`"> b?.length()
</code></pre>

<p> b不为空才会执行后续的操作。配合let可以执行其他非自身的操作。</p>

<pre><code class="`"> b?.let{
     print("a")
 )
</code></pre>

<p> 同样的，对于函数参数以及返回值，默认也是非空的，只有加了?才允许传控制且要求做空值检测。</p>

<pre><code class="`"> fun parseInt(str: String?): Int? {
     // ……
     if(str == null){
         return null
     }

     ...
     return ..
 }

 val r = parseInt(null)
 r?.let{
     print r
 }
</code></pre></li>
<li><p>try with resources</p>

<pre><code class="`"> val stream = Files.newInputStream(Paths.get("/some/file.txt"))
 stream.buffered().reader().use { reader -&gt;
     println(reader.readText())
 }
</code></pre></li>
<li><p>延迟属性</p>

<p> Kotlin提供了延迟属性的支持，即只有在你第一次开始使用的时候才会真正初始化。默认使用同步锁保证只有一个线程初始化。下面例子改成了不使用同步锁，可以多线程执行。</p>

<pre><code class="`"> val p by lazy(LazyThreadSafetyMode.PUBLICATION) {
     println("computed!")
     "Hello"
 }
 println(p)
</code></pre></li>
<li><p>类</p>

<ul>
<li>无须public修饰符。文件名和类也没有任何关联。</li>
<li><p>创建对象不需要使用new关键字</p>

<pre><code class="``">  val test = Test()
</code></pre></li>
<li><p>对于类属性，默认会有get()和set()两个方法。直接访问属性或者给属性设置值都会调用这两个方法。</p>

<pre><code class="``">  class Test {
      var counter = 0 // 注意：这个初始器直接为幕后字段赋值
      get() {
          println("getter")
          return field
      }
      set(value) {
          println("setter")
          field = value
      }


  }

  val test = Test()
  test.counter = 10
  println(test.counter)
</code></pre></li>
<li><p>主构造函数和次构造函数。Kotlin中一个类可以有一个主构造函数以及一个或多个次构造函数。主构造函数是类头的一部分：它跟在类名（与可选的类型参数）后。主构造函数里的参数如果用val或者var修饰则成为类的属性。如果类有一个主构造函数，每个次构造函数需要委托给主构造函数。主构造函数不能包含任何的代码。初始化的代码可以放到以 init 关键字作为前缀的初始化块（即时没有主构造函数，也会在次构造函数前执行）。</p>

<pre><code class="``">  class Test(val counter: Int, val name: String = "test") {

      init{

      }

      constructor(counter: Int, name: String, sex: String) : this(counter, name) {

      }

  }

  val test = Test(10)
  println(test.counter)
</code></pre></li>
<li><p>Kotlin中引入了解构函数来对对象进行解构。</p>

<pre><code class="``">  class Test(val counter: Int, val name: String = "test") {

      operator fun component1() : Int{
          return counter
      }

      operator fun component2() : String{
          return name
      }

  }

  val (counter,name) = Test(10)
</code></pre>

<p>  如此，也和map一样可以用在集合迭代中。</p>

<pre><code class="``">  val testList = listOf(Test(1),Test(2))
  for((k,v) in testList){
      ...
  }
</code></pre></li>
<li><p>Kotlin中引入了数据类的概念。对于此种类，会默认根据主构造函数的属性生成equals()/hashCode()、toString()、componentN()、copy()这几个函数。</p>

<pre><code class="``">  data class User(val name: String, val age: Int)
</code></pre></li>
<li><p>Kotlin中提供了对象声明来实现单例模式。</p>

<pre><code class="``">  object SingleInstance {
      fun test(input: String) = println(input)
  }

  fun main(args: Array&lt;String&gt;) {
      SingleInstance.test("hj")
  }
</code></pre></li>
<li><p>Kotlin中提供了密封类来表示受限的类继承结构：当一个值为有限集中的类型、而不能有任何其他类型时。可以看做是枚举类的扩展。密封类需要在类名前面添加 sealed 修饰符。其所有子类都必须在与密封类自身相同的文件中声明。</p>

<pre><code class="``">  sealed class DataType
  data class Card(val number: Double) :DataType()
  data class Timeline(val e1: DataType, val e2: DataType) : DataType()
  object Illegal : DataType()
</code></pre></li>
<li><p>Kotlin的类中引入了伴生对象来声明静态方法、属性以及编译期常量（也可以在object中定义）。</p>

<pre><code class="``">  class Test(val counter: Int, val name: String = "test") {

      companion object {
          const val TYPE = 1
              val title = "haha"

              fun testStatic(){
              println("static method")
          }
  }
</code></pre></li>
<li><p>对一个对象调用多个方法。</p>

<pre><code class="``">  class Test(val counter : Int){
      fun test1(){

      }

      fun test2(){

      }
  }


  val test = Test(1)
  with(test){
      test1()
      test2()
  }
</code></pre></li>
</ul>
</li>
</ol>


<p>以上为Kotlin中的基本语法说明，其他诸如委托、lambda函数、协程、与Java互操作等可见<a href="https://www.kotlincn.net/docs/reference/">https://www.kotlincn.net/docs/reference/</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何应对在线故障]]></title>
    <link href="http://www.rowkey.me/blog/2018/11/22/online-debug/"/>
    <updated>2018-11-22T14:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/11/22/online-debug</id>
    <content type="html"><![CDATA[<p>线上运行的Java应用突然没有响应、响应缓慢，进程突然消失，遇到这些情况应该如何应对呢？</p>

<p><strong>来自公司内部分享</strong></p>

<!--more-->


<p><img src="http://www.rowkey.me/post_images/debug/arch-2.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-3.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-4.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-5.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-6.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-7.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-8.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-9.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-10.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-11.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-12.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-13.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-14.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-15.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-16.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-17.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-18.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-19.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-20.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-21.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-22.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-23.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/debug/arch-24.jpeg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java应用性能调优之调优准备]]></title>
    <link href="http://www.rowkey.me/blog/2018/10/31/profile-ready/"/>
    <updated>2018-10-31T14:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/10/31/profile-ready</id>
    <content type="html"><![CDATA[<p>实际的开发工作中，有时候会遇到程序突然变得响应缓慢或者进程消失的情况。这时候就需要对程序进行问题排查和调优，找出产生问题的根源，并进行优化。</p>

<!--more-->


<ul>
<li>调优概览：<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter8-profile/README.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter8-profile/README.md</a></li>
<li>调优准备：<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter8-profile/ready.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter8-profile/ready.md</a></li>
</ul>


<blockquote><p>本文来自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构设计与原则（2018修订版）]]></title>
    <link href="http://www.rowkey.me/blog/2018/09/20/arch-new/"/>
    <updated>2018-09-20T14:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/09/20/arch-new</id>
    <content type="html"><![CDATA[<p>之前的<a href="http://www.rowkey.me/blog/2017/08/24/arch/">《谈谈架构》</a>的最新修订版。</p>

<p><strong>来自公司内部分享</strong></p>

<!--more-->


<p><img src="http://www.rowkey.me/post_images/arch-new/arch-2.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-3.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-4.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-5.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-6.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-7.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-8.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-9.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-10.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-11.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-12.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-13.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-14.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-15.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-16.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-17.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-18.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-19.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-20.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-21.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-22.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-23.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-24.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-25.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-26.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-27.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-28.jpeg" alt="" />
<img src="http://www.rowkey.me/post_images/arch-new/arch-29.jpeg" alt="" /></p>

<p><strong>附录链接：</strong></p>

<ul>
<li><a href="https://www.ibm.com/developerworks/cn/rational/06/r-wenyu/index.html">软件架构 &ldquo;4+1&rdquo; 视图模型</a>: 逻辑视图、开发视图、过程视图、物理视图 + 场景视图</li>
<li><a href="https://github.com/superhj1987/awesome-tech-collections/blob/master/document/tech-research.md">技术调研文档模板</a>:技术方案调研输出</li>
<li><a href="https://github.com/superhj1987/awesome-tech-collections/blob/master/document/tech-analysis.md">技术方案分析文档模板</a>: 技术方案选型，设计、评估和选择备选方案</li>
<li><a href="https://github.com/superhj1987/awesome-tech-collections/blob/master/document/arch.md">系统设计文档模板</a>:系统架构设计</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术琐话2018-09-03]]></title>
    <link href="http://www.rowkey.me/blog/2018/09/03/tech-talk/"/>
    <updated>2018-09-03T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/09/03/tech-talk</id>
    <content type="html"><![CDATA[<blockquote><p>日常的工作学习中，经常会看到好的知识点，对自己有提示的一句话，或者是自己突然想通了一件事情。决定以博客的形式记录下来，以“技术琐话”作为主题。</p>

<p>2018年以“技术琐话”开篇，主要是整理了一下自己以前一些零散的知识点。</p></blockquote>

<ul>
<li>推送实现方式：轮训、长连接、长轮训（依赖于异步IO机制，如Java中的异步Servlet）。</li>
<li>喜欢到处听讲座的人通常心态上很好学，但很可能思考不足，所以知识很容易流于表面。喜欢看一本一本书的人不但好学，而且通常比较习惯于深度思考。深度思考，才能具体改变你的知识体系。看书时，可以和作者进入到同一个频率，对文字的内容产生共鸣。 ​​​​@蔡学镛 <strong>so，建议搞技术的同学少参加会议，少混圈子，多看书。</strong></li>
<li>提出问题之前务必要先想好自己的答案或者思路。</li>
<li>了解清楚事实再说话，切忌老是吐槽却不去解决问题。</li>
<li>对新技术的调研需要梳理零散的知识点，最终一定要有输出：分享或者文章。</li>
<li>想到一个思路，要深入思考下去，即使表面不可行，也可以使其可行，直至确实不可行，再换思路。</li>
<li>人的时间管理效率会差3倍；注意力管理的效率会差30倍；思考方法学习方法的效率差300倍。so，找到好的学习方法是非常关键的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何进行Java项目构建？]]></title>
    <link href="http://www.rowkey.me/blog/2018/08/30/build-java/"/>
    <updated>2018-08-30T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/08/30/build-java</id>
    <content type="html"><![CDATA[<p><strong>最新版本可见:<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter2-project/build.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter2-project/build.md</a></strong></p>

<p>对于一个完整的项目来说，一般都有很多的类、很多的包，如果是Web工程那么还有很多jsp、资源文件。这时候如果只用JDK自带的工具编译和运行，是非常困难的一件事前。再者，编译源代码只是软件开发过程的一个方面，更重要的是要把软件发布到生产环境中来产生商业价值。所以，代码编译之后，还有测试、分析代码质量、部署等步骤要做。整个过程进行自动化操作是很有必要的。</p>

<p>这时候就需要一个Java的工程/项目构建工具。这里所谓的项目构建就是指的完成工程发布流程需要的一系列步骤，包括编译、测试、打包、部署等等。虽然用Eclipse和Intellij这些IDE能解决这个问题，但是受限于这些IDE体积庞大且基本上都是GUI的，而后端应用的运行环境基本都是没有显示器的，所以很多时候还是需要一些专门做项目构建的工具来支持这些工作。</p>

<!--more-->


<ul>
<li><a href="#%E4%B8%80.%20Ant">一. Ant</a>

<ul>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">使用示例</a></li>
<li><a href="#%E6%8F%90%E7%A4%BA">提示</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C.%20Maven">二. Maven</a>

<ul>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a></li>
<li><a href="#%E6%A0%87%E5%87%86Web%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">标准Web项目结构</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86">依赖管理</a></li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B">项目构建流程</a></li>
<li><a href="#Profile%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81">Profile多环境支持</a></li>
<li><a href="#%E5%A4%8D%E7%94%A8test">复用test</a></li>
<li><a href="#Scala%E6%94%AF%E6%8C%81">Scala支持</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6">常用插件</a></li>
<li><a href="#%E6%8F%90%E7%A4%BA">提示</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89.%20Gradle">三. Gradle</a>

<ul>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">使用示例</a></li>
<li><a href="#%E5%A4%9A%E6%A8%A1%E5%9D%97">多模块</a></li>
<li><a href="#%E6%8F%90%E7%A4%BA">提示</a></li>
</ul>
</li>
</ul>


<h2><a name='一. Ant'></a>一. Ant</h2>

<h3><a name='介绍'></a>介绍</h3>

<p>Ant的全称是Another Neat Tool，意为另一个好用的工具，是Java中比较常用的项目构建工具。构建过程包括编译、测试和部署等。概括来看具有以下三个特点：</p>

<ul>
<li>和传统的Make工具相似，能为我们完成工程发布流程中一系列机械工作。并且具有良好的跨平台特性。</li>
<li>使用XML来表述构建过程与依赖关系，用task替代shell，语义清晰，便于维护。</li>
<li>具有强大的任务系统，便于扩展。其中，task以Java class的形式存在。</li>
</ul>


<p>为了方便使用，Ant自带了很多默认的task，如：</p>

<ul>
<li>echo: 输出信息</li>
<li>mkdir: 创建文件夹</li>
<li>exec: 执行shell命令</li>
<li>delete: 删除文件</li>
<li>copy: 复制文件</li>
</ul>


<p>通过组合这些默认task和自己实现的task就能够完成Java项目的构建任务。</p>

<h3><a name='使用示例'></a>使用示例</h3>

<p>使用Ant需要编写build.xml来配置任务流程。当然，可以通过-f参数指定其他配置文件作为任务流程描述文件。一个Ant的配置文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;project name="helloWorld" basedir="." default="usage"&gt;
</span><span class='line'>    &lt;property name="mvn" value="mvn"/&gt;
</span><span class='line'>    &lt;property name="script.lock" value="/build_home/scripts/lock"/&gt;
</span><span class='line'>
</span><span class='line'>    &lt;target name="usage" description="Prints out instructions"&gt;
</span><span class='line'>        &lt;echo message="使用 'lock' 加锁"/&gt;
</span><span class='line'>        &lt;echo message="使用 'unlock' 解锁"/&gt;
</span><span class='line'>        &lt;antcall target="compile"&gt;
</span><span class='line'>            &lt;param name="profile" value="test"/&gt;
</span><span class='line'>        &lt;/antcall&gt;
</span><span class='line'>    &lt;/target&gt;
</span><span class='line'>
</span><span class='line'>    &lt;target name="lock"&gt;
</span><span class='line'>        &lt;exec dir="${basedir}" executable="${script.lock}" errorproperty="lock.err"/&gt;
</span><span class='line'>        &lt;fail message="u can use 'ant unlcok to force redeploy'...'"&gt;
</span><span class='line'>            &lt;condition&gt;
</span><span class='line'>                &lt;contains string="${lock.err}" substring="locked"/&gt;
</span><span class='line'>            &lt;/condition&gt;
</span><span class='line'>        &lt;/fail&gt;
</span><span class='line'>    &lt;/target&gt;
</span><span class='line'>
</span><span class='line'>    &lt;target name="unlock"&gt;
</span><span class='line'>        &lt;delete file="${basedir}/.lock"/&gt;
</span><span class='line'>    &lt;/target&gt;
</span><span class='line'>
</span><span class='line'>    &lt;target name="compile"&gt;
</span><span class='line'>        &lt;echo message="编译开始"/&gt;
</span><span class='line'>        &lt;exec dir="${basedir}" executable="${mvn}" failonerror="true"&gt;
</span><span class='line'>            &lt;arg line="compile -P ${profile}"/&gt;
</span><span class='line'>        &lt;/exec&gt;
</span><span class='line'>        &lt;exec executable="${mvn}" failonerror="true"&gt;
</span><span class='line'>            &lt;arg value="war:exploded"/&gt;
</span><span class='line'>        &lt;/exec&gt;
</span><span class='line'>    &lt;/target&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;!--逻辑判断--&gt;
</span><span class='line'>    &lt;target name="testIf" depends="check" if="flag"&gt;
</span><span class='line'>        &lt;echo message="if..."/&gt;
</span><span class='line'>    &lt;/target&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;target name="testUnless" depends="check" unless="flag"&gt;
</span><span class='line'>        &lt;echo message="unless..."/&gt;
</span><span class='line'>    &lt;/target&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;target name="check"&gt;
</span><span class='line'>        &lt;condition property="flag"&gt;
</span><span class='line'>            &lt;or&gt;
</span><span class='line'>            &lt;and&gt;
</span><span class='line'>               &lt;isset property="name"/&gt;
</span><span class='line'>               &lt;equals arg1="${version}" arg2="1.0" /&gt;
</span><span class='line'>            &lt;/and&gt;
</span><span class='line'>            &lt;available file="/project.version" type="file"/&gt;
</span><span class='line'>            &lt;/or&gt;
</span><span class='line'>        &lt;/condition&gt;
</span><span class='line'>    &lt;/target&gt;
</span><span class='line'>    &lt;!--逻辑判断end--&gt;
</span><span class='line'>   
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<p>可见，Ant使用顶级元素<project>描述整个工程,使用<property>描述全局属性, 用<target>定义工程中的target以及target间的依赖, 在target中定义task的执行流程。使用antcall来调用target，通过其子节点param传递参数。</p>

<p>此外，在很多场景下需要用到逻辑判断，如if等。Ant中的if如上面的例子所示，是需要搭配target和condition使用的。上面配置中最后的逻辑判断部分，类似如下伪代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (name ！= null && version.equals("1.0")) || fileExist("/project.version") ){
</span><span class='line'>    echo "if..."
</span><span class='line'>}else{
</span><span class='line'>    echo "unless..."
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>执行<code>ant [target]</code>即可执行任务流程。</p>

<h3><a name='提示'></a>提示</h3>

<ul>
<li>使用Ant时，一个常见的需求就是通过命令行给Ant传递参数，可以通过<code>-Dname=value</code>这种形式来传递，在build.xml中通过<code>${name}</code>来引用即可。</li>
<li><p>对于配置文件中重复出现的元素，可以通过refid引用，减少重复配置。</p>

<pre><code class="``">  &lt;project&gt;
      &lt;path id="project.class.path"&gt;
          &lt;pathelement location="lib/"/&gt;
          &lt;pathelement location="${java.class.path}/"/&gt;
      &lt;/path&gt;

      &lt;target ...&gt;
          &lt;rmic ...&gt;
              &lt;classpath refid="project.class.path"/&gt;
          &lt;/rmic&gt;
      &lt;/target&gt;

      &lt;target ...&gt;
          &lt;javac ...&gt;
              &lt;classpath refid="project.class.path"/&gt;
          &lt;/javac&gt;
      &lt;/target&gt;
  &lt;/project&gt;
</code></pre></li>
</ul>


<h2><a name='二. Maven'></a>二. Maven</h2>

<h3><a name='介绍'></a>介绍</h3>

<p>Maven是继Ant后出现的一款基于约定优于配置原则的项目构建工具。这里所说的“约定优于配置”指的是约定的一些规范无需再配置，例如：其约定好的生命周期、项目结构等。当然，Maven也提供了打破默认约定的配置办法。</p>

<p>概括来讲，Maven具有以下的功能：</p>

<ul>
<li>依赖管理：Maven能够帮助我们解决软件包依赖的管理问题，不再需要提交大量的jar包，引入第三方lib也不需要关心其依赖。</li>
<li>规范目录结构：标准的目录结构有助于项目构建的标准化，使得项目更整洁，还可通过配置profile根据环境的不同读取不同的配置文件。</li>
<li>可以通过每次发布都更新版本号以及统一依赖配置文件来规范软件包的发布。</li>
<li>完整的项目构建阶段：Maven能够对项目完整阶段进行构建。</li>
<li>支持多种插件：面向不同类型的工程项目提供不同的插件。</li>
<li>方便集成：能够集成在IDE中方便使用，和其他自动化构建工具也都能配合使用。</li>
</ul>


<p>可见，相比起Ant，Maven提供了更加强大和规范的功能。</p>

<h3><a name='配置文件'></a>配置文件</h3>

<p>Maven基于pom（Project Object Model）进行。一个项目所有的配置都放置在pom.xml文件中，包括定义项目的类型、名字，管理依赖关系，定制插件的行为等等。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
</span><span class='line'>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>
</span><span class='line'>    &lt;groupId&gt;me.rowkey&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;test&lt;/artifactId&gt;
</span><span class='line'>    &lt;version&gt;1.0.0&lt;/version&gt;
</span><span class='line'>    &lt;packaging&gt;jar&lt;/packaging&gt;
</span><span class='line'>
</span><span class='line'>    &lt;name&gt;rowkey&lt;/name&gt;
</span><span class='line'>    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
</span><span class='line'>
</span><span class='line'>    &lt;repositories&gt;
</span><span class='line'>        &lt;repository&gt;
</span><span class='line'>            &lt;id&gt;nexus-suishen&lt;/id&gt;
</span><span class='line'>            &lt;name&gt;Nexus suishen&lt;/name&gt;
</span><span class='line'>            &lt;url&gt;http://maven.etouch.cn/nexus/content/groups/public/&lt;/url&gt;
</span><span class='line'>            &lt;snapshots&gt;
</span><span class='line'>                &lt;enabled&gt;true&lt;/enabled&gt;
</span><span class='line'>                &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
</span><span class='line'>                &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
</span><span class='line'>            &lt;/snapshots&gt;
</span><span class='line'>        &lt;/repository&gt;
</span><span class='line'>    &lt;/repositories&gt;
</span><span class='line'>
</span><span class='line'>    &lt;properties&gt;
</span><span class='line'>        &lt;slf4j.version&gt;1.7.21&lt;/slf4j.version&gt;
</span><span class='line'>    &lt;/properties&gt;
</span><span class='line'>
</span><span class='line'>    &lt;dependencies&gt;
</span><span class='line'>
</span><span class='line'>        &lt;dependency&gt;
</span><span class='line'>            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
</span><span class='line'>            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
</span><span class='line'>            &lt;version&gt;${slf4j.version}&lt;/version&gt;
</span><span class='line'>        &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>        &lt;dependency&gt;
</span><span class='line'>            &lt;groupId&gt;junit&lt;/groupId&gt;
</span><span class='line'>            &lt;artifactId&gt;junit&lt;/artifactId&gt;
</span><span class='line'>            &lt;version&gt;4.8.2&lt;/version&gt;
</span><span class='line'>            &lt;scope&gt;test&lt;/scope&gt;
</span><span class='line'>        &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>    &lt;/dependencies&gt;
</span><span class='line'>
</span><span class='line'>    &lt;build&gt;
</span><span class='line'>        &lt;plugins&gt;
</span><span class='line'>            &lt;plugin&gt;
</span><span class='line'>                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
</span><span class='line'>                &lt;version&gt;2.3.2&lt;/version&gt;
</span><span class='line'>                &lt;configuration&gt;
</span><span class='line'>                    &lt;source&gt;1.7&lt;/source&gt;
</span><span class='line'>                    &lt;target&gt;1.7&lt;/target&gt;
</span><span class='line'>                &lt;/configuration&gt;
</span><span class='line'>            &lt;/plugin&gt;
</span><span class='line'>        &lt;/plugins&gt;
</span><span class='line'>    &lt;/build&gt;
</span><span class='line'>    
</span><span class='line'>    &lt;!--发布配置，用户名和密码需要在$M2_HOME/conf/settings.xml中配置server--&gt;
</span><span class='line'>    &lt;distributionManagement&gt;
</span><span class='line'>        &lt;repository&gt;
</span><span class='line'>            &lt;id&gt;suishen-release&lt;/id&gt;
</span><span class='line'>            &lt;name&gt;Suishen-Releases&lt;/name&gt;
</span><span class='line'>            &lt;url&gt;http://maven.etouch.cn/nexus/content/repositories/Suishen-Releases&lt;/url&gt;
</span><span class='line'>        &lt;/repository&gt;
</span><span class='line'>
</span><span class='line'>        &lt;snapshotRepository&gt;
</span><span class='line'>            &lt;id&gt;suishen-snapshot&lt;/id&gt;
</span><span class='line'>            &lt;name&gt;Suishen-Snapshots&lt;/name&gt;
</span><span class='line'>            &lt;url&gt;http://maven.etouch.cn/nexus/content/repositories/Suishen-Snapshots&lt;/url&gt;
</span><span class='line'>        &lt;/snapshotRepository&gt;
</span><span class='line'>    &lt;/distributionManagement&gt;
</span><span class='line'>
</span><span class='line'>&lt;/project&gt;
</span></code></pre></td></tr></table></div></figure>


<p>其中，</p>

<ul>
<li>Maven使用groupId:artifactId:version三者来唯一标识一个唯一的二进制版本，可以缩写为GAV。</li>
<li>packaging代表打包方式，可选的值有: pom, jar, war, ear, custom，默认为jar。</li>
<li>properties是全局属性的配置</li>
<li>dependencies是对于依赖的管理</li>
<li>plugins是对于插件的管理。</li>
</ul>


<p>此外，可以通过parent实现pom的继承做统一配置管理，子pom中的配置优先级高于父pom。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version=”1.0″ encoding=”UTF-8″?&gt;
</span><span class='line'>
</span><span class='line'>&lt;project&gt;
</span><span class='line'>
</span><span class='line'>…
</span><span class='line'>
</span><span class='line'>&lt;parent&gt;
</span><span class='line'>
</span><span class='line'>    &lt;artifactId&gt;suishen-parent&lt;/artifactId&gt;
</span><span class='line'>
</span><span class='line'>    &lt;groupId&gt;suishen&lt;/groupId&gt;
</span><span class='line'>
</span><span class='line'>    &lt;version&gt;1.0&lt;/version&gt;
</span><span class='line'>
</span><span class='line'>&lt;/parent&gt;
</span><span class='line'>
</span><span class='line'>…
</span><span class='line'>
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<p>可以继承的元素如下：</p>

<ul>
<li>groupId,version</li>
<li>Project Config</li>
<li>Dependencies</li>
<li>Plugin configuration</li>
</ul>


<p>此外，<dependencyManagement>和<pluginManagement>可以统一做依赖和插件的配置管理，不同于<dependencies>和<plugins>的是，如果子pom中没有声明<dependency>和<plugin>则并不生效。</p>

<h3><a name='标准Web项目结构'></a>标准Web项目结构</h3>

<p>在Maven中，一个Web项目的标准结构，如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/buildjava/mvn-web-arch.png" alt="" /></p>

<p>其中：</p>

<ul>
<li>src/main/java         Java代码目录</li>
<li>src/main/resources    配置文件目录</li>
<li>src/main/webapp       webapp根目录</li>
<li>src/test/java         测试代码目录</li>
<li>src/test/resources    测试配置目录</li>
<li>target/classes        代码编译结果目标目录</li>
<li>target/test-classes   测试代码编译结果目标目录</li>
</ul>


<p>当然，结构是可以自定义的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;build&gt;
</span><span class='line'>   &lt;plugins&gt;
</span><span class='line'>       &lt;plugin&gt;
</span><span class='line'>           &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>           &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
</span><span class='line'>           &lt;configuration&gt;
</span><span class='line'>               &lt;warSourceDirectory&gt;WebContent/&lt;/warSourceDirectory&gt;
</span><span class='line'>           &lt;/configuration&gt;
</span><span class='line'>       &lt;/plugin&gt;
</span><span class='line'>   &lt;/plugins&gt;
</span><span class='line'>   &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
</span><span class='line'>   &lt;testSourceDirectory&gt;test/java&lt;/testSourceDirectory&gt;
</span><span class='line'>   &lt;testResources&gt;
</span><span class='line'>       &lt;testResource&gt;
</span><span class='line'>           &lt;directory&gt;test/resources&lt;/directory&gt;
</span><span class='line'>       &lt;/testResource&gt;
</span><span class='line'>   &lt;/testResources&gt;
</span><span class='line'>   &lt;directory&gt;build&lt;/directory&gt;
</span><span class='line'>&lt;/build&gt;</span></code></pre></td></tr></table></div></figure>


<p>这里，Java代码目录移到了./src中，测试代码目录到了./test/java中，测试资源也到了./test/resources,同时编译结果目录变为了./build。此外，在maven-war-plugin中，也把Web目录的war源码目录改为了./WebContent。</p>

<h3><a name='依赖管理'></a>依赖管理</h3>

<p>依赖管理是通过<dependencies>来定义的，其中：</p>

<ul>
<li>一项jar包依赖可以由groupId:artifactId:version标识</li>
<li>完整的标识为：groupId:artifactId:type:classifier:version</li>
<li>依赖在编译部署中参与的情况可以由scope来指定, 分为: compile、test、provided、system、import，默认为compile。其中的import是在Maven 2.0.9后引入的，仅仅支持在<dependencyManagement>中使用，导入外部的依赖版本管理。</li>
<li>依赖是一个树状结构，采用<strong>最近依赖</strong>原则，也可以通过exclusions标签来排除一些包。这里的最近依赖指的是在依赖树中，离当前结点最近的依赖优先级高，同样远时第一个优先。</li>
</ul>


<p>依赖下载的过程一般如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/buildjava/mvn-dependency-download.png" alt="" /></p>

<p>但上面的示例配置中，如果有一个repsitory的配置，那么依赖下载的过程则发生了改变。</p>

<p><img src="http://www.rowkey.me/post_images/buildjava/mvn-dependency-download-1.png" alt="" /></p>

<p>此外，Maven中还有一个镜像库的配置，即在Maven的settings.xml中配置Maven镜像库。和pom.xml中的repository不同的是镜像会拦截住对远程中央库的请求，只在镜像库中进行依赖的搜索以及下载。而如果只是配置了repository，那么在repository中找不到相应的依赖时，会继续去远程中央库进行搜索和下载。</p>

<p>上面所说的镜像库和repository可以通过<a href="http://www.sonatype.org/nexus/">http://www.sonatype.org/nexus/</a>进行搭建。</p>

<h3><a name='项目构建流程'></a>项目构建流程</h3>

<p>Maven的构建生命周期中几个常见phase如下：</p>

<ul>
<li>validate：验证项目以及相关信息是否正确</li>
<li>compile：编译源代码和相关资源文件</li>
<li>test：对测试代码进行测试</li>
<li>package：根据项目类型的不同进行打包</li>
<li>verify： 验证打包的正确性</li>
<li>install：将打好的包安装到本地</li>
<li>deploy：将打好的包发布到远程库中</li>
</ul>


<p>当然，对应上述每一个phase,还有pre、post、proces做前缀的一些phase。还有一些在命令行中不常用的phase如：test-compile、integration-test等。</p>

<p>针对于Java Web项目，一个完整的项目构建流程如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/buildjava/mvn-process.png" alt="" /></p>

<h3><a name='Profile多环境支持'></a>Profile多环境支持</h3>

<p>现实开发中一个很常见的需求就是需要根据不同的环境打包不同的文件或者读取不同的属性值。Maven中的profile即可解决此问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;profiles&gt;
</span><span class='line'>   &lt;profile&gt;
</span><span class='line'>       &lt;id&gt;dev&lt;/id&gt;
</span><span class='line'>       &lt;activation&gt;
</span><span class='line'>           &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
</span><span class='line'>       &lt;/activation&gt;
</span><span class='line'>       &lt;properties&gt;
</span><span class='line'>           &lt;resources.dir&gt;src/main/resources/dev&lt;/resources.dir&gt;
</span><span class='line'>       &lt;/properties&gt;
</span><span class='line'>   &lt;/profile&gt;
</span><span class='line'>   &lt;profile&gt;
</span><span class='line'>       &lt;id&gt;test&lt;/id&gt;
</span><span class='line'>       &lt;properties&gt;
</span><span class='line'>           &lt;resources.dir&gt;src/main/resources/test&lt;/resources.dir&gt;
</span><span class='line'>       &lt;/properties&gt;
</span><span class='line'>   &lt;/profile&gt;
</span><span class='line'>   &lt;profile&gt;
</span><span class='line'>       &lt;id&gt;prod&lt;/id&gt;
</span><span class='line'>       &lt;properties&gt;
</span><span class='line'>           &lt;resources.dir&gt;src/main/resources/prod&lt;/resources.dir&gt;
</span><span class='line'>       &lt;/properties&gt;
</span><span class='line'>   &lt;/profile&gt;
</span><span class='line'>
</span><span class='line'>&lt;/profiles&gt;
</span><span class='line'>
</span><span class='line'>&lt;build&gt;
</span><span class='line'>    &lt;filters&gt;  
</span><span class='line'>        &lt;filter&gt;${user.home}/love.properties&lt;/filter&gt;  
</span><span class='line'>    &lt;/filters&gt;  
</span><span class='line'>   &lt;resources&gt;
</span><span class='line'>       &lt;resource&gt;
</span><span class='line'>           &lt;directory&gt;${resources.dir}&lt;/directory&gt;
</span><span class='line'>           &lt;filtering&gt;true&lt;/filtering&gt;  
</span><span class='line'>           &lt;includes&gt;  
</span><span class='line'>               &lt;include&gt;**/*&lt;/include&gt; 
</span><span class='line'>           &lt;/includes&gt; 
</span><span class='line'>        &lt;/resource&gt;
</span><span class='line'>       &lt;resource&gt;
</span><span class='line'>           &lt;directory&gt;src/main/resources&lt;/directory&gt;
</span><span class='line'>           &lt;filtering&gt;true&lt;/filtering&gt;  
</span><span class='line'>           &lt;includes&gt;  
</span><span class='line'>               &lt;include&gt;**/*&lt;/include&gt; 
</span><span class='line'>           &lt;/includes&gt; 
</span><span class='line'>       &lt;/resource&gt;
</span><span class='line'>   &lt;/resources&gt;
</span><span class='line'>&lt;/build&gt;</span></code></pre></td></tr></table></div></figure>


<p>如此，分为dev、test以及prod三种环境，对应每一种环境，其资源文件路径都不一样。在使用mvn时，使用-P参数指定profile即可生效。</p>

<p>此外，示例中resource下的filtering设置为true, 是为了能够在编译过程中将资源文件中的占位符替换为Maven中相应属性对应的值。例如，在resources下的config.properties文件内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resouceDir=${resources.dir}</span></code></pre></td></tr></table></div></figure>


<p>在profile为dev时，编译结束此文件会变为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resouceDir=src/main/resources/dev</span></code></pre></td></tr></table></div></figure>


<p>而示例中的filters配置则是将外部文件的属性引入进来，同样也能够使用占位符。</p>

<p>如果是Web项目，想要在webapp下使用占位符，那么则需要配置maven-war-plugin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin&gt;  
</span><span class='line'>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  
</span><span class='line'>    &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;  
</span><span class='line'>    &lt;configuration&gt;  
</span><span class='line'>        &lt;webResources&gt;  
</span><span class='line'>            &lt;resource&gt;  
</span><span class='line'>                &lt;filtering&gt;true&lt;/filtering&gt;  
</span><span class='line'>                &lt;directory&gt;src/main/webapp&lt;/directory&gt;  
</span><span class='line'>                &lt;includes&gt;  
</span><span class='line'>                    &lt;include&gt;**/*&lt;/include&gt;  
</span><span class='line'>                &lt;/includes&gt;  
</span><span class='line'>            &lt;/resource&gt;  
</span><span class='line'>        &lt;/webResources&gt;  
</span><span class='line'>        &lt;warSourceDirectory&gt;src/main/webapp&lt;/warSourceDirectory&gt;  
</span><span class='line'>        &lt;webXml&gt;src/main/webapp/WEB-INF/web.xml&lt;/webXml&gt;  
</span><span class='line'>    &lt;/configuration&gt;  
</span><span class='line'>&lt;/plugin&gt;  </span></code></pre></td></tr></table></div></figure>


<h3><a name='复用test'></a>复用test</h3>

<p>当需要将写的测试用例（src/test下的资源和类）以jar包形式发布出去的时候，需要用到test-jar。首先，在打包时配置maven-jar-plugin，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin&gt;
</span><span class='line'>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
</span><span class='line'>    &lt;executions&gt;
</span><span class='line'>         &lt;execution&gt;
</span><span class='line'>            &lt;goals&gt;
</span><span class='line'>                &lt;goal&gt;test-jar&lt;/goal&gt;
</span><span class='line'>            &lt;/goals&gt;
</span><span class='line'>            &lt;configuration&gt;
</span><span class='line'>                &lt;excludes&gt;
</span><span class='line'>                    &lt;exclude&gt;*.conf&lt;/exclude&gt;
</span><span class='line'>                    &lt;exclude&gt;**/*.*.conf&lt;/exclude&gt;
</span><span class='line'>                    &lt;exclude&gt;logback.xml&lt;/exclude&gt;
</span><span class='line'>                &lt;/excludes&gt;
</span><span class='line'>            &lt;/configuration&gt;
</span><span class='line'>        &lt;/execution&gt;
</span><span class='line'>    &lt;/executions&gt;
</span><span class='line'>    &lt;configuration&gt;
</span><span class='line'>        &lt;excludes&gt;
</span><span class='line'>            &lt;exclude&gt;*.conf&lt;/exclude&gt;
</span><span class='line'>            &lt;exclude&gt;**/*.*.conf&lt;/exclude&gt;
</span><span class='line'>            &lt;exclude&gt;*.properties&lt;/exclude&gt;
</span><span class='line'>            &lt;exclude&gt;logback.xml&lt;/exclude&gt;
</span><span class='line'>        &lt;/excludes&gt;
</span><span class='line'>    &lt;/configuration&gt;
</span><span class='line'>&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure>


<p>使用时，指定dependency的type为test-jar：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;xx&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;xx&lt;/artifactId&gt;
</span><span class='line'>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
</span><span class='line'>    &lt;type&gt;test-jar&lt;/type&gt;
</span><span class='line'>    &lt;scope&gt;test&lt;/scope&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<h3><a name='Scala支持'></a>Scala支持</h3>

<p>Scala的官方构建工具是sbt，但是由于某些原因，在国内访问很慢。Maven有插件提供了对Scala项目的支持。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;build&gt;
</span><span class='line'>    &lt;plugins&gt;
</span><span class='line'>        &lt;plugin&gt;
</span><span class='line'>            &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;
</span><span class='line'>            &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>            &lt;version&gt;3.1.6&lt;/version&gt;
</span><span class='line'>            &lt;executions&gt;
</span><span class='line'>               &lt;execution&gt;
</span><span class='line'>                   &lt;id&gt;scala-compile-first&lt;/id&gt;
</span><span class='line'>                   &lt;phase&gt;process-resources&lt;/phase&gt;
</span><span class='line'>                   &lt;goals&gt;
</span><span class='line'>                       &lt;goal&gt;add-source&lt;/goal&gt;
</span><span class='line'>                       &lt;goal&gt;compile&lt;/goal&gt;
</span><span class='line'>                   &lt;/goals&gt;
</span><span class='line'>               &lt;/execution&gt;
</span><span class='line'>               &lt;execution&gt;
</span><span class='line'>                   &lt;id&gt;scala-test-compile&lt;/id&gt;
</span><span class='line'>                   &lt;phase&gt;process-test-resources&lt;/phase&gt;
</span><span class='line'>                   &lt;goals&gt;
</span><span class='line'>                       &lt;goal&gt;testCompile&lt;/goal&gt;
</span><span class='line'>                   &lt;/goals&gt;
</span><span class='line'>               &lt;/execution&gt;
</span><span class='line'>            &lt;/executions&gt;
</span><span class='line'>        &lt;/plugin&gt;
</span><span class='line'>        &lt;plugin&gt;
</span><span class='line'>           &lt;groupId&gt;org.scalatest&lt;/groupId&gt;
</span><span class='line'>           &lt;artifactId&gt;scalatest-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>           &lt;version&gt;1.0-RC2&lt;/version&gt;
</span><span class='line'>           &lt;configuration&gt;
</span><span class='line'>               &lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;
</span><span class='line'>               &lt;junitxml&gt;.&lt;/junitxml&gt;
</span><span class='line'>               &lt;filereports&gt;TestSuite.txt&lt;/filereports&gt;
</span><span class='line'>               &lt;stdout&gt;testOutput&lt;/stdout&gt;
</span><span class='line'>           &lt;/configuration&gt;
</span><span class='line'>           &lt;executions&gt;
</span><span class='line'>               &lt;execution&gt;
</span><span class='line'>                   &lt;id&gt;test&lt;/id&gt;
</span><span class='line'>                   &lt;goals&gt;
</span><span class='line'>                       &lt;goal&gt;test&lt;/goal&gt;
</span><span class='line'>                   &lt;/goals&gt;
</span><span class='line'>               &lt;/execution&gt;
</span><span class='line'>           &lt;/executions&gt;
</span><span class='line'>        &lt;/plugin&gt;
</span><span class='line'>       &lt;plugin&gt;
</span><span class='line'>           &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class='line'>           &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>           &lt;version&gt;1.2.1&lt;/version&gt;
</span><span class='line'>           &lt;configuration&gt;
</span><span class='line'>               &lt;executable&gt;scala&lt;/executable&gt;
</span><span class='line'>               &lt;arguments&gt;
</span><span class='line'>                   &lt;argument&gt;-classpath&lt;/argument&gt;
</span><span class='line'>                   &lt;classpath/&gt;
</span><span class='line'>                   &lt;argument&gt;&lt;/argument&gt;
</span><span class='line'>               &lt;/arguments&gt;
</span><span class='line'>           &lt;/configuration&gt;
</span><span class='line'>       &lt;/plugin&gt;
</span><span class='line'>&lt;/plugins&gt;</span></code></pre></td></tr></table></div></figure>


<p>net.alchim31.maven.scala-maven-plugin提供了对Scala代码的编译；org.scalatest.scalatest-maven-plugin提供了对Scala项目的测试；exec-maven-plugin配置了对Scala程序的执行。</p>

<h3><a name='常用插件'></a>常用插件</h3>

<p>Maven提供了很多插件方便开发工作。</p>

<ul>
<li><p>maven-source-plugin</p>

<p>  源码发布插件，绑定在compile阶段，执行jar goal, 将源码以jar包的形式发布出去。</p></li>
<li><p>maven-javadoc-plugin</p>

<p>  javadoc插件，将源码的javadoc发布出去。</p></li>
<li><p>maven-archetype-plugin</p>

<p>  使用此插件可以定制/使用项目模板。定制模板可以遵循archetype的结构编写文件，也可以使用mvn archetype:create-from-project从一个现有的项目生成；使用模板通过archetype:generate即可。</p></li>
<li><p>maven-tomcat7-plugin</p>

<p>  此插件可以直接使用Tomcat运行web项目，常用的命令是：<code>mvn tomcat7:run</code>。同样的还有jetty-maven-plugin。</p></li>
<li><p>maven-shade-plugin</p>

<p>  此插件是maven常用打包插件，一般是将其绑定在package阶段，执行其shade goal。能够将源码和依赖的第三方资源打包在一起以供独立运行。</p></li>
<li><p>maven-assesmbly-plugin</p>

<p>  和maven-shade-plugin一样也是打包插件，但是其功能更加强大，输出压缩包格式除了jar还支持tar、zip、gz等。</p></li>
<li><p>maven-gpg-plugin</p>

<p>  此插件是jar包的签名插件，可以对自己发布的jar包进行签名。</p></li>
</ul>


<h3><a name='提示'></a>提示</h3>

<ul>
<li>在项目版本号中加入<code>SNAPSHOT</code>后缀做为快照版本可以使得Maven每次都能自动获取最新版本而无需频繁更新版本号。</li>
<li><code>mvn -DNAME=test</code>可以传递给pom参数，使用${NAME}引用即可。</li>
<li><p>在dependency中设置optional为true, 可使得此依赖不传递出去。如下：</p>

<pre><code class="``">  ...
  &lt;artifactId&gt;suishen-libs&lt;/artifactId&gt;
  ...

  ...
  &lt;dependency&gt;
     &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
     &lt;artifactId&gt;httpasyncclient&lt;/artifactId&gt;
     &lt;version&gt;4.1.3&lt;/version&gt;
     &lt;optional&gt;true&lt;/optional&gt;
  &lt;/dependency&gt;
  ...
</code></pre>

<p>  如此，依赖于suishen-lib的项目除非在自己的pom里显示声明，否则不会依赖于httpasyncclient。</p></li>
<li><p>由于Maven自定义plugin的复杂度，不够灵活，因此很多时候都是结合Ant的灵活性和Maven一起使用的。</p>

<pre><code class="``">  &lt;target name="compile" depends="clean"&gt;
    &lt;exec executable=“mvn"&gt;
            &lt;arg line="compile"/&gt;
    &lt;/exec&gt;
  &lt;/target&gt;

  &lt;target name="compile" depends="clean"&gt;
    &lt;exec executable=“cmd"&gt;
            &lt;arg line=“/c mvn compile"/&gt;
    &lt;/exec&gt;
  &lt;/target&gt;
</code></pre></li>
<li><p>日常开发中一个工程可能比较庞大，这时可以把这个工程拆分成多个子模块来管理。一个多模块工程包含一个父pom，在其中定义了它的子模块，每个子模块都是一个独立的工程。</p>

<pre><code class="``">  &lt;project&gt;
      …
      &lt;packaging&gt;pom&lt;/packaging&gt;

      &lt;modules&gt;
          &lt;module&gt;module-1&lt;/module&gt;
          &lt;module&gt;module-2&lt;/module&gt;
      &lt;/modules&gt;
  &lt;/project&gt;
</code></pre></li>
<li>可以使用第三方的takari/maven-wrapper(<code>mvn -N io.takari:maven:wrapper -Dmaven=3.3.3</code>)来做Maven操作（<code>./mvnw clean</code>），从而可以达到类似gradle wrapper的功能：不用预先安装好Maven，还能够统一项目所使用的Maven版本。</li>
</ul>


<h2><a name='三. Gradle'></a>三. Gradle</h2>

<h3><a name='介绍'></a>介绍</h3>

<p>Gradle是目前正在开始流行的新一代构建工具，正在逐步的被大家推广使用，尤其以Android为典型。基本上现在所有的Android项目都采用Gradle做为项目构建工具。概括来讲，有以下几个特点：</p>

<ul>
<li>采用了Groovy DSL来定义配置，相比起XML更加易于学习和使用，并大大简化了构建代码的行数。此外，这种“配置即代码”的方式能够大大简化配置学习和插件编写的成本，提供了更好的灵活性。</li>
<li>在构建模型上非常灵活。可以轻松创建一个task，并随时通过depends语法建立与已有task的依赖关系。这里Gradle使用了Java插件来支持Java项目的标准构建生命周期（和Maven类似）。</li>
<li>依赖的scope简化为compile、runtime、testCompile、testRuntime四种。</li>
<li>支持动态的版本依赖。在版本号后面使用+号的方式可以实现动态的版本管理。</li>
<li>支持排除传递性依赖或者干脆关闭传递性依赖。</li>
<li>完全支持Maven、Ivy的资源库（Repository）。</li>
</ul>


<h3><a name='使用示例'></a>使用示例</h3>

<p>Gradle的配置写在build.gradle文件中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'groovy'
</span><span class='line'>apply plugin: 'idea'
</span><span class='line'>apply plugin: 'checkstyle'
</span><span class='line'>
</span><span class='line'>// --- properties ---
</span><span class='line'>ext.ideaInstallationPath = '/Applications/IntelliJ IDEA.app/Contents'
</span><span class='line'>ext.pomCfg = {
</span><span class='line'>  name 'me.rowkey.libs'
</span><span class='line'>  description '&lt;project_desc&gt;'
</span><span class='line'>  ...
</span><span class='line'>}
</span><span class='line'>sourceCompatibility = 1.6
</span><span class='line'>// --- properties ---
</span><span class='line'>
</span><span class='line'>//源码目录结构
</span><span class='line'>sourceSets.main.java.srcDirs = []
</span><span class='line'>sourceSets.main.groovy.srcDir 'src/main/java'
</span><span class='line'>
</span><span class='line'>//增加repository
</span><span class='line'>repositories {
</span><span class='line'>    mavenLocal()
</span><span class='line'>    maven{
</span><span class='line'>        url "http://maven.etouch.cn/nexus/content/groups/public/"
</span><span class='line'>    }
</span><span class='line'>    mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//依赖管理
</span><span class='line'>dependencies {
</span><span class='line'>    compile fileTree(dir: ideaInstallationPath + '/lib', include: '*.jar')
</span><span class='line'>    testCompile 'org.mockito:mockito-core:2.0.3-beta'
</span><span class='line'>    testCompile 'org.assertj:assertj-core:1.7.1'
</span><span class='line'>    testCompile 'org.springframework:spring-test:4.0.0.RELEASE'
</span><span class='line'>    
</span><span class='line'>    // 排除全部或特定的间接依赖
</span><span class='line'>    runtime ('commons-dbcp:commons-dbcp:1.4') {
</span><span class='line'>        transitive = false
</span><span class='line'>        // 或 exclude group: xxx, module: xxx
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // 然后显式声明
</span><span class='line'>    runtime 'commons-pool:commons-pool:1.6'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//for gradle wrapper
</span><span class='line'>task wrapper(type: Wrapper) {
</span><span class='line'>    gradleVersion = '3.0'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>task helloWorld
</span><span class='line'>
</span><span class='line'>helloWorld &lt;&lt; {
</span><span class='line'>    println "Hello World!"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>task testA(dependsOn:helloWorld)
</span><span class='line'>
</span><span class='line'>testA &lt;&lt; {
</span><span class='line'>    println "test"
</span><span class='line'>}
</span><span class='line'>task copyFile(type: Copy)
</span><span class='line'>//task(copyFile(type: Copy))
</span><span class='line'>
</span><span class='line'>copyFile {
</span><span class='line'>    from 'xml'
</span><span class='line'>    into 'destination'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//发布到Maven库的配置
</span><span class='line'>uploadArchives {
</span><span class='line'>  repositories {
</span><span class='line'>    mavenDeployer {
</span><span class='line'>      repository(url: &lt;repo_url&gt;) {
</span><span class='line'>       //身份认证信息推荐放在$HOME/.gradle/gradle.properties中
</span><span class='line'>        authentication(
</span><span class='line'>          userName: &lt;repo_user&gt;,
</span><span class='line'>          password: &lt;repo_passwd&gt;)
</span><span class='line'>      }
</span><span class='line'>      pom.project pomCfg
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可见，依赖的配置（dependencies）相比Maven,得到了大大的简化，对于任务的定义（task）也非常简单。</p>

<h3><a name='多模块'></a>多模块</h3>

<ul>
<li><p>首先，在工程的根目录下，创建settings.gradle。</p>

<pre><code class="``">  include "common", "api"
</code></pre>

<p>  以上即表示包含根目录下的两个子模块common和api。</p></li>
<li><p>在根目录的build.gradle中定义公共构建逻辑：</p>

<pre><code class="``">  subprojects {
      apply plugin: 'java'

      repositories {
          mavenCentral()
      }

      // 所有的子模块共同的依赖
      dependencies {
          ...
      }
  }
</code></pre>

<p>  subprojects中定义的内容对所有子模块都有效，包括属性、依赖以及Task定义。</p>

<p>  需要注意的是在多模块配置下，gradle命令会对所有子模块都执行。如果想要针对单个模块，需要指定模块前缀，如: gradle :common:clean</p></li>
<li><p>在子模块下创建build.gradle，其中的配置可以增量覆盖父工程中的公共配置。如:</p>

<pre><code class="``">  ...

  dependencies {
      compile project(':common')
      ...
  }
</code></pre>

<p>  以上声明了此模块依赖于common模块，当构建此模块时会首先编译打包common模块。相比起Maven每次都要install所依赖的模块，大大简化了使用。</p></li>
</ul>


<h3><a name='提示'></a>提示</h3>

<ul>
<li>gradle -Penv=test可以传递参数，使用env引用即可。这里需要注意的是Gradle中默认并没有提供Maven的profile支持，但是可以利用-P参数自己实现此功能。</li>
<li>Gradle中的配置中的语法和平常所见的Groovy非常不同, 其利用了Groovy的AST转换等特性实现了自己的一套语法。</li>
<li>建议使用<strong>gradle wrapper</strong>（gradle wrapper &ndash;gradle-version 3.0）来做gradle操作（./gradlew clean）。一方面可以使得项目成员不用预先安装好Gradle，还能够统一项目所使用的Gradle版本。</li>
<li>务必要保持构建脚本简洁、清晰，如：把属性、常量（如版本号）放到gradle.properties中。</li>
<li>模块化构建脚本，通过plugin机制在多个项目中重用，共享相关的配置：apply from: <link_to_gradle>。通过此种方式可以统一团队或者公司的一些构建规范、依赖版本等。</li>
</ul>


<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理的一些要点]]></title>
    <link href="http://www.rowkey.me/blog/2018/07/28/manage-notes/"/>
    <updated>2018-07-28T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/07/28/manage-notes</id>
    <content type="html"><![CDATA[<p>去年以及今年由于工作需要，参加了公司请的美国管理协会的《高价值经理人》及敏捷OKR绩效管理的培训课程，此外也阅读了《格鲁夫给管理人的第一课》、《架构即未来》、《技术管理之巅》、《OKR：源于英特尔和谷歌的目标管理利器》几本书。总体来看很多管理的理论其实日常自己也在实践，不过这些书的确让自己形成了自己的管理体系，能够有序有法的进行一些管理实践。本文从通用管理和技术管理两部分总结其中最让自己感到受用的几点心得。</p>

<!--more-->


<h2>通用管理</h2>

<ul>
<li><p>管理是推，领导是拉，领导设定目的地和通往目的地的路线图，管理设法达到目的地。</p></li>
<li><p>有效的管理是在期望的时间以可能的最低成本完成期望的品质。</p></li>
<li><p>任何工作都有产出，需要设定好指标衡量产出。疏与度量注定事情永远不会改变。</p></li>
<li><p>在一件事情越早的环节发现问题那么解决问题的成本就越小。</p></li>
<li><p>作为管理人员，要去做高杠杆率的事情，比如传授技能、知识、价值观等。</p></li>
<li><p>会议分为两种：过程导向会议和任务导向性会议。前者是规律化的，是有必要的，可以选择效率高的方式；后者是临时的，需要尽量减少此种会议。</p></li>
<li><p>凡是有会议每个参会者都要有会议记录，可以防止开会的时候开小差。</p></li>
<li><p>全体会议一定要有一个主持者，避免陷入两人交谈。主持者最好是一个职位较高的人，可以避免同级全体综合征。</p></li>
<li><p>规律周期性的一对一沟通是非常有必要的，尤其是对于不喜欢主动沟通的属下。</p></li>
<li><p>需要建立有效沟通机制和处理问题的模式，如例会，避免下属缺乏反应问题的渠道而抱怨。</p></li>
<li><p>将员工可以划分为四象限，不同的人适用的管理方法是不一样的。对于第一象限的人，需要提供其更多的机会，做好适当的监督即可；对于第二象限的人需要给予工作上的指导，使其能够走到第一象限；对于第三象限的人，需要解决其心理问题；对于第四象限的人则需要谈话改进。</p>

<p>  <img src="http://www.rowkey.me/post_images/readiness.png" alt="" /></p>

<p>  总体来说，要做第一和第二象限的人。坚决杜绝成为第四象限的人。</p></li>
<li><p>需要根据工作成熟度的不同，适当的干涉下属工作，做好必要的监督。</p></li>
<li><p>可以把权利下放，但必须对其结果承担所有的责任。把赞扬留给团队，承认失败并公开的承担责任。</p></li>
<li><p>推行某种制度/规范的时候合理的做法是先降一个力度，等适应后再100%推行。</p></li>
<li><p>敏捷性组织有利于可扩展的组织架构。</p></li>
<li><p>亚马逊的两张比萨饼团队：任何一个团队的规模不能大过两张比萨所能喂饱的人数，超过则需要拆分。</p></li>
<li><p>AKA（All Know All Things）。要营造一种公开、公平的氛围，不搞遮遮掩掩的事情，让大家都知道所有的事情。</p></li>
<li><p>混血性组织（组织之间有人员交叉，在不同的组织中担任不同的角色）需要双重汇报。</p></li>
<li><p>决策权利不能仅仅靠职位决定，还需要考虑专业技能和知识。</p></li>
<li><p>使用KPI做绩效考核如果遇到诸如难以打分、沟通不畅、抱怨强制分配等问题可以采用OKR做考核管理。</p></li>
<li><p>借鉴Google，可以采取<strong>半年绩效考核（自评+他评）+OKR->总分</strong>的方式做考核。其中采取半年的节奏是一方面是为了和OKR季度回顾的频率错开，另一方面对于某个重大失误可以凭借后续的其他贡献做中和；自评是需要自己陈述考核周期内的工作，他评需要被考核人邀请和自己工作相关的n个人给自己打分/评价；OKR部分的最终得分只是作为参考；总分最后由直属Leader综合考虑几个方面打出。</p></li>
</ul>


<h2>技术管理</h2>

<ul>
<li><p>公司不同时期的重点技术工作</p>

<ul>
<li>初创期：开发产品原型，做技术储备</li>
<li>发展期：保障产品升级、制定技术服务体系，处理业务部门的需求和抱怨</li>
<li>成熟期：技术产品创新效率的提升</li>
</ul>
</li>
<li><p>布鲁克斯定律，研发者的生产力随着团队规模的增加而减少。努力的成本是团队规模的平方。so，技术团队的规模需要控制，人数过多的话需要考虑分拆。</p></li>
<li><p>技术需要与业务高度融合，需要培训懂业务的技术专家，切忌离开业务空谈技术。</p></li>
<li><p>十人以上技术团队可以采取轮岗来提高大家的技术热情和技术广度，但需要做好岗前培训，尤其对于技术门槛较高的岗位。</p></li>
<li><p>理解事故和问题的区别。事故需要立刻解决，而问题是要找到事故的原因。</p></li>
<li><p>以价值为导向，建立需求管理闭环，给业务需求方设定信用分，价值预估，上线后进行价值验证以判定价值达成率，从而直接影响信用分。</p></li>
<li><p>面试可以采取行为面试法，即给予实际案例看其解决问题的专业能力和思维能力。</p></li>
<li><p>技术团队超过300人需要建立职业发展体系、能力发展体系以及培训发展体系。</p></li>
<li><p>技术管理者需要发展三方面能力：专业能力、领导能力以通用能力（沟通能力、执行力、团队协作、责任心等）。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[响应式微服务架构-分布式系统设计原则]]></title>
    <link href="http://www.rowkey.me/blog/2018/06/07/reactive-microservice/"/>
    <updated>2018-06-07T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/06/07/reactive-microservice</id>
    <content type="html"><![CDATA[<p>O’Reilly的电子书《Reactive Microservices Architecture》讲述了微服务/分布式系统的一些设计原则，本文是笔者阅读完此书后的理解。书籍地址：<a href="https://info.lightbend.com/COLL-20XX-Reactive-Microservices-Architecture-RES-LP.html">https://info.lightbend.com/COLL-20XX-Reactive-Microservices-Architecture-RES-LP.html</a>。</p>

<!--more-->


<p>微服务相比传统的单体应用能够带来快速的响应，以小的系统产生大的影响。而随着网络加速、磁盘成本降低、RAM成本降低、多核技术的发展、云架构技术的爆发，微服务不再受这些客观条件的限制，已经开始大规模的应用。</p>

<p>与SOA架构，微服务和它都具有相同的初衷：解耦、隔离、组合、集成、分散以及自主，但是SOA经常被误解和误用，尤其是使用ESB来支持对多个单体系统的协议（复杂、低效、不稳定）调用，使得系统变得非常复杂。而随着这些年硬件以及软件架构理念的发展，所有的系统基本都已经变成分布式架构，也带来了很多新的挑战。也就需要新的思路和理念来面对这些问题，其中本书所讲述的响应式原则（Reactive principles）即一种解决分布式系统的思路。响应式原则也并非一个新的东西，Erlang中的Actor模型即一种响应式设计。微服务是响应式原则的一个架构设计，其借鉴了SOA架构中好的理念，并使用了现代的基础服务设施（云服务、自动化工具等）。</p>

<h2>响应式微服务定义</h2>

<p>使用微服务架构最关键的一个原则就是将系统划分成一个个相互隔离、无依赖的子系统，这些子系统通过定义良好的协议进行通信。其中隔离是实现弹性、可伸缩系统的前提，并且需要在服务间建立异步通信边界，因此要在以下两方面进行解耦：</p>

<ul>
<li>时间：允许并发。</li>
<li>空间：允许分布式和移动性，即服务能够随时移动。</li>
</ul>


<p>此外，微服务还需要消除共享状态从而最小化相互协作、联结的成本，要尽量达到“不共享任何东西”。</p>

<h3>隔离任何东西</h3>

<p>隔离是微服务架构中最重要的特性。不仅仅是微服务带来的很多优势的基础，也是对设计和架构影响最大的方面。如康威定律所说，它还对组织架构有非常大的影响，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>系统的结构是对团队组织架构的反映。</span></code></pre></td></tr></table></div></figure>


<p>失败隔离是一种与“舱壁”（船舱的隔板）相关的设计模式：隔离错误、失败以防止其蔓延至所有服务，导致更大面积的失败。</p>

<p>“舱壁”这种模式已经在轮船上使用了几个世纪：创建一个个密封不漏水的空间以防止船的外壳破损或者其他泄漏。这些空间是完全互相隔离的，这样即使一个隔离区充满了水，也不会蔓延流到其他隔离空间中，从而使得船整体仍然能够运作。</p>

<p>弹性（从失败中恢复的能力）即依赖于这种舱壁和失败隔离的设计，并且需要打破同步通信机制。由此，微服务一般是在边界之间使用异步消息传输，从而使得正常的业务逻辑避免对捕获错误、错误处理的依赖。</p>

<p>进一步的，服务之间的隔离使得“持续交付”变得很容易，能够随时地部署服务而无需担心影响正常的业务。而且隔离的单个服务很容易监控、调试、测试和部署，非常便于扩展。</p>

<h3>自主地行动</h3>

<p>上面所讲的隔离是自主性的前提。只有当服务之间是完全隔离的，那么才可能实现完全的自主，包括独立的决策、独立的行动以及与其他服务协调合作来解决问题。</p>

<p>一个自主的服务仅仅保证其对外公布的协议/API的正确性即可。如此，不仅能够让我们更好地了解协作的这些系统以及对他们的建模，也能够在面对冲突、失败状况时，只在一个服务内进行排查、修复即可。</p>

<p>使用自主服务能够给服务编排、工作流管理以及服务合作上带来很大灵活性，同时也带来可扩展性、可用性、运行时管理等优势。但其付出的代价就是需要花心思在定义良好的可组合的API设计上，这个是有一定挑战性的。</p>

<h3>只做一件事，并且做好</h3>

<p>如Unix编程哲学所说：程序应该只做一件事，并且做好它。然后让他们一起工作完成任务。这也类似于面向对象编程语言中软件开发单一职责原则（SRP）的描述。</p>

<p>而在微服务中一个很大的问题就是如何正确地确定服务的大小。比如怎样的粒度才能被认为是“微”（micro）？多少行代码还能被认为是微服务。但这里“micro”其实是和职责范围有关的，就如Unix的SRP原则：只做一件事并且做好。</p>

<p>每一个服务都应该只有一个存在的原因，提供了一组相关的功能，业务和职责不会糅杂在一起。所有服务组织在一起整体上能够便于扩展、具有弹性、易理解和维护。</p>

<h3>拥有自己的私有状态</h3>

<p>微服务中有一个很关键的部分就是状态（state），很多微服务也都是有状态的实体，包括对状态和行为的封装。而在“无状态”的设计理念下，很多服务都把自己的状态下沉到一个大的共享数据库中，这也是很多传统的Web框架的做法。如此就造成了在扩展性、可用性以及数据集成上很难做好把控。而本质上，一个有着共享数据库的微服务架构本质还是一个单体应用。</p>

<p>合理的方式是一个服务既然具有单一职责，那么就应该拥有自己的状态和持久化机制，建模成一个边界上下文，有自己的域名和语言。这些也都是DDD（Domain-Drivern Design）里面的技术。微服务受DDD影响很大，其中很多微服务的上下文的概念都来自于DDD。</p>

<p>当访问一个服务时，也只能是客气的请求其状态而并不能强制其一定具有状态。如此，每个服务都能够通过事件溯源(Event Sourcing)和CQRS（Command Query Responsibility Segreation）自定义自己的状态表示和实现（RDBMS、NoSQL、Time-Series、EventLog）。</p>

<p>去中心化的数据管理和持久化（多语言持久化）能够带来很多优势。数据的存储媒介可以根据服务自己的需要选择，服务包括其数据都可以看做一个单独的单元。同时并不允许一个服务直接去访问另一个服务的数据库，如果要访问只能通过API（通过指定规范、策略和Code Review来保证）。</p>

<p>Event Log是一种消息的存储方式。我们可以以消息进入服务的形式存储（发送到服务的Commnds），即命令溯源(Command Sourcing)。我们也可以忽略命令，让命令先执行对服务产生一些作用，如果触发了状态变更，那么我们捕获此次变动并用事件溯源（Event Sourcing）将此次Event存储到EventLog中。</p>

<p>消息有序存储，能够提供服务所有的交互历史。同时消息也保存了服务的事务，也就能够对这些事务日志进行查询、审计、重放从而用于弹性伸缩、调试以及冗余等。</p>

<p>命令溯源和事件溯源是不同的语义。重放命令意味着会重放其带来的副作用。而重放事件则是执行状态的改变。需要根据具体场景的不同选择使用哪种溯源技术。</p>

<p>使用EventLog可以避免&#8221;对象关系不匹配&#8221;的问题（ORM中经常出现）。而由于其自身天然适合异步消息传输，因此绝大多数情况下，Event Log是微服务中最佳的持久化模型。</p>

<h3>拥抱异步消息传输</h3>

<p>微服务之间的通信的最佳机制就是消息传输。如上文所说，服务之间的异步边界能够在时间和空间两方面进行解耦，能够提升整体系统的性能。</p>

<p>异步非阻塞执行以及IO都是对资源的高效操作，能够最小化访问共享资源时的阻塞消耗（扩展性、低延迟以及高吞吐的最大障碍）。简单的例子：如果要发起对10个服务的访问，其中每一个请求需要耗时100ms，那么如果使用同步模式，则完成所有请求则需要10*100=1000ms。而如果使用异步模式，同时发起10个线程，则一共就需要100ms。</p>

<p>异步消息传输还能够让我们注重网络编程的限制，而不是假装这些限制不存在，尤其是在失败场景下。还能够让我们更关注工作流以及服务间的数据流、协议、交互是怎样进行的。</p>

<p>然而目前微服务的默认通信协议以REST为主，其本质是同步通信机制，比较适用于可控的服务调用或者紧耦合的服务调用上。</p>

<p>此外，使用异步消息传输的另一个需求在于对消息的持续流处理（可能是无界的）。也是我们从“data at rest”到&#8221;data in motion&#8221;的理念的改变。之前的数据是离线被使用的，而现在的数据是被在线处理的。应用对数据变更的响应需要达到实时级别：当变动发生，需要实时进行持续的查询、聚合并反馈给最终的应用。这个理念的形成经历了三个主要阶段：</p>

<ol>
<li><p>&ldquo;data at rest&rdquo;: 将大量数据存储在HDFS类似的数据存储媒介中，然后使用离线批处理技术去处理这些数据，一般会有数个小时的延迟。</p></li>
<li><p>意识到了“data in motion”正变得越来越重要：在数秒内捕获数据、处理数据并反馈给运行中的系统。Lambda即此时出现的一种架构: 加速层用来做实时在线计算；批处理层用来做复杂的离线处理。加速层实时处理的结果后续被批处理层的结果合并。这个模型解决了某些场景需要数据即时响应的问题，但其架构的复杂使得不容易维护。</p></li>
<li><p>“data in motion”: 全面拥抱移动数据的概念。传统的面向批处理的架构都在逐渐向纯流处理的架构转变。这种模型作为通信协议和持久化方案（通过Event Logging）也能够给微服务带来“data in motion”和流处理的能力。</p></li>
</ol>


<h3>保持移动，但可寻址</h3>

<p>如上述所讲，异步消息传输带来了对时间和空间的解耦。其中，对于空间的解耦也被称为“位置透明”：在多核或者多结点上的微服务在运行时无须改变结点即可以动态扩展的能力。这也决定了系统的弹性和移动性。要实现这些需要依赖云计算带来的一些特性和其“按需使用”模型。</p>

<p>而可寻址则是说服务的地址需要是稳定的，从而可以无限地引用此服务，而无论服务目前是否可以被定位到。当服务在运行中、已经停止、被挂起、升级中、已经崩溃等等情形下，地址都应该是可用的，任意客户端能够随时发送消息给一个地址。实际中，这些消息有可能进入队列排队、重提交、代理、日志记录或者进入死信队列。此外，地址需要是虚拟的，可以代表一组实例提供的服务。</p>

<ul>
<li>在无状态的服务间做负载均衡：如果服务是无状态的，那么请求被哪一个服务实例处理都是没任何问题的。也有很多种的路由算法供使用，如：轮训、广播或者基于度量信息。</li>
<li>在有状态的服务之间构建Active-Passive的冗余设计：如果一个服务是有状态的，那么可以使用sticky路由算法（同一个客户端的请求都会发送给同一个服务实例）。冗余一个passive实例是为了在主实例挂的时候接管上面的请求。因此，服务的每一个状态变动都需要同步到passive实例上。</li>
<li>有状态的服务的重定位：将一个服务实例从一个位置移动到另一个位置可以提高引用的本地性（让数据和计算靠近）和资源利用率。</li>
</ul>


<p>使用虚拟地址能够让服务消费方无须关心服务目前是如何配置操作的，只要知道地址即可。</p>

<h2>微服务系统实现</h2>

<p>一个微服务并非真正的“微服务”，一系列微服务通过通信、合作才能够解决问题，才能组成一个完整的业务系统。实现一个服务是相对简单的，困难的是其他基础设施的实现：服务发现、协作、安全、冗余、数据一致性、容错、部署以及与其他系统的集成。</p>

<h3>系统需要利用现实</h3>

<p>微服务架构带来的一个很大优势就在于它提供了一套工具，能够利用现实，模仿真实的世界来创建系统，包括真实世界的限制和机会。</p>

<p>首先根据“康威定律”，微服务的部署是和现实中工程组织/部门如何工作是相适应的。此外，还需要注意的是现实不是一致的，任何事情都是相对的，即使是时间和“现在”这个概念。</p>

<p>信息的传播速度不可能比光快，甚至大部分是很慢的，这也意味着信息通信是有延迟的。信息都是来自过去的，我们稍微思考一下可以知道信息承载的都是我们观察到的东西。而我们观察/学习到的事实至少都是很短时间之前发生的，也就是说我们总是在看过去，“现在”只是旁观者的视角。</p>

<p>每一个微服务都可以看做一个安全的小岛，提供了确定性和强一致性，上面的时间和“目前”都是绝对的。但是当离开一个微服务的边界时，就进入了一片充满非确定性的大海-分布式系统的世界。如很多人所说，构建分布式系统是困难的。但现实世界同时也提供了如何解决诸如弹性、可伸缩、隔离性等分布式问题的解决思路。因此，即使构建分布式系统是困难的，但是我们也不应该退化为单体应用，而是学习如何使用一系列的设计原则、抽象概念和工具来管理它。</p>

<p>正如Pat Helland在《Data on the Outside versus Data on the Inside.”》对&#8221;data on the inside&#8221;和“data on the outside”的对比所说：内部的数据就是我们本地的“目前”，而外部数据-事件即是来自过去的信息，服务之间的命令则是“对未来的希望”。</p>

<h3>服务发现</h3>

<p>服务发现要解决的问题就是如何定位一系列的服务从而可以使用地址去调用。其中最简单的手段就是将地址和端口信息硬编码在所有服务中或者外置在服务的配置文件中。这种方式的问题在于其是一种静态部署模型，与微服务的初衷是相矛盾的。</p>

<p>服务需要保持解耦和移动，而系统需要是弹性和动态的。因此可以通过使用控制反转（Inversion of Control）模式引入一个间接层来解决此问题。也就是说每一个服务都上报自己的信息（位置、如何访问）给一个统一的平台。这个平台被称作“服务发现”，是微服务平台的一个基础部分。这样，一旦服务的信息被存储了，服务就可以使用“服务注册中心”来查找调用服务的信息，这种模式被称作“Client-Side服务发现”。另一种策略是将信息存储、维护在一个负载均衡器（AWS的ELB)或者直接维护在服务提供方的地址中-“Server-Side服务发现”。</p>

<p>可以选择CP特性的数据库作为服务信息的存储，能够保证信息的一致性。但是这种数据库是牺牲了一定程度的可用性来达到强一致性的，并且依赖一些额外的基础设施，而很多时候强一致性并非那么需要。因此，更好的选择是使用AP特性的点对点的技术来存储，比如使用CRDTs（Conflict-Free Replicated Data Types ）与Epidemic Gossip可以实现信息的最终一致性传播，能够有更好的弹性，也不需要额外的基础设施。</p>

<h3>API管理</h3>

<p>API管理解决的问题在于如何将服务的协议和API统一管理起来，以方便服务的调用。包括协议和数据版本的升级和后退等。解决此问题可以通过引入一个负责序列化编码、协议维护以及数据传输的层，甚至直接将服务版本化。这在DDD中被称作&#8221;Anti-Corruption&#8221;层，可以加入到服务本身或者在API网关中实现。</p>

<p>假如一个客户端需要调用10个服务（每一个都有不同的API）来完成一个任务，那么对于这个客户端来说是非常繁琐的。相比起让客户端直接去调用服务，更好的方式是让客户端通过API网关服务来调用。API网关负责接受客户端的请求，然后路由请求到相应的服务（如果有必要需要转换协议），组装响应并将其返回给客户端。这样，做为客户端和服务之间的一层其就能够简化client-to-service协议。但这里如果是中心化的则很难达到高可用和可扩展性，所以使用去中心化技术（比如服务发现）实现API网关则是更好的选择。</p>

<p><img src="http://www.rowkey.me/post_images/rx-ms/gw.png" alt="" /></p>

<p>但需要注意的是API网关，包括所有的核心出服务并不是一定要自建的，理想地它应该是底层平台的一部分。</p>

<h3>管理通信模式</h3>

<p>在一个由数个微服务组成的系统中，使用点对点的通信就能完成服务间的通信工作。但是当服务数目越来越多，如果还是让他们之间直接调用，那么很快整个系统会变得混乱不堪。解决此问题需要一个机制能够解耦发送者和接受者，并且能够按照某种定义好的原则路由数据。</p>

<p>发布订阅机制是一种解决方案：发布者发布信息到某个topic中，订阅者监听此topic以监听消息。可以使用可扩展消息系统（Apache Kafka、Amazon Kinesis）或者NoSQL数据库（AP特性数据库，如Cassendra和Riak）来实现。</p>

<p>在SOA架构中，ESB承担的即这种角色。微服务中我们肯定不会使用它来桥接单体应用，但是可以将它做为一个发布系统用来广播任务和数据或者做为系统间的通信总线（通过Spark Streaming收集数据到Spark中）。</p>

<p>发布订阅协议有时候也是有不足的。比如无法提供允许程序员自定义路由规则的高级路由特性或者数据的转化、丰富、分隔以及合并等功能（可以使用Akka Streams或者Apache Camel）。</p>

<h3>集成</h3>

<p>系统与外界或者系统之间的通信都是必需的。当与一个外部系统通信时，尤其当外部系统无法把控时，那么就会有很大的失败风险（系统超载、业务失败）。因此即使协议协商得再好，也不能信赖外部服务，需要做好各种预防措施以保证自身服务的安全。</p>

<p>首先要达成一个良好的协议从而可以最小化一个系统突发超载造成服务不可用的风险，比如要避免发起的请求超过服务提供方的承载能力。也要尽量避免使用同步通信机制，否则就把自身服务的可用性放在了依赖的第三方服务的控制中。</p>

<p>避免级联失败需要服务足够解耦和隔离。使用异步通信机制是一个最佳的方案。此外，还需要通过背压（back-pressure，接收方根据自己的接受状况调节接受速率，通过反向的响应来控制发送方的发送速率）来达成数据流速度的一致性，以防止响应快速的系统压垮其中较慢的部分。而越来越多的工具和库都在开始拥抱“响应式流”（Reactive Streams）规范（Akka Stream、RxJava、Spark Streaming、Cassandra drivers），这些技术使用异步背压实时流来桥接系统，从而在总体上提高系统的可靠性、性能以及互操作性。</p>

<p>如何管理调用服务时候的失败也是微服务中一个关键的问题。捕获到错误后，先重试，而如果错误一直发生，那么就隔离服务一段时间直到服务恢复-“断路器”模式（Netflix和Akka中都有实现）。</p>

<p>面对可扩展性、高吞吐以及可用性的要求，系统集成的实现从传统的依赖于中心化服务如RDBMS/ESB逐渐变为现在采用去中心化策略（HTTP REST、ZeroMQ）或者订阅发布系统（Kakka、Amazon Kinesis）。而最近事件流平台（Event Streaming Platforms）正成为系统集成选型的趋势，其理念来自于Fast Data和实时数据管理。</p>

<p>如上文所述，服务之间使用异步通信机制能够得到很多的好处。但是如果是客户端（浏览器、APP）与服务之间的通信，使用REST经常是更好的选择。但是并非所有的地方都非得使用同步通信机制，需要根据不同的场景做不同的评估。很多情况下，开发者出于习惯都会倾向于使用同步方案，而不是根据真正的需要作出能够简化操作、提升操作性的选择。这里给出几个通常会使用同步方案建模但其本质是异步行为的事例：</p>

<ul>
<li>查询一个商品是否有货，如果此商品比较热门被卖光了，用户要得到通知。</li>
<li>如果一个餐馆的特价菜单改动了，用户要立刻知道。</li>
<li>用户对于一个网站的评论需要实时对话。</li>
<li>广告系统根据用户在页面上的行为输出不同的响应。</li>
</ul>


<p>对于上述实例，我们需要分别进行分析去理解怎样才是符合客户端和服务通信的最自然的方式。同时也经常需要根据数据的完整性约束来寻找可以弱化一致性保证（有序）的可能，目的就是找到最少的协调约束条件给用户以直观的语义：找到利用现实的最佳策略。</p>

<h3>安全管理</h3>

<p>安全管理主要是对服务的认证授权管理，限制某些service只允许某些服务访问。</p>

<ul>
<li>TLS Client Certificates也被称为相互验证、双路验证。它给每一个service都分配一个单独的私钥和证书，从而能够很好地保证服务间的认证访问。不仅仅服务要验证客户端的身份，客户端也要验证服务的身份。因此，其不仅能防止数据被窃听，而且即使在不安全的网络中也能防止对数据的拦截和转发。基于SSL之上的通信不仅安全，其也是一个公开、易于理解的标准。但是其非常复杂，无法得到底层平台的足够支持。同样的，HTTPS Basic Authentication也是双路验证，但其对SSL证书的管理也很复杂，请求也不能被反向代理缓存。</li>
<li>Asymmetric Request Signing：每一个服务都需要使用自己的私钥给自己发送的请求进行签名，同时每一个服务的公钥都要上报给“服务发现”服务。此方案的缺点在于一旦网络不可靠，那么则很难防止数据窃听或者请求重放攻击。</li>
<li>Hash Message Authentication Code (HMAC) ： 基于共享密钥来对请求进行一定规则的签名。这个方案比较简单，但是由于每一对需要通信的服务都需要唯一的一个共享密钥，整个系统则需要所有服务排列数目的共享密钥数量，实现起来比较麻烦。</li>
</ul>


<h3>最小化数据耦合</h3>

<p>微服务架构中，完成一个任务需要多个服务的协同，因此最小化服务之间的状态协作成本，有助于提升微服务系统的整体性能。</p>

<p>需要做的是要从业务的视角去分析数据以理解数据间的关系、担保和完整性约束。然后对数据进行反范式设计并在系统内定义一致性边界。如此，可以在边界内部实现强一致性。接着，需要使用这些边界来驱动微服务的设计和范围。如果设计的服务之间有很多数据依赖和关系，那么就需要去减少甚至是消除这些数据的耦合，从而避免对服务状态的协同。</p>

<h3>最小化协作成本</h3>

<p>如上节所述，已经最小化数据耦合了，但仍然还是会有业务场景需要多个服务协作完成。这个的确是无法避免的，但到了目前这一步，需要做的是可以根据需要逐渐的添加协作，而不是一开始各种耦合再逐渐去消除（比较麻烦和困难）。</p>

<p>这里提供几种可扩展、弹性伸缩的方式来协同数据改变，以达到Composability（对数据的变动无须停止数据所在的服务，也无须等待某些条件）。</p>

<ul>
<li>Apology-Oriented Programming: 基于请求原谅比请求权限容易的想法。如果你不能响应协作，那么就做出一个合理的猜测，赌一个条件已经满足，后续如果错了，那么就道歉并做补偿。这种做法和现实是非常相似的。比如航班的超售，如果起飞的时候没有座位那么就去做一些补偿措施。</li>
<li>事件驱动架构（Event-Driven Architecture ）：基于异步消息传输和事件溯源。需要区分命令和事件，命令表示一个将要产生副作用的操作意图（对未来的希望），而事件表示已经发生的事实。使用CQRS模式进行查询，将写入方（持久化事件日志）与读取方（将数据存入RDBMS或者NoSQL数据库中）分离。这里使用事件日志做状态管理和持久化具有很多好处：简化审计、调试、冗余、容错，并且允许重放过去任意时间点的事件流。</li>
<li>ACID2.0：由Pat Helland创造，定义了一组原则，目的是实现可扩展、弹性的协议以及API设计。A是Associative，表示分组消息不会产生影响，可以批量处理。C是Commutative，表示消息的顺序不重要。I是Idempotent，表示消息重复不会产生影响。D是Distributed，没有实质的意义，猜测是为了凑ACID这个首字母缩写。</li>
</ul>


<p>CRDTs是一个囊括了上面这些东西的工具，可以实现最终一致性、据有丰富的数据结构（counters、sets、maps、graphs），并且不需要协作就可以收敛聚合。其更新操作的顺序前后也并不影响最终的合并结果，能够自动安全的进行合并。虽然CRDTs最近才出现在业界视野中，但其实它已经在生产环境使用了很多年。已经有一些生产级别的库可以直接使用（Akka、Riak）。</p>

<p>然而，很多业务场景并不允许最终一致性。这时可以使用因果一致性（causal consistency）。因果关系很容易被大家理解。而且因果一致性模型能够实现可扩展性和可用性。其一般使用逻辑时间，在很多NoSQL数据库、事件日志以及分布式事件流产品中都可用。</p>

<p>分布式事务是一个经常使用的方式用来协调分布式系统的变动，但其本质需要约束并发执行，保证同一时间只有一个用户在操作。因此其成本非常昂贵，会使得系统变慢、无法扩展。<a href="http://bit.ly/22hhl6F">Saga模式</a>是分布式事务之外的一个能够实现可扩展、弹性伸缩的选择。它的理论基础在于一个长时间运行的业务事务大多时候都是由多个事务步骤组成的，而事务步骤的总体一致性能够通过将这些步骤分组成一个总体的分布式事务来实现。该技术将每一个阶段的事务与一个可补偿回滚的事务配对，如果一个阶段的事务失败了，那么总体的分布式事务就可以回滚（反向顺序）。</p>

<p><img src="http://www.rowkey.me/post_images/rx-ms/saga.png" alt="" /></p>

<h3>总结</h3>

<p>当设计一个响应式微服务时，需要坚持隔离、单一职责、自主、独占状态、异步消息传输和移动等特质。微服务需要协作才能形成一个系统去发挥作用。一个能够提供基础服务和响应式原则模式的复杂微服务平台是有必要的。</p>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务的十个反模式和陷阱]]></title>
    <link href="http://www.rowkey.me/blog/2018/06/02/microservice-pitfall/"/>
    <updated>2018-06-02T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/06/02/microservice-pitfall</id>
    <content type="html"><![CDATA[<p>O’Reilly的电子书《Microservices AntiPatterns and Pitfalls》讲述了在微服务设计实现时十种最常见的反模式和陷阱。本文基于此书，将这十个点列出。书籍地址：<a href="https://www.oreilly.com/programming/free/microservices-antipatterns-and-pitfalls.csp">https://www.oreilly.com/programming/free/microservices-antipatterns-and-pitfalls.csp</a>，更全的反模式和陷阱可见作者的视频：<a href="http://oreil.ly/29GVuDG">http://oreil.ly/29GVuDG</a></p>

<!--more-->


<h2>数据驱动迁移反模式-Data-Driven Migration</h2>

<p><img src="http://www.rowkey.me/post_images/ms-anti/data-driven-1.png" alt="" /></p>

<p>如上图所示，此种反模式的问题在于微服务的粒度没有最终确定之前就做了数据迁移，如此当不断的调整服务粒度时，那么数据库就免不了频繁迁移，带来极大的成本。更好的方式如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/ms-anti/data-driven-2.png" alt="" /></p>

<p>即先分离功能，数据库先保持之前的单体，等到服务粒度最终确定之后，再分离数据库。</p>

<h2>超时反模式-The Timeout</h2>

<p>微服务架构是由一系列分离的服务组成的，这些服务之间通过一些远程协议进行互相之间的通信。其中牵扯到了服务的可用性和响应性问题。如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/ms-anti/availability-res.png" alt="" /></p>

<ul>
<li>可用性：服务消费方能够连接服务方，并可以向其发送请求。</li>
<li>响应性：服务方能够在消费方期望时间内给予请求响应。</li>
</ul>


<p>为了防止服务的不可用和无法响应，通常的做法就是设置一个调用超时。此种做法表面上看是没问题的，但是试想一下如下情景：发起一个购买100个商品的请求，请求成功返回一个确认号。如果当请求超时但是请求在服务端已经成功执行了，此时这个交易实际是完成的，但是消费方没有拿到确认号，如果重试请求，那么服务方需要一个复杂的机制判断这是否一次重复提交。</p>

<p>一种解决此问题的方案是设置一个较长的超时时间，如一个服务的通常响应耗时需要2s，最大耗时需要5s，那么超时时间可以设置为10s。但这样的问题就是如果服务不可用，所有消费方都得等待10s，这个是非常损耗性能的。</p>

<p>解决超时反模式的方案就是使用“断路器模式”。就类似于房屋中的电源断路器，当断路器关闭，电流可以通过，当断路器打开，那么电流中断一直到断路器关闭。断路器模式就是说当检测到服务方无法响应时就打开，后续的请求都会被拒绝掉。一旦服务方可响应了，那么断路器关闭，恢复请求。其工作模式如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/ms-anti/circuit-breaker.png" alt="" /></p>

<p>断路器会持续地监测远程服务，确保其是可响应的。只要服务可响应，那么断路器会一直关闭，允许请求通过。如果服务突然不可响应，那么断路器打开，拒绝后续的请求。而后续如果断路器又检测到服务恢复了，那么断路器会自动关闭，请求也就恢复了。此种方案与超时时间相比，最大的优势就是一旦服务不可响应，那么断路器模式可以让请求立刻返回而不是需要等待一定的时间。</p>

<p>Hystrix的Netflix是此种断路器模式的一种开源实现。此外，Akka中也包含了一个断路器实现：Akka CircuitBreaker类。</p>

<p>关于“断路器模式”的详细信息可见：<a href="https://martinfowler.com/bliki/CircuitBreaker.html">https://martinfowler.com/bliki/CircuitBreaker.html</a>。</p>

<h2>共享反模式-I Was Taught to Share</h2>

<p>微服务被普遍认为是一种不共享任何东西的架构。但实际上只能是尽可能地少共享，毕竟在某些层面代码被多个服务共享也能带来一定好处。例如，与单独部署一套安全服务（认证和授权）其他所有服务都通过远程访问此服务相比，把安全相关的功能封装成jar包（security.jar），然后其他服务都集成此jar包，就能够避免每次都要发起对安全服务的访问，从而提高性能和可靠性。但后面的方案带来的问题就是依赖噩梦：每一个服务都依赖多个自定义的jar包。如此不仅打破了服务之间的边界上下文，同时也引入了诸如总体可靠性、变更控制、易测试性、部署等问题。</p>

<p>在一个使用面向对象编程语言的单体应用中，使用abstract类和接口实现代码复用和共享是一个良好的实践。但当从单体切换到微服务架构时，对于很多自定义的共享类和工具类（日期、字符串、计算）的处理要考虑到微服务间共享的东西越少越有利于保持服务间的边界上下文，从而更利于快速测试和部署。以下是几种推荐的方式，也是解决“共享反模式”的方案：</p>

<ol>
<li><p>共享项目</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/share-project.png" alt="" /></p>

<p> 将共享的代码作为一个项目在编译期与各个服务集成。此种方式便于变更和开发软件，但是最大的问题在于很难发觉哪一个共享模块被修改以及修改的原因，也无法确定自己的服务是否需要这些变更。尤其是在服务发布前期发现某一个共享模块发生了变动的话需要再一次的测试才能走后续流程。</p></li>
<li><p>共享库</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/share-library.png" alt="" /></p>

<p> 此种方式即将共享的代码作为类库集成到服务中。如此每次共享的库有改动，服务都需要重新打包、测试、重启。但相比起第一种，其有版本标记，能够更好地控制服务的部署和开发，服务开发者可以自己控制何时将共享库的改动集成进来。</p>

<p> 更进一步的，如果采用此种方案，一定要避免把所有共享的代码都打包进一个jar包中如common.jar。否则会很难确定何时要把库的变动集成到服务中。更好的做法是将共享代码分成几个单独上下文的库，如：security.jar、dateutils.jar、persistence.jar等，如此会比较容易的确定何时去集成共享库的变动。</p></li>
<li><p>冗余</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/replica.png" alt="" /></p>

<p> 此种方案违反DRY原则，在每一服务中都冗余一份共享代码，能够避免依赖共享也能够保持边界上下文。但是一旦共享的代码有变动，那么所有服务都需要改动。因此，此种方案适用于共享模块非常稳定，极小可能变动的情况。</p></li>
<li><p>服务合并</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/consolidation.png" alt="" /></p>

<p> 当多个服务共享的代码变动比较频繁时可以采用此种方案合并成一个服务，如此就避免了多了服务频繁的测试和部署，也避免了依赖共享库。</p></li>
</ol>


<h2>可达性报告反模式-Reach-in Reporting</h2>

<p>微服务中各个服务以及其相应的数据都是包含在一个单独的边界上下文中的，也就是说数据是隔离到多个数据库中的。因此，这也会使得收集微服务的各种数据生成报告变得相对困难。一般来说有四种方案解决这个问题。其中，前三种都是从各个微服务中拉取数据，是这里所说的反模式，被称作“Reach-in Reporting”。</p>

<ol>
<li><p>数据库拉取模式</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/database-pull.png" alt="" /></p>

<p> 报告服务直接从各个服务的数据库中拉取数据从而生成各种报告。此种方式简单迅速，但是会让报告服务和业务服务相互依赖，是一种数据库共享集成风格（通过共享的数据库将多个应用耦合在一起）。如此一旦数据库有改动，所有相关服务都要改动，也就打破了微服务中极为重要的边界上下文。</p></li>
<li><p>HTTP拉取模式</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/http-pull.png" alt="" /></p>

<p> 与数据库拉取模式相比，此种方式不再是直接去访问服务的数据库，而是通过HTTP接口去请求服务的数据。此种方式能够保持服务的边界上下文，但是性能比较慢，而且HTTP请求无法很好的承载大数据。</p></li>
<li><p>批量拉取模式</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/batch-pull.png" alt="" /></p>

<p> 此种方式会有一个单独的报告数据库/数据仓库来存储各个服务的聚合数据。会通过一个批量任务（离线或者基于增量实时）将服务更新的数据导入到报告数据库/数据仓库中。与数据库拉取模式一样，此种方式这也是一种数据库共享集成风格，会打破服务的边界上下文。</p></li>
<li><p>异步事件推送模式</p>

<p> <img src="http://www.rowkey.me/post_images/ms-anti/event.png" alt="" /></p>

<p> 此种方式即解决“Reach-in Reporting&#8221;反模式的方案。每个服务都把自己的发生的事件异步推送到一个数据捕获服务，后续数据捕获服务会将数据解析存储到报告数据库中。此种方式实现起来较复杂，需要在服务和数据捕获服务之间制定一种协议用于异步传输事件数据。但其能够保持服务的边界上下文，同时也能保证数据的时效性。</p></li>
</ol>


<h2>沙粒陷阱-Grains of Sand</h2>

<p>微服务实现中最有挑战的问题在于如何拆分service，如何控制服务的粒度，而正确的服务粒度则决定了微服务是否能够成功实现。服务粒度也能够影响到性能、健壮性、可靠性、易测试性、部署等。</p>

<p>“沙粒陷阱”即把服务拆分的太细。其中的一个原因就是很多时候开发者会把一个class与一个服务等同。合理的，应该是一个服务组件(Service component)对应一个服务。一个服务组件具有清晰、简洁的角色、职责，具有一组定义好的操作。其一般通过多个模块(Java Class)实现。如果组件和模块是一对一的关系，那么不仅仅会造成服务粒度过细同时也是一种不好的编程实践：服务的实现都是通过一个Class，那么此Class会非常大并且承担太多的责任，不利于测试和维护。</p>

<p>更进一步的，服务的粒度并不应该受其中实现类的数目影响：有些服务可能只需要一个类就可以实现，而有些服务会需要多个类来实现。</p>

<p>为了避免“沙粒陷阱”，可以通过以下三种测试来判断服务粒度是否合理：</p>

<ol>
<li><p>分析服务范围和功能</p>

<p> 要明确服务用来干什么？有哪些操作？一般通过使用文档或者语言来描述服务的范围和功能就能够看出来服务是否做的工作太多。如果在描述中使用了“和”（“and”）或者“此外”（“in addition”）之类的词，很有可能就是此服务职责太多。</p>

<p> 服务的高内聚是一种良好的实践，其明确一个服务提供的操作之间必须要是有关联的。如对于一个顾客服务，有以下操作：</p>

<ul>
<li>添加顾客</li>
<li>更新顾客信息</li>
<li>获取顾客信息</li>
<li>通知顾客</li>
<li>记录顾客评论</li>
<li>获取顾客评论</li>
</ul>


<p> 其中的前三个操作都是对顾客的CRUD操作，是相关联的。而后三者则无关。为了实现服务的高内聚，合理的应该是把此服务拆分成三个服务：顾客维护、顾客通知、顾客评论。</p>

<p> 如此，以粗粒度的服务开始，然后逐渐拆分成细粒度的服务有利于对微服务的拆分。</p></li>
<li><p>分析数据库事务</p>

<p> 传统的关系型数据库都提供了ACID事务特性用于把多个更新操作打包成一个整体提交，要么都成功，要么都失败。而在微服务中，由于服务都是一个个分离的应用，很难实现ACID，一般实现BASE事务（basic availability、soft state、eventual consistence）即可。但是无法避免的，仍然会有一些场景是需要ACID的。因此，当你不断的需要在BASE和ACID事务做判断和取舍的时候，很有可能就是服务粒度过细。</p>

<p> 如果业务场景无法接受最终一致性，那么最好就是将服务粒度粗化一些，把多个更新操作放到一个服务中。</p></li>
<li><p>分析服务编排</p>

<p> 这里主要说的是服务之间的互相通信。由于对服务的调用都是一次远程调用，因此服务编排会非常大的影响微应用总体的性能。此外，它也会影响系统整体的健壮性和可靠性，越多的远程调用，那么越高的几率会有失败或者超时的请求出现。</p>

<p> 如果发现完成一次业务逻辑需要调用太多的远程服务，就说明服务的粒度可能太细了。这时候就需要将服务粗化。而合并细粒度服务还能够提高性能，提升总体的健壮性和可靠性。同时也减少了多个服务间的依赖，更利于测试和部署。</p>

<p> 此外，使用响应式编程技术异步并行调用远程服务也是一种提升性能和可靠性的方案。</p></li>
</ol>


<h2>无因的开发者陷阱-Developer Without a Cause</h2>

<p>此陷阱主要讲的是开发者或者架构师在做设计时很多时候是拍脑袋在做，没有任何合理的原因或者原因是错误的，也不会做取舍。而想要解决此问题，不仅仅是架构师，开发者也需要同时了解技术带来的好处以及缺陷，从中做权衡。</p>

<p>了解业务驱动是避免此陷阱的关键一步。每一个开发者和架构师都应该清楚的了解下面这些问题的答案：</p>

<ul>
<li>为什么要使用微服务？</li>
<li>最重要的业务驱动是什么？</li>
<li>架构中的哪一点是最为重要的？</li>
</ul>


<p>假如易部署性、性能、健壮性、可扩展性是系统最看重的特性，那么对于不同的业务侧重点，微服务的粒度需求也是不同的。细粒度的服务能够达到更好的易测试性和易部署性，而粗粒度的服务则有更好的性能、健壮性以及可靠性。</p>

<h2>追随流行陷阱-Jump on the Bandwagon</h2>

<p>微服务是目前非常流行的架构理念，越来越多的公司也都在紧跟这个潮流纷纷转型微服务架构，而不管到底自己是否真的需要。为了避免此陷阱，需要首先了解微服务的优点和缺点。</p>

<p>优点：</p>

<ul>
<li>易部署：容易部署是微服务的一个很大的优点。毕竟相比起一个庞大的单体应用，一个小并且职责单一的微服务的部署非常简单并且带来的风险也会小很多。而持续部署技术则进一步放大了这个优点。</li>
<li>易测试：职责单一、共享依赖少使得测试一个微服务是很容易的。而基于微服务做回归测试与单体大应用相比也是很容易的。</li>
<li>控制变更：每个服务的范围和边界上下文使得很容易控制服务的功能变动。</li>
<li>模块化：微服务就是一个高度模块化的架构风格。这种风格也是一种敏捷方式的表达，能够很快的响应变化。一个系统模块化程度越高，就越容易测试、部署和发布变更。一个服务粒度划分合理的微服务系统是所有架构中模块化程度最高的架构形式。</li>
<li>可扩展性：由于每一个服务都是一个职责单一的细粒度服务，因此此种架构风格是所有架构分隔中可扩展性最高的。其非常容易扩展某一个或者某几个功能从而满足整体系统的需求。而得益于服务的容器化特性以及各种运维监控工具，服务也能够自动化进行启动和关闭。</li>
</ul>


<p>缺点：</p>

<ul>
<li>组织变动：微服务需要组织在很多层面进行变动。研发团队需要包含UI、后端开发、规则处理、数据库处理建模等多种职位，从而使得一个小的团队能够具有实现微服务的所有技术栈。同时，传统的单体、分层应用架构的软件发布流程也需要更新为自动化、高效的部署流水线。</li>
<li>性能：由于服务都是隔离的，因此发起对服务的远程调用肯定是会影响性能的。服务编排、运行环境都是影响性能的很大因素。了解远程调用的延迟、需要与多少服务通信都是与性能相关的需要掌握的信息。</li>
<li>可靠性：和性能一样。服务的远程调用越多，那么失败的几率就越高，总体的可靠性就会越低。</li>
<li>DevOps：随着微服务架构而来的是成千上百的服务。手动管理这么多的服务是很不现实的。这就对于自动化运维部署、协作提出了很高的挑战。需要依赖非常多的操作工具和实践，是一个非常复杂的工作。目前差不多有12种类型的操作工具（监控工具、服务注册、发现工具、部署工具等）和框架在微服务架构中被使用，其中每一种又包含了很多具体的工具和产品供选择。对于这些工具和框架的选择一般都会需要将近数月的研究、测试、权衡分析才能做出最适合的技术选型。</li>
</ul>


<p>了解了微服务的优缺点后，下一步则需要根据实际的业务来分析微服务是不是解决这些问题的最佳方案。可以采取以下问题：</p>

<ul>
<li>业务和技术的目标是什么？</li>
<li>使用微服务是为了完成什么？</li>
<li>目前和可预知的痛点是什么？</li>
<li>应用的最关键的技术特性是什么？（性能、易部署性、易测试性、可扩展性）</li>
</ul>


<p>回答这些问题再结合微服务的优缺点能够让你明确现在是否是使用微服务的适当时机。</p>

<p>除了微服务以外，还有其他7种比较普遍使用的架构供选择：</p>

<ul>
<li>基于服务的架构（Service-Based）</li>
<li>面向服务的架构（Service-Oriented）</li>
<li>分层架构（Layered）</li>
<li>微内核架构（Microkernel）</li>
<li>基于空间的架构（Space-Based）</li>
<li>事件驱动架构（Event-Driven）</li>
<li>流水线架构（Pipeline）</li>
</ul>


<h2>静态合约陷阱-The Static Contract</h2>

<p>微服务的消费方和服务提供方之间会有一个合约/协议用来规定输入输出数据的格式、操作名称等等。一般情况下这个合约是不变的。但是如果没有使用版本号来管理服务接口，那么就会进入“静态合约”陷阱。</p>

<p>给合约打上版本标记不仅仅能够避免巨大的变动（服务提供方修改合约使得所有消费方也都得修改），还能够提供向后兼容性。这里有两种技术可以实现合约的版本号：</p>

<ul>
<li><p>在头部信息附加版本号</p>

<p>  <img src="http://www.rowkey.me/post_images/ms-anti/header-version.png" alt="" /></p>

<p>  如图，此种方式即在远程访问协议的头部添加版本信息。而如果远程协议使用的是REST，那么还可以使用vendor mime type（vnd）来指定合约的版本号。如下：</p>

<pre><code class="``">  POST /trade/buy
  Accept: application/vnd.svc.trade.v2+json
</code></pre>

<p>  服务接受到请求，能够通过正则等手段简单解析出其中的合约版本号再根据版本号做相应的处理。</p>

<p>  如果使用消息队列，那么可以将版本号放置在属性部分(Property section)。JMS的一个例子如下：</p>

<pre><code class="``">  String msg = createJSON("acct","12345","sedol","2046251","shares","1000");
  jsmContext.createProducer()
      .setProperty("version",2)
      .send(queue,msg);
</code></pre></li>
<li><p>在合约本身中附加版本号</p>

<p>  <img src="http://www.rowkey.me/post_images/ms-anti/schema-version.png" alt="" /></p>

<p>  此种方式版本号独立于远程访问协议，与头部信息版本号相比，这也是其最大的优点。但与此同时，其缺点比较多。首先要从请求信息主体中解析版本号，会出现很多解析的问题。其次，合约的模式可能会非常复杂，使得很难做数据转换。最后，服务还要引入对模式的验证逻辑。</p></li>
</ul>


<h2>我们到了吗陷阱-Are We There Yet</h2>

<p>微服务架构中，各个服务都是独立的个体，也就意味着所有客户端或者API层和服务之间的通信都是一次远程调用。如果对这些远程调用的耗时没有什么概念，那么就陷入了“Are We There Yet”陷阱。合理的做法需要去测试远程访问的平均延迟、长尾延迟（95%、99%、99.%之外的请求延迟）等指标。而很多时候即使有很好的平均延迟，但是较差的长尾延迟会造成非常大的破坏。</p>

<p>在生产环境或者准生产环境测试有助于去了解应用的真实性能。例如，一个业务请求需要调用四个服务，假设一个服务调用的延迟是100毫秒，那么加上业务请求本身的延迟，完成此次业务请求共需要500毫秒的延迟。这和单单从代码上去看得出的结论是不一样的。</p>

<p>了解目前所用协议的平均延迟是一方面，另一方面则需要对比其他远程协议的延迟，从而在合适的地方使用合适的协议。如：JMS、AMQP、MSMQ。</p>

<p><img src="http://www.rowkey.me/post_images/ms-anti/comparing-protocol.png" alt="" /></p>

<p>如图，AMQP协议的性能是最好的。那么结合业务场景，就可以选择REST作为客户端与服务间的通信协议，AMQP做为服务之间的通信协议以提高应用的性能。</p>

<p>当然，性能并非在选择远程协议时唯一考虑的因素。下一节中就会考虑利用消息队列的一些额外功能。</p>

<h2>REST使用陷阱-Give It a Rest</h2>

<p>REST现在是微服务中用的最多的通信协议。流行的开发框架如DropWizard、Spring Boot都提供了REST支持。但是如果只选择REST这一种协议，不去考虑其他诸如消息队列的优势，那么就陷入了“REST使用”陷阱。毕竟异步通信、广播、合并请求事务这些需求，REST是很难实现的。</p>

<p>消息队列标准目前包括平台特定和平台无关两种。前者包括Java平台中的JMS和C#平台的MSMQ，后者则是AMQP。对于平台特定的消息标准JMS，其规范了API，因此切换broker实现（ActiveMQ、HornetQ）时无需修改API，但由于底层通信协议是不同的，集成的客户端或者服务端jar包需要随着修改。对于平台无关的消息标准，其规范了协议实现标准，并没有规范API。使得不同平台之间都可以互相通信，而不管实际产品是什么。如一个使用了RabbitMQ的客户端可以很容易地与一个StormMQ通信（假设使用的协议相同）。也就是其独立于平台的特性使得RabbitMQ成为微服务架构中最流行的消息队列。</p>

<ol>
<li><p>异步请求</p>

<p> 异步通信是消息队列适用的场景之一。服务消费者发起请求后无需等待服务方响应能够提高总体的性能，同时调用方无需担心调用超时，也就无需使用断路器，从而提高了系统的可靠性。</p></li>
<li><p>广播</p>

<p> 将消息广播给多个service是消息队列的又一个适用场景。一个消息生产者向多个消息接受者发送消息，无需知道谁在接受消息以及如何处理它。</p></li>
<li><p>事务请求</p>

<p> 消息系统提供了对事务消息的支持：如果多个消息被发送到了在一个交易上下文的多个队列或者主题中时，那么直到消息发送者commit，服务才会真正的接受到相应的所有消息（在commit之前会一直保存在队列中）。</p>

<p> 因此对于服务消费者需要合并多个远程请求到一个事务中的场景可以选择事务消息。</p></li>
</ol>


<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java后端技术概览]]></title>
    <link href="http://www.rowkey.me/blog/2018/05/12/java-tech-overview/"/>
    <updated>2018-05-12T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/05/12/java-tech-overview</id>
    <content type="html"><![CDATA[<p>一个合格的Java后端工程师需要掌握哪些技能呢？扫描下面的二维码可以看到<a href="https://raw.githubusercontent.com/superhj1987/pragmatic-java-engineer/master/book/server-tech/media/java-skill-tree.png">Java后端技术概览图</a>。</p>

<p><img src="https://raw.githubusercontent.com/superhj1987/pragmatic-java-engineer/master/book/chapter1-servertech/media/tech-tree.png" alt="" /></p>

<!--more-->


<h2>软件开发的核心原则</h2>

<p>此处所说的是软件开发应该遵循的一些核心原则：</p>

<ul>
<li>Don&rsquo;t Repeat Yourself: 这是软件开发的一个基础原则，即不要做重复性劳动。也是现在所说的“极客文化”的一种。代码重复、工作重复在软件开发中都是不合理的存在。利用各种手段消除这些重复是软件开发的一个核心工作准则。</li>
<li>Keep it simple stupid：即KISS原则。在做软件设计的工作中，很多时候都不要想得过于复杂，也不要过度设计和过早优化，用最简单且行之有效的方案也就避免了复杂方案带来的各种额外成本。既有利于后续的维护，也利于进一步的扩展。</li>
<li>You Ain’t Gonna Need It: 即YAGNI原则。只需要将应用程序必需的功能包含进来，而不要试图添加任何其他你认为可能需要的功能。因为在一个软件中，往往80%的请求都花费在20%的功能上。</li>
<li>Done is better than perfect: 在面对一个开发任务时，最佳的一个思路就是先把东西做出来，再去迭代优化。如果一开始就面面俱到，考虑到各种细节，那么很容易陷入牛角尖而延误项目进度。</li>
<li>Choose the most suitable things: 这是在做方案选择、技术选型时候的一个很重要的原则。在面对许多技术方案、开源实现的时候，务必做到的是不能盲目求新，要选择最合适的而非被吹得天花乱坠的。</li>
</ul>


<h2>软件过程</h2>

<p>一个软件的生命周期中，除了开发还有很多其他步骤，也都是需要掌握的一些技术。</p>

<ul>
<li>项目管理：项目管理对于一个软件的开发是非常重要的，能够保证项目进度有条不紊地进行，在可控的时间内以一定的质量交付。瀑布开发模型、螺旋开发模型是传统的项目管理模型。在互联网的开发工作中，敏捷开发则是比较受推崇的开发方式。所谓敏捷开发即快速实现原型，然后快速迭代。Scrum是目前普遍流行的敏捷开发方式之一。</li>
<li>测试驱动开发：在平时的开发过程中，目前比较流行也是行之有效的一种方式就是Test Driven Develop，即测试驱动开发。此种方式的核心就是编写单元测试。简单来讲，就是先完成某一个功能的单元测试用例，然后在逐步消除测试用例的编译错误的过程中完成功能的开发。</li>
<li>持续集成：某一个软件功能完成开发之后，后续还有测试、预发布、部署等过程。整个过程称之为集成，而持续集成指的是无需人工干预可以不断地进行这个过程。Jenkins、Quick Build以及后起之秀Travis CI都是比较典型的持续集成工具。 此外，持续集成的子过程持续部署指的是将集成结果部署到不同的环境供用户使用，并且立即反馈部署结果，Rundeck是这方面用的比较多的软件。它提供了Web界面和命令行来执行shell命令和job工作流，能够自定义job步骤设置shell命令/job运行周期，可以在任意数量的服务器上批量执行不同的任务，降低对自动化的部署、执行、维护的工作难度。</li>
</ul>


<h2>日常开发</h2>

<p>日常开发指的是一些日常需要掌握的技能、工具等。</p>

<ul>
<li>编辑器：开发中现在用的比较多的编辑器包括Emacs、Vim和SublimeText。笔者用的最多的就是SublimeText，基本能够满足自己的开发需求，包括编写脚本代码、查看代码文件等。Vim和Emacs这两款编辑器相对SublimeText来说需要记住很多命令，有一定的上手门槛。</li>
<li>源码版本管理：代码的版本管理工具由CVS到SVN再到现在的Git，已经在事实上形成了以分布式版本管理为主的版本管理方案。基于Git，可以采用Git Flow做为源码管理模型。</li>
<li>项目工具：Github是一个第三方Git中央仓库，目前是世界最大的开源代码库，也能够做为私人的代码管理软件；Facebook开源的Phabrictor提供了非常强大的任务管理、Bug管理、测试、代码管理等，但其上手门槛相对较高；禅道是国人开发的一款项目管理工具，但是其免费版功能有限；以Tower.im为代表的第三方项目管理服务也是一个可选择的方案，风险在于数据都不再是私有的。</li>
</ul>


<h2>运行环境</h2>

<p>后端应用开发完成之后是需要部署到服务器上对外提供服务的。从最开始的直接在物理机上部署服务到后来的虚拟环境、云环境再到现在火热的容器，直至最近兴起的无服务器技术。都是为了让服务的运行环境能够更加便于建立、更容易维护、更容易扩展。</p>

<ul>
<li>Linux: 说到后端服务器肯定绕不过Linux。至少现在互联网的后端服务绝大多数都是部署在Linux的各种服务器版本中的。其中CentOS、Ubuntu以及Debian是用的比较多的版本。对于Linux，需要熟练掌握的就是很多常用Shell命令如ps、netstat、lsof、ss、df、dh等等。此外，很多性能分析命令如top、vmstat、iostat、sar等也需要熟练使用。</li>
<li>应用服务器：就Java来讲，很多时候开发的都是Web应用，以HTTP协议对外提供服务。除了对性能要求比较苛刻的情况下会自己构建HTTP服务之外，大部分情况是需要依赖于支持Java程序的应用服务器的。目前最为常用的有：Tomcat、Jetty。严格来讲，这两者只是Servlet容器，真正的JavaEE应用服务器如Jboss、Weblogic在互联网领域很少使用。当然，这些软件并没有提供URL重写、请求委托等Web服务器功能，还不足以担当完整Web服务器的角色。Nginx则是目前最为流行的Web服务器。</li>
<li>负载均衡：在高并发流量环境下，后端服务会以集群的模式对外提供服务。在集群的前面，需要负载均衡器将请求分配到集群的各个结点上。LVS是最为流行的四层负载均衡软件,HAProxy是另一个即支持四层又支持七层负载均衡的软件，Nginx则是七层负载均衡最为流行的解决方案。当然，性能最为好的负载均衡方案是以F5为代表的硬件负载均衡，但由于其昂贵的成本因此在互联网团队中很少使用。此外，这里需要补充的是为了保证同等角色的服务的高可用，如LVS经常作为流量的入口，因此会部署多个LVS结点互为主备防止一个挂掉的时候造成服务不可用。而实现互为主备的技术目前用的最多的就是Keepalived。</li>
<li>虚拟化：虚拟化技术是前几年经常用来做私有云的一种技术。即将自己的物理主机通过虚拟化技术分裂为多个虚拟主机，能够隔离资源。其中，VPS（虚拟专用服务器）的代表技术包括：微软的Virtual Server、VMware的ESX Server、SWsoft的Virtuozzo。此外，OpenStack提供的构建私有IIAS的功能、Cloud Foundry提供的构建私有平台运行环境以及Docker、Kunernetes带来的容器服务都是虚拟化技术的一种。</li>
</ul>


<h2>第三方服务</h2>

<p>虽然从根本上讲所有的软件服务都是可以自己开发的或者部署到自己服务器上的。但是受限于成本、周期或者其他客观因素，很多服务还是需要使用第三方的。</p>

<ul>
<li>IAAS：Infrastructure As A Service, 是云计算最开始的一种模式，现在基本上所有的云服务商都有IAAS的服务。其中，全球最强大的云服务提供商是亚马逊的AWS，国内的则当属阿里云。就目前来看，即使是强如AWS也会出现一些运维故障，因此国内的这些云计算提供商很多时候的服务健壮性、运维响应更是经常被人吐糟。就笔者自己的经历来看。2010年左右，盛大云的云服务其实做的还不错，但后来由于种种原因现在基本已经没啥份额了。国内除了阿里云，UCloud算是专注做云计算的一个比较靠谱的公司了。此外，还有一个青云，做的东西略显高大上，也是一个不错的选择。当然，现在这些云服务商早就不仅仅是IAAS了，也做了很多PAAS的服务。</li>
<li>PAAS：Platform As A Service，即只需要提交代码到指定的运行环境，其他的诸如代码打包、部署、IP绑定都由平台完成。除了可以使用Cloud Foundry构建自己的PAAS平台以外，现在最为流行的第三方PAAS服务有：新浪的SAE、百度的BAE以及Google的GAE。</li>
<li>域名：有个可以提供服务的应用后，那么域名也是一个必须的基础设施。一个好的域名不仅仅代表企业的形象，也能够更加方便用户的记忆与传播。目前购买域名可以通过国外的name.com、godaddy以及国内的万网等。有了域名之后下一步就得进行备案，域名提供商一般都提供了配套服务或者去找一些代理也可以办下来。此外，对于域名的解析，域名提供商一般会内置解析功能，也可以使用独立的DNS服务，如dnspod。</li>
<li>CDN: 内容分发网络，即就近请求的一种技术实现。服务提供方将会被大量访问的内容在全国的多个结点都做缓存，这样当用户访问时就能够就近选择，从而减少网络传输延时，提高访问速度。国内目前七牛和又拍都提供了不错的CDN服务，当然像阿里云、UCloud这种综合云服务商也都有CDN服务。</li>
<li>邮件发送：这个主要需要依赖邮件服务器，然后通过SMTP协议就可以实现发送。可以选择自己搭建，也可以选择诸如腾讯邮箱、网易邮箱等。</li>
<li>短信发送：使用短信发送验证码、营销短信是很常见的应用场景。由于短信是需要运营商支持的，所以这一块基本上都是需要依赖第三方代理的。市面上也有很多短信网关代理。</li>
<li>消息推送：在移动应用上，推送已经成为一个标配功能。目前个推应该是第三方推送服务中的佼佼者，而且由于其客户很多，在联盟唤醒上有很大的优势。</li>
<li>开放平台：通过开放平台，可以使用OAuth等协议获取用户在第三方平台上的信息实现第三方平台登录等。目前，微博、微信、QQ是最常见的第三方登录方式，基本上都是使用OAuth协议为第三方开发者提供服务的。</li>
<li>支付接口：支付接口是很多内置购买功能软件的必备组件。目前，接入最多的无非是支付宝和微信，都提供了开放平台供商家接入。当然，也有直接绑定银行卡支付的，此时需要走的就是银行或者银联的网关接口。</li>
</ul>


<h2>计算机基础科学知识</h2>

<p>对于像数据结构、算法、计算机网络、操作系统、计算机组成原理这些计算机科学基础知识，不管是后端还是其他领域都是必须的技能，也是所有软件开发的基础。扎实的计算机科学基础才能让你在学习、使用某种技术开发软件、调试软件、排查问题时能够心里有底、有据可循。</p>

<ul>
<li>数据结构：数据结构是组成程序的基础。经典的数据结构包括：字符串、数组、链表、哈希表、树（二叉树、平衡树、红黑树、B树）、堆栈、队列、图。</li>
<li>算法: 经典的排序和查找算法在平时的开发工作中经常会用到，如：冒泡排序、插入排序、选择排序、归并排序、快速排序、希尔排序、堆排序以及二分查找等。此外，在函数/方法的算法实现中要注意递归和迭代各自的优缺点。而衡量算法性能无外乎空间复杂度和时间复杂度。</li>
<li>业务相关算法：除了上面的基本算法之外，业务中还会经常涉及到一些更为复杂的算法，如：压缩算法、LRU缓存算法、缓存一致性、编译原理中的状态机等。此外，目前越来越火的机器学习中有很多算法也是在很多业务场景中有很大用途的，如：用于文本分词的结巴分词和中科院ICTCLAS；用于关键词提取的TF-IDF和TextRank；用于计算文本相似度的主题模型、Word2Vec、余弦相似度以及欧几里得距离；用于文本分类的朴素贝叶斯；用于推荐的聚类、协同过滤、用户画像、隐语义模型等。</li>
<li>计算机网络： TCP/IP协议是网络最根本的协议，其七层/四层协议栈的设计都是非常精华的东西，连接的建立、断开以及连接的各种状态的转换都是排查、解决网络问题的根本依据。从TCP/IP往上，HTTP协议是现在绝大多数后端应用对外提供的协议，发展到现在已经将要步入HTTP2.0时代，带来了持久连接、连接复用等令人振奋的新特性。此外，基于HTTP的HTTPS协议由于其安全性在逐渐的成为后端服务对外开放的主流协议。业务层面，基于HTTP协议的RESTful规范正成为对外接口的主流规范，而OAuth2.0协议也在成为开放平台对外的主流协议。除了HTTP之外，SMTP是另一个基于TCP/IP的应用协议，主要用在发送邮件上。</li>
<li>设计模式： 在软件开发中，前人的经验形成了很多经典设计模式供我们使用，能够使得软件的实现可服用、可扩展、可维护。经典的工厂模式、简单工厂模式、单例模式、观察者模式、代理模式、建筑者模式、门面模式、适配器模式、装饰器模式在日常的很多开发场景下都具有很重要的意义。</li>
</ul>


<h2>数据</h2>

<p>现在互联网的所有业务其实都是围绕数据来进行的。而数据传输、数据存储、数据分析处理都是关键的部分。</p>

<ul>
<li>高速缓存：目前用的最为广泛的缓存软件Redis能够支持丰富的数据结构，如：字符串、列表、有序集合等多种数据的存储。了解缓存实现的原理、内存淘汰的策略能够更好地使用缓存。此外由于缓存的成本较高，在使用缓存的时候一定要做好量化和存储优化工作。</li>
<li>数据库：掌握数据库的很大一个关键点就在于对索引的使用，可以说，正确地使用索引就基本等于掌握了数据库的使用。目前绝大多数据库都是使用B树做为索引的数据结构，目的就是为了利用磁盘顺序读写的特性。不同的数据库由于本身设计目的的不同，都有一些独特的优势，如：MongoDB天然支持sharding，但受限于NoSQL，在重事务、有关联关系的场景下并不适用；HBase使用LSM作为底层数据结构，牺牲了读性能来换取高速的写性能。</li>
<li>搜索引擎：搜索引擎主要应对全文检索以及多维度查询的业务场景。掌握搜索引擎使用的数据结构、集群方式、配置的关键点有助于更好地使用搜索引擎服务于业务应用。</li>
<li>消息队列：消息队列有两种角色：生产者和消费者，两种角色对于消息队列的需求也不一样。其中，对于消费者来说，消息消费的方式包括发布-订阅和队列两种。消息队列在语义保证上分为：At Most Once、At Least Once、Exactly Once三种模式，需要更具特定的业务场景选择合适的语义保证。此外，消息队列对于高可用、消息安全的保证决定了此消息队列的可靠性。</li>
<li>数据存储和分析：数据存储下来最终还是要用来做分析和处理的。数据的处理分为离线处理和实时处理。离线处理的优势在于能够处理大量数据，但是一般会有T+1的延迟，适用于计算量大但是对于结果允许有延时的场景。但对于离线数据分析，还有一个很关键的就是数据倾斜问题。所谓数据倾斜指的是region数据分布不均，造成有的结点负载很低，而有些却负载很高，从而影响整体的性能。因此，处理好数据倾斜问题对于离线数据处理是很关键的。而实时处理一般是流式处理方式，适用于数据能够转换为数据流，对于结果要求及时性的场景。对于实时数据分析，需要注意的就是实时数据处理结果写入存储的时候，要考虑并发的问题，虽然对于Storm的Bolt程序来说不会有并发的问题，但是写入的存储介质是会面临多任务同时读写的。通常采用的方案就是采用时间窗口的方式对数据做缓冲后批量写入。此外，基于Yarn、Mesos这种资源统一管理调度系统进行数据分析需要根据运行原理的不同进行适当的配置。</li>
<li>数据同步：数据仓库的数据来源除了直接的日志外还有一个很关键的就是业务数据库。从业务数据库到数据仓库的过程称为数据同步。有基于SQL的同步方案，也有基于MySQL binglog的增量同步方案。</li>
</ul>


<h2>Java</h2>

<p>对于Java方面的技能来说，主要有两个大的部分，包括Java编程和JVM。</p>

<p>先来看一下Java编程部分，这也是Java工程师最最基础的技能。</p>

<ul>
<li>IDE: 目前用的最多的Java IDE当属Eclipse和Intellij IDEA。前者是老牌IDE，逐步淘汰了Jbuilder以及Netbeans，占领了大部分Java IDE市场。后者则是后起之秀，由于其增量编译、智能分析代码等带来的性能提升，现在已经得到了大规模使用，大有取代Eclipse之势。</li>
<li>核心语法：目前用的最多的当属JDK6的Java语法。而到了Java7引入了try with resource、switch string、diamonds等语法。Java8则又引入了lambda、stream等语法。</li>
<li>集合类：集合类是Java语言中非常精华的部分，包括：HashMap、ArrayList、LinkedList、HashSet、TreeSet以及线程安全的ConcurrentHashMap、ConcurrentLinkedQueue等线程安全集合。了解他们的实现原理以及查询、修改的性能以及使用场景是非常必要的。</li>
<li>工具类：Google Guava、Apache commons、FastJson提供了很多JDK本身没有的工具类、集合等。此外，ASM字节码操作以及CGLIB代码生成能够提供更底层的java编程功能。</li>
<li>高级特性：抛开Java核心的基本编程，并发编程、泛型、网络编程、序列化RPC都属于java的高级编程特性。其中并发编程需要掌握Executors提供的各种并发工具、Java7带来的fork/join框架以及CountDownLatch、Semaphore、CyclicBarrier等同步工具；网络编程要区分好BIO、NIO以及AIO；序列化中除了JDK自带的序列化实现之外，Protobuf和Kryo是比较高效的第三方实现；RPC的实现中，Thrift、Hessian、Dubbo以及RMI则是比较常用的几个协议,其中的Hessian是基于Http协议的，Dubbo是基于TCP协议，而Thrift则同时支持。</li>
<li>JavaEE: JavaEE现在是Java应用最为普遍的一个领域。Servlet是JavaEE中最根本的组件之一。而Servlet3.0带来的异步Servlet提高了其处理请求的性能。</li>
<li>项目构建：目前用的最多的Java项目构建工具包括Maven和Gradle，提供了源码包依赖管理、编译、打包、部署等一系列功能。</li>
<li>编程框架：Spring是Java编程中避不开的一个框架，发展到现在除了Spring核心的IOC、AOP之外，SpringMVC、Spring Data、Spring Cloud、Spring Boot等等都给Java开发者们带来了开发上的便利，大大提高了开发效率；ORM框架MyBatis也是Java领域比较火的框架之一，实现了数据库记录到Java对象的映射操作；Jersey则提供了从客户端到服务端的一整套符合RESTful规范的开发框架。此外，Vert.x、Spring Flux这种非常适用于IO密集型应用的异步响应式编程框架也开始兴起。</li>
<li>测试：测试是任何编程都需要的一步。黑盒测试主要指的通常进行的功能测试，白盒测试则主要指的对代码功能、质量进行的测试。此外，关键的单元测试则是开发工程师需要着重注意的地方，“测试驱动开发”的理念也是值得推崇的开发方式。JUnit是目前Java中实现单元测试的主流方案。</li>
</ul>


<p>一般来说掌握上面所述的Java编程技能是能够应付大多编程工作的。但是如果在代码层面已经做到最大努力却还是达不到性能要求的时候，就需要在JVM虚拟机层面做一些努力了。可以说掌握JVM相关技术是Java开发进阶的一个关键步骤。</p>

<ul>
<li>虚拟机实现: Java的虚拟机实现除了我们常用的HotSpot外，还有JRockit、J9以及移动平台的Dalvkit、ART（Android4.4后引入）。我们通常锁描述的JVM优化绝大多是是针对HotSpot虚拟机来说的。</li>
<li>类加载机制：JVM的类加载机器遵循双亲委派原则，即当前类加载器需要先去请求父加载器去加载当前类，如果无法完成自己才去尝试进行加载。OSGI框架则打破了此机制，采用了平等的、网状的类加载机制，以实现模块化的加载方案。</li>
<li>运行时内存组成: 程序计数器、堆栈、方法区、堆、堆外内存，这些一起组成了JVM的运行时内存。</li>
<li>Java内存模型：Java的主内存+线程私有内存的模型是线程安全问题产生的根本。</li>
<li>GC原理和调优：与C、C++这些语言相比，GC是Java的优势，但因为GC的细节被JVM屏蔽了，在对内存、性能要求非常苛刻的情况下难以进行自由控制，某种程度这也是劣势。如果想在某些场景下发挥GC的最大性能，能做的就是对GC的各种参数做优化配置，如新生代和老年代的垃圾回收器选择、各种垃圾回收参数的配置等。此外，很多时候由于代码质量或者外部客观因素，造成了JVM频繁GC，需要使用相关的工具快速进行问题定位和解决。</li>
<li>性能调优和监控工具：JDK自带了很多强大的调优和监控工具，包括jmap、jstack、jcmd、jconsole、jinfo等。此外，btrace是一款非常强大的在线问题动态排查工具，能够无须重启Java进程，动态的插入一些代码逻辑，从而拦截代码执行逻辑打印日志，从而排查问题。</li>
</ul>


<h2>系统架构</h2>

<p>一个应用从0开始一般会经历单体应用、垂直应用到分布式服务架构的演化（具体的会随着业务的不同有所不同）。如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/javatech/arch.png" alt="" /></p>

<ul>
<li>单体应用：当应用规模、团队规模比较小的时候，只需要一个包括了所有功能的应用即可。减少部署结点，也减少了部署成本。此时，对数据库的ORM操作是架构实现的关键点。</li>
<li>垂直应用：当应用的用户规模越来越大，请求量越来越高的时候。单体应用增加结点带来的资源浪费会凸现出来，因为绝大多数接口请求量并没有特别大，根本没必要扩充到多个结点。此时，就可以将单体应用拆分成互不相关的几个应用，分别对外提供服务。此时，加速每个应用开发的MVC框架是架构实现的关键点。</li>
<li>分布式服务：当垂直应用越来越多，应用之间的交互不可避免。抽离核心业务单独部署，逐渐形成稳定的服务中心。而随着团队规模的相应扩大，服务会随着团队的增多变得越来越多，粒度也会变得越来越小,也就逐步形成了分布式服务的架构，而当粒度细到某种程度、服务数量多到一定程度则可以称之为微服务。即在设计好业务边界之后将原来的单体应用分解成一个个细粒度的服务，彼此之间通过某种方式进行通信。微服务架构的关键在于如何做好服务的治理、调度、维护工作。目前，Dubbo算是微服务架构中用的比较多的框架，但Dubbo仅仅解决了微服务架构中的一部分问题。Spring Cloud则基本上涵盖了微服务架构的各个方面。</li>
</ul>


<h2>部署架构</h2>

<p>对于Web应用来说，LVS+Nginx+Tomcat+MySQL+Redis即可构成一个简单通用的部署架构，如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/javatech/web-arch.png" alt="" /></p>

<ul>
<li>LVS作为最前置的结点，负责在网络第四层转发流量、负载均衡。</li>
<li>多个LVS使用Keepalived互为主备实现高可用。</li>
<li>Nginx作为反向代理，负责在网络第七层转发流量、负载均衡。此外，其做为高性能Web服务器，还可以负责静态页面/资源的访问。也可以通过Nginx lua应对一些高并发的动态场景。</li>
<li>Tomcat做为业务容器，主要的应用代码都在这里面。</li>
<li>Redis作为缓存，隔离高并发请求和后端数据库。</li>
<li>MySQL以主从模式对数据做持久化。</li>
</ul>


<p>其中，虚线部分是数据库层，采用的是主从模式。也可以使用Redis Cluster（Codis等）以及MySQL Cluster（Cobar等）来替换。</p>

<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构简明指南]]></title>
    <link href="http://www.rowkey.me/blog/2018/04/25/arch-usage/"/>
    <updated>2018-04-25T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/04/25/arch-usage</id>
    <content type="html"><![CDATA[<p><strong>最新版本可见:<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/appendix/arch-usage.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/appendix/arch-usage.md</a></strong></p>

<p>之前的<a href="http://www.rowkey.me/blog/2017/08/24/arch/">《谈谈架构》</a>讲述了架构的概念、原则等等，这里择出其中的设计原则部分供大家随手参考。</p>

<p>《Clean Architecture》一书中对于软件架构目的的解释：</p>

<blockquote><p>The goal of software architecture is to miminize the human resources required to build and maintain the required system.</p></blockquote>

<p>即：软件架构的目的就是将构建和维护系统需要的人力成本降到最低。</p>

<p>因此，可以得出架构设计的关键思维就是判断和取舍（程序设计的关键思维是逻辑和实现），即如何选择技术、组合技术使得需要的人力资源最少。</p>

<p>需要注意的一点是，脱离业务谈架构是不合理的，技术架构及其演进都是业务目标驱动的。</p>

<!--more-->


<h2>架构原则</h2>

<p><img src="http://www.rowkey.me/images/blog_images/arch-spec.png" alt="" /></p>

<ul>
<li><strong>避免过度设计</strong>：简单的架构就是最好的架构。最简单的方案最容易实现和维护，也可以避免浪费资源。但方案中需要包括扩展。</li>
<li><strong>冗余设计</strong>：对服务、数据库的做结点冗余，保证服务的高可用。通过数据库主从模式、应用集群来实现。</li>
<li><strong>多活数据中心</strong>：为了容灾，从根本上保障应用的高可用性。需要构建多活的数据中心，以防止一个数据中心由于不可控因素出现故障后，引起整个系统的不可用。</li>
<li><strong>无状态设计</strong>：API、接口等的设计不能有前后依赖关系，一个资源不受其他资源改动的影响。无状态的系统才能更好地进行扩展。如果非得有状态，则要么客户端管理状态，要么服务端用分布式缓存管理状态。</li>
<li><strong>可回滚</strong>：对于任何业务尤其是关键业务，都具有恢复机制。可以使用基于日志的WAL、基于事件的Event sourcing等来实现可回滚。</li>
<li><strong>可禁用/自我保护</strong>：具有限流机制，当上游的流量超过自身的负载能力时，能够拒绝溢出的请求。可以通过手动开关或者自动开关（监测异常流量行为），在应用前端挡住流量。限流算法包括：令牌桶（支持突发流量）、漏桶（匀速流量）、计数器以及信号量（限制并发访问的数量）。此外永远不要信赖第三方服务的可靠性，依赖于第三方的功能务必有服务降级措施以及熔断管理，如：对于每一个网络操作，都需要设置超时时间，超过这个时间就放弃或者返回兜底响应。</li>
<li><strong>问题可追踪</strong>：当系统出现问题时，能够定位请求的轨迹、每一步的请求信息等。分布式链路追踪系统即解决的此方面的问题。</li>
<li><strong>可监控</strong>：可监控是保障系统能够稳定运行的关键。包括对业务逻辑的监控、应用进程的监控以及应用依赖的CPU、硬盘等系统资源的监控。每一个系统都需要做好这几个层面的监控。</li>
<li><strong>故障隔离</strong>：将系统依赖的资源(线程、CPU)和服务隔离开来能够使得某个服务的故障不会影响其他服务的调用。通过线程池或者分散部署结点可以对故障进行隔离。此外，为不同的用户提供单独的访问通道，不仅仅能够做故障隔离，也有利于做用户权限控制。</li>
<li><strong>成熟可控的技术选型</strong>：使用市面上主流、成熟、文档、支持资源多的技术，选择合适的而非最火的技术实现系统。如果面对自研和开源技术的选择，需要考虑契合度：如果功能需求契合度很高，那么选择开源即可；如果开源技术是需求的子集或者超集，那么要衡量吃透这个开源技术的成本和自研的成本那个高。</li>
<li><strong>梯级存储</strong>：内存->SSD硬盘->传统硬盘->磁带，可以根据数据的重要性和生命周期对数据进行分级存储。</li>
<li><strong>缓存设计</strong>：隔离请求与后端逻辑、存储，是就近原则的一种机制。包括客户端缓存（预先下发资源）、Nginx缓存、本地缓存以及分布式缓存。</li>
<li><strong>异步设计</strong>：对于调用方不关注结果或者允许结果延时返回的接口，采用队列进行异步响应能够很大程度提高系统性能；调用其他服务的时候不去等待服务方返回结果直接返回，同样能够提升系统响应性能。异步队列也是解决分布式事务的常用手段。</li>
<li><strong>前瞻性设计</strong>：根据行业经验和对业务量的预判，提前把可扩展性、后向兼容性、容量预警设计好。以防止超过系统容量后造成各种问题影响服务。</li>
<li><strong>水平扩展</strong>：相比起垂直扩展，能够通过堆机器解决问题是最优先考虑的问题，系统的负载能力也才能接近无限扩展。此外，基于<strong>云计算</strong>技术根据系统的负载自动调整容量能够在节省成本的同时保证服务的可用性。</li>
<li><strong>小步构建和发布</strong>：快速迭代项目，快速试错。不能有跨度时间过长的项目规划。</li>
<li><strong>自动化</strong>：打包、测试的自动化称为持续集成，部署的自动化称为持续部署。自动化机制是快速迭代和试错的基础保证。</li>
</ul>


<h2>架构六步思考法</h2>

<blockquote><p>笔者对美团总架构师夏华夏一次分享提出的架构六步思考法的理解。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/arch-six-think.png" width="450"/></p>

<p>这里尤其需要注意的一点是在面对问题时，首先要试图将未知问题转化为已知问题，而不是创造新问题。</p>

<h2>数据设计原则</h2>

<ul>
<li>注意存储效率

<ul>
<li>减少事务</li>
<li>减少联表查询</li>
<li>适当使用索引</li>
<li>考虑使用缓存</li>
</ul>
</li>
<li>避免依赖于数据库的运算功能(函数、存储器、触发器等)，将负载放在更容易扩展的业务应用端</li>
<li>数据统计场景中，实时性要求较高的数据统计可以用Redis；非实时数据则可以使用单独表，通过队列异步运算或者定时计算更新数据。此外，对于一致性要求较高的统计数据，需要依靠事务或者定时校对机制保证准确性。</li>
<li>索引区分度法则：辨识度超过20%的属性，如果有查询需求，就应该建立索引。</li>
<li>对于数值型数据，可以使用保序压缩方式在保证顺序不变的前提下减少字符串长度。如：进行36进制转化即一种保序压缩方式。</li>
<li>大量数据的去重计数如果允许误差可以选择基数估计算法（Hyperhyperlog、Loglogcount）或者布隆过滤器。</li>
</ul>


<h2>系统响应性能提升五板斧</h2>

<ul>
<li><strong>异步</strong>：队列缓冲、异步请求。</li>
<li><strong>并发</strong>：利用多CPU多线程执行业务逻辑。</li>
<li><strong>就近原则</strong>：缓存、梯度存储。</li>
<li><strong>减少IO</strong>：合并细粒度接口为粗粒度接口、频繁的覆盖操作可以只做最后一次操作。这里一个需要特别注意的地方: <strong>代码中尽量避免在循环中调用外部服务，更好的做法是使用粗粒度批量接口在循环外面只进行一次请求。</strong></li>
<li><strong>分区</strong>：频繁访问的数据集规模保持在合理的范围。</li>
</ul>


<h2>系统容量规划</h2>

<p>需要对系统/关键模块做好评估、量化，以防止超出容量时不至于压垮服务器，仍然能够服务于大部分用户。</p>

<p><img src="http://www.rowkey.me/post_images/capacity-plan.png" alt="" /></p>

<ol>
<li>根据流量模型、历史数据、预测算法预估未来某一个时间点的业务量：QPS、每日数据量等。</li>
<li>评估单点最大承载量（数据库的单点承载数据量、应用服务器的单点承载并发量）【通过性能测试】，根据业务量计算需要部署的结点数目，做1.5倍部署（DID原则）。</li>
<li>性能压测验证整个系统的负载能力。</li>
<li>设计达到容量预估值时的预警、限流、快速恢复措施以及后续扩展方案。</li>
</ol>


<p>PS: 在容量预估中，机器数目的计算遵循DID原则：20倍设计、3倍实施/实现、1.5倍部署。即需要部署1.5倍的可承载预估业务流量的机器数目。</p>

<h2>架构重构的原则</h2>

<p>一个系统的架构是随着业务而不断演化的，因此不可避免地会留下很多技术债。如果一味地不去管，那么总有一天技术债会爆发出来造成意想不到的破坏。因此很多时候对架构的重构是必须的。其需要遵循的原则如下：</p>

<ul>
<li>确定重构的目的和必要性：为了业务需要；有无其他备选方案</li>
<li>定义“重构完成”的界限</li>
<li>渐进式重构</li>
<li>确定当前的架构状态</li>
<li>不要忽略数据</li>
<li>管理好技术债务</li>
<li>远离那些虚荣的东西</li>
<li>做好面对压力的准备</li>
<li>了解业务</li>
<li>做好面对非技术因素的准备</li>
<li>能够掌握代码质量</li>
</ul>


<h2>其他</h2>

<ul>
<li>系统扩展思路

<ul>
<li>通过克隆扩展->高可用</li>
<li>通过拆分不同的东西来扩展->垂直扩展</li>
<li>拆分类似的东西来扩展->水平扩展</li>
</ul>
</li>
<li>讨论技术方案时，以是否合理为依据，而不要以工作量少为依据。</li>
</ul>


<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何学习后端技术？]]></title>
    <link href="http://www.rowkey.me/blog/2018/04/13/how-to-study-tech/"/>
    <updated>2018-04-13T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/04/13/how-to-study-tech</id>
    <content type="html"><![CDATA[<p>最新内容见:<a href="https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter1-servertech/how-to-study.md">https://github.com/superhj1987/pragmatic-java-engineer/blob/master/book/chapter1-servertech/how-to-study.md</a></p>

<p>学习后端技术和学习其他的技术并没有什么大的不同。因此，题目换做如何学习技术也是讲的通的。概括来讲，有以下几点建议：</p>

<ul>
<li>扎实的计算机基础知识</li>
<li>知其然更要知其所以然</li>
<li>动手实践、频繁练习</li>
<li>持续学习</li>
<li>计算机思维</li>
<li>自我总结</li>
<li>学会规划</li>
</ul>


<!--more-->


<h2>扎实的计算机基础知识</h2>

<ul>
<li>数据结构和算法：程序是由数据和算法组成的，因此这两个东西是计算机软件的基础。诸如B树、哈希表、栈以及七大排序算法、查找算法这些，在很多软件的代码中都可以看得到。有时候，一个优秀的工程师和一个普通工程师的区别也就在于是否能够合理使用合适的数据结构和算法。</li>
<li>计算机操作系统：操作系统可以说是集大成于一身的一个软件程序。资源调度、任务调度、IO调度、进程通信等等，每一个设计都是很精华的，也是很多其他应用软件设计的思想来源。</li>
<li>计算机网络：目前只要有数据传输功能的程序绝大多数都是离不开网络的。网络七层或者四层协议栈的设计非常精妙。了解网络连接如何建立、断开以及每个连接状态的意义都有助于对程序网络问题的排查。</li>
<li>计算机组成原理：这是计算机最底层的设计，也是计算机一切的基础。了解这些有助于消除你对计算机的神秘感，毕竟符合冯诺依曼原理的计算机无非就是存储数据、程序按序运行。</li>
</ul>


<p>以上是计算机专业的一些比较普遍的基础知识课程。这里不得不说的一点是，虽然现在各大高校的计算机专业课程是比较落后的，但是这些基础课程，由于多少年也没有怎么变过，因此不管怎样都是需要扎实掌握的。也许上学的时候你感觉不到有多大的用处。但是进入实际的开发工作中，是否能够掌握扎实的基础知识往往决定了一个开发工程师的上限，这也是很多大的互联网公司无论是校招还是社招，都侧重于一些底层知识考察的原因。毕竟，你会使用什么东西只能决定你的下限，而你的基础知识和学习能力才决定了你的上限。</p>

<p>此外，其实很多平时开发中的一些技术都可以类比到一些基础知识的。比如，我们经常为了提高查询性能而使用的缓存技术，和为了兼容CPU和IO速度不匹配的而设计的CPU Cache就是同样的东西；操作系统中的进程间通信方式和服务之间的异步同步通信也是差不多的道理。诸如此类，其实计算机科学基础凝聚了很多精华的设计，无论是计算机硬件架构、计算机操作系统还是计算网络。</p>

<h2>知其然更要知其所以然</h2>

<p>经常遇到来面试的工程师，他们简历上写了很多项目，也用过很多技术，怎么看都是非常不错的候选人。但是面试一旦深入到原理或者是优化层面，很多工程师甚至是一些公司的资深架构师都会支支吾吾，答非所问或者说是没关注过。听到最多的解释就是业务压力太忙，没有时间去研究这个。其实，自我经历来看，业务忙是原因，但是没有时间却肯定是借口，毕竟阅读一个项目的源码虽然比较耗费时间，但是去网上看看已有的原理分析其实是花不了太多的时间的。归根结底，还是没有一种知其然更要知其所以然的基本意识。很多东西，你学会了使用会很兴奋，但是你有没有想过这么兴奋的功能是如何实现的呢？最简单的例子，Java中的HashMap，大家都在用，但是他到底是怎么实现的呢？很多人甚至都不知道这和数据结构课程上的哈希表是什么关系，更别说让他说出解决冲突的方式了。</p>

<p>这也可以映射到现在的一种现象：很多开发工程师工作了很久，看着经验丰富，但基本都是拿着一年的工作经验重复n年的。基本上每一份工作，每一个项目都在那里做重复劳动，而且也并不去考虑如何避免重复劳动这件事。</p>

<p>进一步的，除了遇到问题再去看源码、究底层，主动阅读经典类库、高质量开源项目的源码以及其他同事写的代码，学习其中好的架构、设计、编码风格以及类库的使用也是促进自身技术进步的一个非常有效的方式。</p>

<p>这也牵扯到了技术的广度和深度的问题。就我自己来看，对于刚刚毕业或者刚刚入职的工程师来说，首要的是深度问题，只有你在某一领域有了深入的研究和造诣了，你才能融汇贯通，迅速地扩大自己的知识面，在广度上做到突破。而对于有一定工作经验的工程师来说，虽然深度不是那么必须了，但是遇到的问题、新学到的东西还是刨根问底才好，否则一旦出现问题再去盲羊补牢会让你显得非常被动，也不利于自己的技术发展。毕竟，一个什么都做过、什么都用过却什么也不精的人可替代性太强了。</p>

<h2>动手实践</h2>

<p>学习领域有所谓721模型：个人的成长70%来自于岗位实践，20%来自向他人学习，10%来自于培训。虽然这种理论存在争议，但在笔者看来对于程序员来说按照实践、学习和培训的方式进行重要性排序是合理的。普遍公认的一种学习技术的最佳实践-“项目驱动型学习”，也就是这里说的动手实践。很多技术，只是看书，你会云里雾里，看了就忘。必须要经过你自己的实践或者项目中使用到了这种技术，你才能很快地掌握并熟练。此外，现在朋友圈、微博上都充斥各种所谓干货，很多人阅读大量的资料自以为收货满满，其实对于里面的东西根本就没有去实践过。甚至有时候就是感叹一下别人真厉害而已。真正的干货是需要自己消化的，消化的一种最好的模式就是实践，无论是对资料中的例子还是一笔带过的知识。</p>

<p>动手实践能够让你快速入门，但只有频繁练习才能让你熟练使用。“一万小时”理论讲的是任何一个行业都至少需要一万小时的实践才能成为专家。先不去争论此理论是否正确，可以想想当你长时间不写代码或者不用某个技术后你再去做相关的开发，那种生涩陌生感想必是每个人都有体会的。可见对于研发这个角色，频繁练习是有多么的重要。</p>

<p>当然，这里的频繁练习并非指的重复劳动。应该是带着自己的思考去练习，多去想一下为什么这么做？有没有更好的方式？</p>

<h2>持续学习</h2>

<p>“活到老，学到老”这句话用在程序员这个职业上再合适不过。IT技术尤其是互联网开发中的技术，其迭代是非常迅速的。也许你今天学的，过不了几年就成了被抛弃的。虽然相比起前端技术，后端技术算是比较稳定的，但相比起其他行业，迭代速度还是非常快的，像Struts这种当年火的一塌糊涂的技术现在也成了过时的东西。因此，一定要对新事物、新技术具有敏感性，要不断地去涉猎业界最新的知识点，扩充自己的知识库。而学习新的知识的时候，与读一些书籍和网上的博文相比，直接阅读相关知识的官方文档是笔者推崇的方式，毕竟经过二次加工的书籍、博文很多时候由于写作者水平或者个人理解的问题会有错误或者偏离原作者的意思。而由于目前IT技术绝大多数都源自欧美，欧美的技术水平也领先国内很多，因此英文对于IT技术从业者的要求也是比较高的，需要达到熟知各种计算机术语，通畅地阅读各类英文资料的水平才不至于在学习方面落后。</p>

<p>这里还需要提到一点就是要“逃离舒适区”。人对自己熟悉的东西都比较亲切，对自己熟练掌握的技术一般也能够自信地使用，然而当需要使用自己没接触过的技术时，很多人就望而却步、不敢尝试，进而也就丧失了学习新的知识、扩充自己知识库的机会。最好的方式应该是敢于“逃离舒适区”、敢于使用新的技术，这样才能让自己具有持续的学习兴趣，促进自己的持续进步。</p>

<p>还需要注意的是，现在业界有很多技术会议，动辄就是全球、全世界这种名头。经常参加这些会议的人肯定是好学的，但是这种会议上都是些流于表面的东西，把精力放在这上面的人的知识也很容易流于表面。笔者比较推荐通过多阅读书籍来学习，喜欢读书的人也习惯于深度思考，深度思考才能更新形成自己的知识体系。尤其对处于技术上升期的程序员，少参加会议，少混圈子，多看书，多做一些能够提升自己技术能力的事情。除非经济压力大，尽量避免去做一些毫无技术含量的外包项目。</p>

<p>此外，学习计算机知识可以多与现实世界类比，能够加强理解，快速掌握。如并发控制的信号量其实和红绿灯本质是一样的原理，银行多窗口服务其实就是负载均衡。</p>

<h2>计算机思维</h2>

<p>这一点主要说的是要学会用计算机思维来思索问题。所谓的计算机思维本质就是冯诺依曼体系所描述：程序存储，顺序执行。</p>

<p>经常听到的程序员买苹果的段子就是按照for循环、if else等逻辑来判断苹果好坏、计数，并做防御性检查等，这就是计算机思维的体现。而之前一个很火的电影《天才枪手》中记忆选择题答案如果使用计算机思维，那么用两位bit可以表示四个答案，再将四位bit转换为一个十六进制数字，记忆答案就可以减少一般的存储量。</p>

<p>如此，诸如二进制存储、防御编程、循环遍历、位运算、多进程/线程以及常用的数据结构和算法等都应该成为不自觉的意识。能够在遇到问题时，下意识地用这些东西来思考，将人类语言的需求转化为计算机语言。</p>

<h2>自我总结</h2>

<p>相信很多人在平常的工作中，经常会遇到一些问题，然后通过查阅网上资料、询问同事、翻看源码等手段解决了，当再次遇到类似的问题甚至是相同的问题时，还是一头雾水。先不提记忆力的问题，造成这种情形的很大一个原因就是没有去总结。当然，这里的总结不仅仅指的是把你平时遇到的问题记录下来，更深一层的是要找到问题发生的本质原因，如何避免发生同样的问题，从中有什么启发和收获。再进一步的则需要经常将自己一段时间内的知识收获组织成体系或者融入到自己的知识体系中，这样才能举一反三，遇到相同的问题可以有据可循。</p>

<p>而自我总结的方式包括记笔记、写博客、做分享。其中，比起记笔记来说，写博客、做分享是笔者更为推荐的方式。毕竟，和别人交流一方面能促使你对总结质量的把控，另一方面分享知识给别人带来的“荣誉感”反过来会产生某种正向反馈让你更加乐于总结和分享。</p>

<h2>学会规划</h2>

<p>平时和不少工程师聊过关于职业规划的事情，其中有些人对自己的职业道路有很清晰的认识，但更多的则是没有任何概念，只是觉得能挣钱养家就好。很明显前者是属于有规划的人，对于这种人来说，其努力是有目标的，因此走的路也会更踏实，更具有可持续性。</p>

<p>对于研发职位来说，学会规划是一个很关键的特质。而规划可以分为长期规划和短期规划。上面说的职业规划就是一种长期规划，需要高瞻远瞩的定下自己前进的方向。如在五年内成长为一个后端服务架构师就可以看做一个长期规划。笔者自己的长期规划如下：</p>

<ul>
<li>35岁之前只做能提高自己技术水平的事情，能够成为公认的某一个技术领域的专家。</li>
<li>绝不为了钱加入自己并不认同的企业或者团队。</li>
</ul>


<p>而对于短期规划来说，则是一些具体技能、晋升、学习方面的规划。如，笔者近一年的学习计划包括：</p>

<ul>
<li>学习机器学习技术，能够成为“调参工程师”。</li>
<li>加强自身的管理技能，能够带领部门有好的业绩。</li>
<li>完成《增长黑客》、《分布式系统概念与设计》等十本书的阅读。</li>
</ul>


<p>需要注意的是，对于这些短期规划，要设定的比较合理，具有可达性，也要设定好优先级，根据优先级逐步去完成。此外，规划不要定死，可以根据实际情况灵活调整。</p>

<h2>如何学习一门新技术</h2>

<p>上面主要讲述了宏观层面的如何学习技术，而具体到学习某一个新技术，其实也是有法可循的。如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/howtostudy/15127185777816.jpg" alt="" /></p>

<p>由于很多技术的模块非常多，源码也非常复杂，很多时候在看源码的时候会陷进去越看越不得章法，因此这里着重说明一下“看源码”的一个典型流程：</p>

<ol>
<li>阅读该技术的架构文档，了解其总体架构和组成。</li>
<li>根据总体架构，将源码文件以模块或者上下层级进行分类。</li>
<li>从未阅读过的模块中选择最独立（依赖性最小）的模块代码读起。</li>
<li>阅读此模块的功能介绍文档。</li>
<li>阅读此模块的源代码。</li>
<li>一边阅读一边整理调用关系（以表或者树的形式）。</li>
<li>转到第三步。</li>
</ol>


<p>第六步中的调用关系表如下所示:</p>

<table>
<thead>
<tr>
<th>. </th>
<th> init </th>
<th> load </th>
<th> set_xx </th>
<th> method1 </th>
<th> &hellip;</th>
</tr>
</thead>
<tbody>
<tr>
<td>init </td>
<td> x </td>
<td>  </td>
<td> 2 </td>
<td> 1</td>
<td></td>
</tr>
<tr>
<td>load </td>
<td> </td>
<td> </td>
<td> 1 </td>
<td> 1 </td>
<td></td>
</tr>
<tr>
<td>set_xx </td>
<td> </td>
<td> </td>
<td> </td>
<td> 2</td>
<td></td>
</tr>
<tr>
<td>method1 </td>
<td> </td>
<td> </td>
<td> </td>
<td> </td>
<td> &hellip;</td>
</tr>
</tbody>
</table>


<p>其中，数字表示调用次数。</p>

<p>调用关系树也就是调用关系图，类似流程图：</p>

<p><img src="http://www.rowkey.me/post_images/howtostudy/call_tree.png" alt="" /></p>

<h2>总结</h2>

<p>程序员是一个金字塔结构的职业体系，越往上，人越少也越难达到。如下图所示：
<img src="http://www.rowkey.me/post_images/howtostudy/15022677629156.jpg" alt="" /></p>

<p>一步步走到金字塔顶部需要不断的学习和进步，包括正确的态度、正确的方法以及持续的努力。本文所述只是笔者自己的体会，也是自己一直在践行的东西。除此之外，肯定还有很多其他优秀的方法和思想能够促进这个过程。</p>

<blockquote><p>本文节选自《Java工程师修炼之道》一书。</p></blockquote>

<p><img src="http://www.rowkey.me/post_images/book-all.png" width="400"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何成为一名合格的Java工程师?]]></title>
    <link href="http://www.rowkey.me/blog/2018/04/01/pje-release/"/>
    <updated>2018-04-01T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/04/01/pje-release</id>
    <content type="html"><![CDATA[<p>Java开发一直是当前互联网领域最火热的开发技能之一，Java工程师也一直是需求量非常大的开发职位。那么如何成为一名合格的Java工程师呢？一名合格的Java工程师又应该具有哪些技能呢？针对这些，笔者的新书《Java工程师修炼之道》做了一些经验性的阐述和讲解。</p>

<p><img src="http://www.rowkey.me/post_images/book.png" width="250"/></p>

<!--more-->


<p>写作此书的想法萌生于2015年，主要是在研发招聘过程中，尤其是校招，感受到了目前后端工程师教育的匮乏。对于一个后端工程师的技术体系，先不说学生，不少工作很长时间的人都没有一个清晰的认识。就打算写一本后端工程师技术体系书籍的想法，希望能够给选择后端这个方向的人一些指导，也算是对自己的一个阶段性总结。</p>

<p>2016年初，博文视点“永恒的侠少”（张春雨编辑）找到我，算是正式开始写作此书。历时一年多的时间，于2017年8月份交稿，中间历经许多次修改，《Java工程师修炼之道》终于出版。这本书是自己出的第一本书，所以写作的过程一直是如履薄冰的，一直害怕写成一本没有任何意义的烂书，因此一遍遍地去读，一遍遍地修正，也一遍遍地更新一些知识点，希望最后不要沦为一本鸡肋无味的技术书。</p>

<p>本书主要针对一名合格的Java工程师的必备技能做了大纲性的总结和阐述。内容主要来自于公司内的后端工程师学习计划、自己以前的一些博客文章和自己从业以来积累的知识库。包括了工程化、常用开发框架、数据存储、数据传输、Java编程高级知识、性能优化、安全技术等，基本涵盖了Java工程师需要掌握的绝大部分技能点。此外，由于笔者的学习、工作笔记是平时工作中查阅网上资料并经过辨伪后记录下来的零散知识点，难免会有一些对网上资料的引用，特别对这些资料的原创者表示感谢，如果有侵权请联系我。</p>

<p>本书可以看作一本Java工程师的入职指南，也可以看作一本串联Java后端技能点的参考手册，同样可以作为创业团队做技术选型的一个参考。通过精心编排的内容，刚入门的Java工程师能够体系化地学习相关开发技能，有经验的Java工程师则能够查漏补缺，进一步加强自身的Java技术体系。</p>

<p>其中的部分内容，会陆续在我的博客和公众号放出。</p>

<p>希望这本书会给想要学习Java后端开发的同学或者还未形成自己技术体系的Java工程师们带来帮助。</p>

<p><strong><em>需要注意的是，本书关于每一技能的知识点并没有讲述的很深，毕竟一方面确实没必要，每一个知识点都有更厉害的专家和更专业的书籍；另一方面，要面面俱到，这本书的厚度估计得翻三倍，自己确实没这精力。因此，本书并不适合对内容深度有要求的同学。</em></strong></p>

<p><strong>购买</strong>: <a href="https://item.jd.com/12325207.html">https://item.jd.com/12325207.html</a></p>

<p><img src="http://www.rowkey.me/post_images/book_jd.png" alt="" /></p>

<p><strong>目录</strong></p>

<blockquote><p>第一章 后端技术导言</p>

<p>1.1 后端基础设施</p>

<p>1.2 Java后端技术概览</p>

<p>1.3 如何学习后端技术</p>

<p>第二章 Java项目工程化</p>

<p>2.1 项目构建</p>

<p>2.2 代码版本控制</p>

<p>2.3 代码质量保证</p>

<p>第三章 开发框架</p>

<p>3.1 依赖注入</p>

<p>3.2 对象关系映射</p>

<p>3.3 日志</p>

<p>3.4 Web MVC</p>

<p>第四章 Spring</p>

<p>4.1 Spring核心组件</p>

<p>4.2 Spring数据操作框架</p>

<p>4.3 Spring Boot</p>

<p>4.4 Spring常用组件</p>

<p>4.5 总结</p>

<p>第五章 数据存储</p>

<p>5.1 关系型数据库-MySQL</p>

<p>5.2 非关系型数据库</p>

<p>5.3 缓存</p>

<p>5.4 搜索引擎-Elasticsearch</p>

<p>第六章 数据通信</p>

<p>6.1 RESTful架构风格</p>

<p>6.2 远程过程调用-RPC</p>

<p>6.3 消息中间件</p>

<p>第七章 Java编程进阶</p>

<p>7.1 Java内存管理</p>

<p>7.2 Java网络编程</p>

<p>7.3 Java并发编程</p>

<p>7.4 Java开发利器</p>

<p>7.5 Java新版本特性</p>

<p>7.6 总结</p>

<p>第八章 性能调优</p>

<p>8.1 调优准备</p>

<p>8.2 性能分析</p>

<p>8.3 性能调优</p>

<p>第九章 安全技术</p>

<p>9.1 Java加密</p>

<p>9.2 安全Http - HTTPS</p>

<p>9.3 Web安全</p></blockquote>

<p><strong>推荐</strong></p>

<blockquote><p>2013年，我和本书作者的接触是从基于网易的一个大型互联网应用合作开始的，我见证了从第一行代码到整个系统服务于亿级用户的过程，并且相信这种经历对开发者来说是一笔巨大的财富，其中大量的开发和实战经验都会在本书中得到充分的体现，相信读者能从书中直接领略到丰富的实战知识。在与本书作者的合作过程中，其对Java技术的热爱与追求孜孜不倦，对问题刨根问底，直到理解透彻、灵活应用，这些都令我印象深刻。这些年，我与本书作者一直保持沟通交流、相互学习，他将近十年的实战经验沉底于本书以实现对后端技术的探索、布道，非常值得开发者与近高窗卧听秋。</p>

<p>后端技术涉及内容非常广泛，Java语言也是互联网开发行业使用的主流语言，相信后续也将继续流行很长一段时间，而本书作者也一直从事Java后端开发工作。在本书中作者比较系统地从总体上描述了后端技术相关的理论知识，包括基础设施、网关服务及框架选型等基本原则，然后以实际经验进行示例说明，接着详细梳理了Java的后端技术，相信读者读完本书后会更全面地理解后端技术。互联网的业务建设需要不同角色的开发者共同协作完成，因此，系统工程化是开发者首先要共同遵守的规范或约定，包括代码规范、版本管理和代码质量检查等。</p>

<p>开发框架的选型进一步地为工程化提供了基础，也能加速推进互联网开发，尽管是否重复造轮子是一个恒久的话题，但是没有永远的银弹，只要在合适的时间里根据团队的能力选择合适的技术框架就好。一般来讲，目前常用的框架包括基本的依赖注入、AOP、事务管理、连接池管理、数据操作、日志服务等，在众多的框架中，本书作者选用目前在Java领域使用最广泛的Spring做深入的分析，详细地说明各组件的基础知识、基本原理和实际使用案例，最难得的是把较多开发者遇到的坑都用真实的示例进行了说明，可以帮助开发者快速地跳过这些伤心地带，同时也把最佳实践画龙点睛地带给开发者。</p>

<p>数据存储无疑是所有系统应用中非常重要的一环，应用的场景用例也和数据库的选型有极其重要的关系，开发者选择关系型数据库还是非关系型数据库是需要根据软件成本与人力成本来进行权衡的，比如是选择MySQL、Oracle等开源或商业的数据库。本书重点从数据库的基础知识、索引和表优化等方面以详尽的示例为更好地选择数据库的存储类型提供了更多的知识。</p>

<p>早期的关系型数据库一般能满足数据达到一定规模的企业的需求，而在互联网业务领域，特别是移动互联网领域内的元数据或者日志数据等，达到亿数量级别是很常见的，这时通常使用非关系型数据库，在非关系型数据库里使用非常多的有MongoDB、HBase等分布式数据库系统。作者在自身的企业开发实践中，得到了大量的使用经验和最佳实践。为了加速后端应用，缓存热数据是加速业务、提高业务性能、提升用户体验的重要手段，通过使用本地缓存、远程缓存进行数据加速、数据预热或提高数据的命中率，是开发者在应用开发的过程中常会遇到的场景。</p>

<p>“路漫漫其修远兮，吾将上下而求索”，后端技术每年都在不断发展，所用技术也有变化，近些年Java语言的发展速度不那么快了，但是总体是在不断前进发展的，本书作者带领的团队一直深耕此领域并希望通过本书为技术开发人员带来更多帮助。</p>

<p>&ndash; <strong>尧飘海，网易云基础服务（蜂巢）首席架构师</strong></p></blockquote>

<hr />

<blockquote><p>Hey！新来的读者，为了吸引你的注意力我真是煞费苦心，但最终还是没能写出一句特别吸引眼球的话来，毕竟写序的我不是标题党出生。此刻我真的非常能理解你拿到新书之后那渴望知识的心情，所以你恨不得一个字的“序”也不要看到，直接到达“最有价值”的知识点。但作为一名资深转业码农（对！你没看错，是“转业”，不是“专业”）还是想说一句，你先看完序，5分钟后到达知识的战场，会更稳！</p>

<p>相信你已经在看“序”了，那么我们来说点正经事。</p>

<p>你的知识体系的养成有3个关键阶段：看山是山、看山不是山、看山还是山。本书的适用人群是“看山不是山”的那些人，如果你恰好处于这个阶段，恭喜你！书钱没白花。</p>

<p>Java是一门非常容易入门的语言，初学者经过初期的学习之后基本能掌握DEMO级别的编程应用。相信读者你已经度过了这个阶段，但是Java庞大的体系可能会把你绕晕，又或者你还没看到Java的生态系统有多么复杂。此时，你需要本书。从事程序员这个工作，到比较高阶的时候，其实是不挑语言的，语言只是工具，而你可以在纷繁复杂中游刃有余。但几乎每一位高手都是先深入一个领域，再横向发展的。你可以不用着急后续的横向发展，先坚定自己学习Java的信心！因为，从广泛的应用场景、顶级的开源生态、未来可期的薪水和职位来说，Java都是非常不错的选择。</p>

<p>敲黑板，画重点！下面来解释一下，为什么本书面向的是“看山不是山”的人群。在度过Java的入门期之后，会有一个烦恼，那就是面对Java这么庞大的体系，我们究竟应该学习什么？选择方向，往往比努力更重要！是使用J2SE编写桌面程序？是使用J2ME编写嵌入式应用？还是使用J2EE编写企业级应用？这些是我们那个泛黄的年代特有的烦恼。而现在的烦恼可能是学Android？还是学Java后端？即便大方向你已经十分坚定，而且选择了Java后端编程，但因为复杂的知识体系和Google发布的各种教程文档，眼前看到的已经不再是清晰的山脉，而是一片迷雾。此时，你需要本书，因为它给你指明了努力的方向。</p>

<p>本书的结构、阐述的方式和大部分的“指南”书籍有较大的区别，本书是以笔记和要点的形式进行呈现的，用现在的话说就是捞干货。本书涵盖的知识，是以现代工程实践中的实际案例出发来组织的，所以知识点范围非常广泛，每一个点都对最关键的“Best Practice”简明扼要地进行了说明。你在阅读本书的时候需要一些相关经验，不然无法跟上作者的节奏，建议在有一定的知识准备后再阅读本书，这样你会受益匪浅。从另外一个角度看，在你有了一定的基础积累之后，本书可以帮助你全面地了解一个现代化的最先进的工程实践是怎样的。本书讲述了目前行业中最常用的，经过了实践的工程方案，这将是你快速进阶的最佳指引。</p>

<p>&ndash; <strong>孙建，随身云（中华万年历）联合创始人&amp;CEO</strong></p></blockquote>

<hr />

<blockquote><p>扎实的基础理论知识是内功底子，丰富的实践经验是招式。如本书作者所说，精妙的招式决定了你的武功下限，而深厚的内功底蕴会承载你所能企及的高度。那么，在后端技术栈中，内功与招式之间如何去关联起来，本书作者以其多年的钻研与实践结合心得，通过本书为你一一梳理。</p>

<p>&ndash; <strong>阙杭宁，网易云信CTO</strong></p></blockquote>

<hr />

<blockquote><p>作者是一位技术人,有多年的Java技术积累,是极少数真正热爱技术的人。在随身云架构师的工作让他有机会站在更高的层次进行系统架构的工作,这些实践经验和平时感悟都沉淀在作者的著作和博客中,相信每位Java工程师都能从中获取帮助。</p>

<p>&ndash; <strong>秦绪震，十露盘科技联合创始人，技术负责人</strong></p></blockquote>

<hr />

<blockquote><p>本书作者根据自身多年的JAVA后台开发经验, 提纲挈领的总结JAVA后台开发的各个关键技术点，这些知识点都是一个合格的JAVA工程师必须掌握的技能。它既可以作为新人的技术学习指南，也可以帮助老手对于自己的知识面进行查漏补缺，是一本非常好的技术指南。</p>

<p>&ndash; <strong>饶洵（蜚天），阿里巴巴技术专家</strong></p></blockquote>

<hr />

<blockquote><p>作为一个在后端摸爬多年的Java开发工程师，这本书让我温故而知新。书中介绍的Java相关的知识技能树，不仅涵盖了我个人多年的Java开发技术知识点，也对我所陌生的一些知识点进行了详解，让我突然有一种继续学习的冲动。</p>

<p>一个Java开发工程师的成长，不仅要对Java语言及其特性有深层次的理解，也需要掌握与Java相关的框架、生态及后端开发知识。这本书正是将后端开发工程师需要掌握的技能做了总结，对于提高开发技能有很好的指导作用。</p>

<p>我推荐这本书，对于具有一定Java基础和后端开发知识的读者来说，该书不仅具有仔细学习的价值，同时也是一本可以经常翻阅的工具书籍，对于Java开发工程师的成长和进阶有很大的指导作用。</p>

<p>一本好的技术书籍，不仅要仔细阅读、学习理解，还需要进行较多的实践，将所看所学进行应用，通过不断地实践，加深知识点印象，从而形成永久的记忆和技能。希望各位读者能够通过掌握书中的知识和技能，逐步成长为技术骨干和专家，从而创造更多的技术输出、产品输出，创造更多的财富。</p>

<p>&ndash; <strong>张小川，网易考拉海购架构师，供应链技术主管</strong></p></blockquote>

<p><strong>后续计划</strong></p>

<blockquote><p>此书一开始是计划有一章专门讲述大数据开发技术，毕竟现在越来越多的公司在构建自己的大数据平台，大数据技术也逐渐成了Java工程师的必备技能。但自己此方面经验较少，自认并没有达到可以向别人输出知识的程度，于是暂时搁置此部分。</p></blockquote>

<p>逐步把部分内容开源在笔者的<a href="https://github.com/superhj1987/pragmatic-java-engineer">Github（superhj1987）</a>中，并补充一些新的内容进来。</p>

<ul>
<li>Zookeepr本来是想放在大数据一章，现在会作为数据存储的一节补充进来。</li>
<li>异步响应式Web框架会补充在开发框架一章，以Vert.x为主，Spring Flux为辅。</li>
<li>Redis加入新版本的特性，并补充如何使用Redis实现分布式锁。</li>
<li>Kafka加入最新版本的特性，尤其是Kafka Streams和Exactly one语义。</li>
<li>Elastissearch基于5.0版本更新。</li>
<li>补充协程到并发编程中。</li>
<li>补充Netty到网络编程中。</li>
<li>使用Hystrix做资源隔离和限流会补充在Java开发利器中。</li>
<li>补充RxJava的使用在Java开发利器中。</li>
<li>补充Java10和Kotlin的部分到Java新版本特性。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析区块链]]></title>
    <link href="http://www.rowkey.me/blog/2018/03/15/blockchain/"/>
    <updated>2018-03-15T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/03/15/blockchain</id>
    <content type="html"><![CDATA[<p>从去年开始，区块链突然如火如荼起来，相关的新闻席卷微博、朋友圈、科技论坛、门户网站等各大媒体。业界大佬们更是频频发言，有宣称不做区块链就会被时代淘汰的，有说坚决不碰区块链的。国家队也是频频出手，管制、定性、做应用，央行更是默默地把区块链专利数量做到了世界前列。面对众多纷杂的信息、众多的技术分析文章，很容易让人脑袋嗡嗡，怕不懂，更怕懂了啥也都做不了。于是决定梳理一下相关的信息，看看这区块链到底是什么东西。</p>

<p>开篇之前，先抛出笔者的一个观点：<strong>区块链最合适的应用场景只有虚拟资产,除了虚拟资产的其他场景都是在蹭概念或者不是真正意义上的区块链，而且只要有人参与的业务流程都无法满足区块链设计的初衷。</strong></p>

<!--more-->


<h2>区块链是什么</h2>

<p>说到区块链，需要先了解其产生的背景，这样才能理解为何如此设计区块链。区块链的出现是和“暗网”相关的。所谓“暗网”与我们常见的“互联网”相比，只有通过特殊的软件才能够访问，并且在暗网上基本都是些黑市交易，无法见光，参与这些交易的人都不想暴露真实的位置、个人信息。应对这种交易需求，才出现了比特币。所以说，区块链一开始是为了解决匿名交易的问题出现的，也就是比特币。这也是区块链的第一个阶段，即一套账本体系和货币发行机制；后来基于区块链技术，出现了以太坊，在改进比特币区块的基础上加入了智能合约机制，称之为区块链2.0；以太坊之后，类似以太坊的一些扩展应用，能够对于每一个互联网中代表价值的信息和字节进行产权确认、计量和存储，能够扩展到几乎任何领域，这是区块链的第三个阶段，区块链将完成价值的交换。目前处在区块链2.0阶段。</p>

<p>其实从本质上看，区块链和Git类似，每个节点都有一份数据的存储，不同的是区块链没有中央服务器这么个概念，就是一个分布式无中心数据库，其有效的通过数学的方式在数据库没有管理员的情况下对内容达成一致，并且不通过正式工资或是分得股权就能奖励那些帮助使数据库变得更有价值的人们，最终能够实现无争议无抵赖的匿名交易。概括来看，其特点如下：</p>

<ul>
<li>去中心化：互联网本来的意义就是平等开放，所以有一种言论就是区块链是回归互联网本来意义的希望。这一点是区块链天然的优势，所有节点都存有数据的副本即实现了“去中心化”。</li>
<li>无法篡改: 得益于区块之间的链式结构，可以保证数据无法篡改或者篡改的成本远大于收益。</li>
<li>公开透明：每个节点保存的信息相同，能够消除信息不对称，实现信息透明。</li>
</ul>


<p>与传统的关系型数据库用一张表或者多张独立的表存储数据，“区块链”使用多个“数据表”并且多个“数据表”形成前后衔接的链式结构，以防止数据被篡改（修改任何一个区块就破坏了链式结构）。总体的结构如下所示：</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/bc.jpg" alt="" /></p>

<p>其中每一个“数据表”在区块链中被称为“区块”。格式如下：</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/block.jpg" alt="" /></p>

<p>这是区块链技术基本都具有的一些头部信息，包括4字节的版本号、32字节的上一个区块的哈希值、32字节的Merkle根、4字节的时间戳（当前时间）、4字节的难度目标以及4字节的随机数。</p>

<ul>
<li>版本号：用于跟踪软件/协议的更新。如果新版本的软件不兼容旧版本的软件，那么就认为是发生了“分叉”。</li>
<li>上一区块头哈希值：存储的是链上上一个区块的哈希值，也是区块链设计的精髓所在。</li>
<li>Merkle根：又叫做梅克尔根，是一种用于完整性证明的数据结构，为了能够在区块头中体现出交易而做的一个计算，同时也是为了解决交易记录进行Hash计算的效率问题。</li>
<li>时间戳：该区块产生的近似时间。这个时间虽然是节点生成的但是其是否有效需要其他节点的认可（允许有一定程度的误差）。时间戳使得交易有先后，是防范双重支付攻击的一个关键设计。</li>
<li>难度目标：该区块工作量证明的算法的难度系数。系数越大，目标哈希值的0越多，计算的难度呈指数增长。</li>
<li>Nonce: 用于工作量证明算法的计数器。</li>
</ul>


<p>区块体的信息主要是交易列表。交易的数据结构因平台的不同而不同。比特币中就是简单的交易信息，以太坊则会存放智能合约。这里需要提到的是比特币中使用UTXO（未花费的交易输出，Unspent Transaction Output）实现支付系统的账户模型，并没有余额、钱包的概念，交易列表中的关键信息也是一些UTXO的组成,如此计算账户的余额则需要通过遍历整个交易历史来最终计算出每个账户的余额。UTXO的示例如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/utxo.png" alt="" /></p>

<p>可见除了coinbase这种交易之外，其他的交易都至少有一个交易的输入且必须引用一个输出，而一笔交易的输入可以引用之前多笔交易的输出。此外，任何一笔交易的交易输入总量必须等于交易输出总量（支出与找零）。其一般结构如下：</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/utxo-struct.png" alt="" /></p>

<p>使用UTXO的优势如下：</p>

<ul>
<li>私密性比较强，理论上可以为每一笔输出设置一个地址。</li>
<li>无需维护余额等状态值。</li>
<li>UTXO是独立数据记录，可以通过并行极大的提升区块链交易验证速度。</li>
<li>无需关心事务问题，只需要关心输出脚本即可。</li>
<li>能够清理过期交易，回收存储空间。</li>
</ul>


<p>而以太坊则使用了传统所理解的账户模型，主要是因为UTXO无法支持图灵完备的智能合约实现。</p>

<p>此外，还需要说一下“块高度”的概念。区块链网络的创世块（第一个区块）的块高度为0，如此每增加一个区块高度就+1，如第一个图所示，如果最左侧的块为创世块，那么最后一个区块的块高度就是2。</p>

<h2>区块链典型流程</h2>

<p>以<strong>比特币</strong>为例，区块链的一个典型交易流程：</p>

<ul>
<li>新的交易向全网所有节点广播，交易信息包括发UTXO输入、UTXO输出等关键信息。这里一个交易并不需要抵达全部的节点。只要交易信息能够抵达足够多的节点，那么他们将很快被整合进一个区块中。</li>
<li>每一个节点都将收到的交易信息经过验证无误后（使用解锁加锁脚本自动化验证）纳入一个区块中（被打包到块之前这些交易被存储在内存池中）。</li>
<li>每一个节点都尝试根据最新的区块的信息找到一个具有足够难度的工作量证明。</li>
<li>当一个节点找到了一个工作量证明，就创造一个新的区块（将接收到的交易纳入其中），并向全网进行广播。</li>
<li>当且仅当包含在该区块中的所有交易都是有效的且之前未存在过的，其他节点才认同该区块的有效性。</li>
<li>其他节点表示他们接受该区块，而表示接受的方法，是在跟随该区块的末尾制造新的区块以延长该链条，将被接受区块的随机散列值做为新区快的Prev随机散列值。</li>
</ul>


<h2>区块链技术架构</h2>

<p>其实从本质来看，区块链不能算是一个新的技术，更应该看做是一个新的技术框架，是基于很多成熟的技术而成的，而且不仅仅是技术，还有金融学，货币学，博弈学等。其技术架构如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/arch.jpg" alt="" /></p>

<p>其中，区块的链式结构、UTXO以及智能合约是比特币发明人“中本聪”的原创发明。</p>

<h2>存储</h2>

<p>区块链在每一个节点会存储数据，并且需要持久化存储，存储方式和传统的应用一样，包括数据库和文件系统。</p>

<p>对于存储方式的选择, 区块链中并没有做相关的规定，而比特币和以太坊都使用LevelDB做为持久化存储方式。</p>

<h2>通信机制</h2>

<p>区块的通信是基于P2P技术,即不区分客户端和服务端的网络，和P2P下载是类似的原理。在区块链中其功能点包括：</p>

<ul>
<li>把需要存储的数据广播到所有节点上进行储存，也就是多播。</li>
<li>查询整个网络集群中所有节点的最新数据，如果自己节点的数据与大部分节点的数据不一致，则更新自身的数据与大部分节点存储的数据一致。这个功能也是防止数据被篡改的一个很重要的机制，是区块链核心的一个原则“少数派服从多数派”。当然这个也会引起51%攻击的问题。但区块链使用其他的机制极大杜绝了这种风险，下文会提到。</li>
</ul>


<h2>安全机制</h2>

<p>区块链同样使用了很多成熟的安全技术来保障其特点。</p>

<ul>
<li>哈希算法：⽤来对⼀段数据进行计算，得出⼀个摘要信息，通俗点说就是给一段数据⽣成⼀个固定大小的身份ID, 且其是不可逆的。区块链使用哈希做工作量证明、交易ID生成、区块之间的关联等。此外，区块头中的Merkle Root也是使用哈希算法做完整性证明的（比特币中使用double-SHA256哈希算法）。常用哈希算法包括MD5、SHA1、SHA256等。</li>
<li>数据加密：区块链使用了非对称加密算法。比特币中的钱包地址本质就是一对公钥私钥。此外，区块链利用公钥哈希加锁比特币的输入记录，阻止输出。</li>
<li>数字签名：同样基于非对称加密技术，用签名和公钥解锁自己的比特币输入记录，使用比特币。</li>
<li>零知识证明：所谓零知识证明即在不知道答案的情况下去验证给出的答案是否正确。这个过程完全靠机器验证，机器根据题目给出随机试验以验证答案是否正确。在某些区块链应用中如Zcash\ZCoin即使用了零知识证明来保证交易双方和交易金额的匿名性, 提供了绝佳的支付隐私。详细可见：<a href="https://mp.weixin.qq.com/s?__biz=MzIxMDY1ODQxMg==&amp;mid=2247486271&amp;idx=3&amp;sn=233f6c9b0f881d4a2fe4bb71c60ca2cc&amp;chksm=97607e3ca017f72a5393d46f0dd5985c07aa7aed8262c78cb0e8ae96c5f05727b0bde9a2a5b0&amp;mpshare=1&amp;scene=1&amp;srcid=0306YQQBdMN6j1B1IpuCgpCg%23rd">零知识证明（Zero-Knowledge Proof）原理详解</a>。</li>
</ul>


<p>此外，这里具体介绍一下是如何使用区块中的梅克尔树来做完整型证明的。每当产生一次交易，那么就与其他所有准备打包进区块的交易组成交易列表，通过Merkle Tree算法生成Merkle Root Hash，作为交易列表的摘要存到区块头中。比特币中使用的称之为二叉梅克尔树，而比如以太坊系统中使用的则是梅克尔-帕特里夏树。以二叉梅克尔树为例，流程可以概括为每相临的两条交易记录向上形成一个Hash值（如果仅有奇数个交易，则最后的交易会被复制一份以构成偶数个叶子节点），再与相邻的节点再往上形成Hash值，一直到树根形成所有交易记录的唯一Hash值，即Merkle根。如下图所示：</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/merkle.jpg" alt="" /></p>

<p>如此，一方面可以在数据同步有问题的时候快速定位到出错的交易记录，另一方面在节点只是需要验证支付（不同于交易，如验证是否有人完成了对自己的一笔交易）的时候，仅下载链的区块头即可，实现“简化支付验证”（SPV），能够极大的节省传输数据量。SPV的流程如下：</p>

<ul>
<li>一个SPV节点会在节点间的通信链接上建立起布隆过滤器，限制只接受含有目标比特币地址的交易。</li>
<li>当节点探测到某交易符合布隆过滤器，它会以Merkle区块消息的形式向相邻节点索要包含区块头和一条连接目标交易与Merkle根的Merkle路径，如图中如果要验证交易1，那么则返回Hash2、Hash34即可。</li>
<li>SPV节点使用该路径找到与该交易相关的区块，验证对应区块中该交易的有无。</li>
</ul>


<h2>共识机制</h2>

<p>对于分布式系统来说，一个非常核心的问题就是如何让所有节点达成一致，也就是共识机制。在区块链出现之前，已经有了一些解决方案，这里称之为传统分布式一致性算法：</p>

<ul>
<li>Paxos算法：基于消息传递且具有高度容错特性，类似于议会投票的过程分为三种角色Proposer、Acceptor及Learner，主要就是Proposer发起投票，Acceptor进行投票的一个过程。具体可见：<a href="http://drmingdrmer.github.io/tech/distributed/2015/11/11/paxos-slide.html">可靠分布式系统基础Paxos的直观解释</a>。这里需要说明一点：Zookeeper使用的ZAB协议对Paxos做了一些改造，是一种类Paxos算法。</li>
<li>Raft算法：相比起Paxos算法，RAFT更加注重算法的落地性和可理解性，其核心思想是如果数个数据库初始状态一致，只要之后的进行的操作一致，就能保证之后的数据一致。分为Leader、Follower以及Candidate三种角色，基于Log进行数据同步。大体就是选举Leader，然后Leader生成Log，Follower进行同步的一个过程。详细可见:<a href="https://zhuanlan.zhihu.com/p/27207160">Raft协议详解</a>。</li>
</ul>


<p>对于不需要货币体系的联盟链或者私有链而言，所有的节点都是绝对信任的节点，考虑到对性能的要求，一般选择传统的一致性算法即可。但由于这些传统的方案仅仅是考虑到了节点会有网络故障或者宕机的问题，没有考虑到节点会作恶（篡改消息）的情况。因此，在比特币、以太坊这种区块链上并不适用。于是有了以下的分布式一致性算法：</p>

<ol>
<li><p>PBFT: 拜占庭容错，针对的是拜占庭将军问题而提出的一种一致性算法。分为三个阶段：预准备（pre-prepare）、准备(prepare)和确认(commit)。大体的流程就是节点之间互相转发消息，以其中相同的大多数作为最终答案。此算法的可靠度受制于结点的数量影响（N ≥ 3F + 1，总的结点数目必须大于有问题节点的数目的三倍），因此使用受限，在IBM的私有链Hyperledger中得到了使用。</p></li>
<li><p>PoW: Proof of Work,工作量证明。这个是比特币、莱特币等货币型区块链使用的共识机制。类似于现实中的毕业证、驾照等，来证明你具有某种能力。可以认为PoW彻底解决了分布式一致性的问题。其过程以比特币为例，如下：</p>

<ul>
<li>矿工在网络中拿到最新一个区块的头部信息，其中的Merkle根包含了交易记录的信息摘要；</li>
<li>将拿到的头部信息作为参数，将nonce值从零开始，去计算其双重SHA256值（<strong>SHA256(SHA256(区块头信息))</strong>）；</li>
<li>如果算出的答案不符合要求（前n位为0），则将nonce值增加一个单位，再算；</li>
<li>直到计算出符合难度目标的答案，就挖到一个区块（打包交易记录，其中优先记录手续费高的交易），即可将自己创建的区块广播出去，其他节点验证无误即保存到自己的区块链上。</li>
<li>如果同时有多个节点实现了工作量证明挖到了区块，那么整个网络集群采用少数服从多数原则，集群中大部分采用了哪个区块就选择此区块组成最新的账本，达到最终一致性。<strong>少数服从多数原则</strong>也是区块链防范攻击、保证数据安全性的一个核心的原则。</li>
<li>如果节点同步到了多个长度不同的区块链账本，那么选择其中最长的作为区块链账本，且在最长链之外挖矿，不会得到任何挖矿报酬。即“最长链规则”。</li>
</ul>


<p> 由最后两点可知，挖到一个区块时，并不能过早的高兴，一般说来后面再跟五个确认过的区块（加上自己的区块，叫做六次确认），才能确认自己创建的区块的确是有效的，记录的交易也才认为是有效的（此时交易接收方可以认为交易已经成功）。</p>

<p>这个思路牺牲了一部分一致性来保证区块链的健壮性，即使只有一个结点，区块链系统依旧可以运行。同时也保证了区块链的安全性，除非51%的结点被控制。但一方面如果想要控制这么多节点，不仅要具有很强的算力，还相当于重构一个区块链网络，另一方面区块链会给予实现工作量证明创建区块成功的节点以奖励（每一个区块的交易清单的第一条交易为“系统给区块创建者支付xx奖励”，被称做coinbase交易，此交易没有输入），在比特币中奖励包括一部分新造比特币（一开始一个区块奖励50个比特币，每隔21万个区块自动减半，4年时间比特币总量最终会稳定在2100万个），一部分是从区块所包含的交易中抽取的挖矿手续费。如此权衡收益和破坏的成本，基本可以杜绝这种51%攻击（博弈学的使用）等。</p>

<p>此外，还需要提到区块头中的难度目标这个值，此值与计算耗时是反比的，即此值越大，那么计算越容易。以比特币为例，为了控制每十分钟产生一个区块的速率，需要根据统计数据动态调整难度目标从而可以保证区块的生产速率。</p>

<p>比特币的PoW虽然很好的解决了分布式一致性问题，但其非常的耗费计算力，浪费电，并且这种纯粹靠CPU的计算会受到某些专用硬件的威胁，如ASIC芯片。而以太坊的POW算法叫做Ethash（最新版本为Dagger-Hashimoto），其特点是挖矿的效率基本与CPU无关，却和内存大小和内存带宽正相关，无法设计专用硬件来解答难题。</p></li>
<li><p>PoS: Proof of Stake，权益证明机制。是一种通过业务规则达成共识的方式。基本概念是产生区块的难度应该与用户在网络里所占的股权成比例。具体来说就是根据钱包里面货币的多少以及货币在钱包里存在的天数来合成一个单位（币天），然后根据币天的关系对计算机进行哈希计算降低（谁的钱包里的币天数越大谁拥有记账权的概率就越大）。如此，能够减少对计算资源的浪费，提高计算性能。但是它也是牺牲了一部分的共识，而且需要等待多个确认。与PoW类比于比力量大小，PoS就是比耐力大小。</p>

<p> PoS目前已经使用在以太坊中。</p></li>
<li><p>DPoS: Delegate Proof of Stake。是基于POS衍生出的更专业的解决方案，类似于董事会的投票机制，选举出n个记账节点，在节点中提案者提交的提案被这些记账节点投票决定谁是正确的。此机制性能比较高，但是其选出的delegate节点是能够作恶的。</p>

<p> EOS的底层框架石墨烯-<a href="https://github.com/cryptonomex/graphen">Graphene</a>使用DPoS做为共识机制。</p></li>
</ol>


<h2>上层应用</h2>

<ul>
<li>可编程合约/可编程资产：交易验证并不基于一个不变的模式，而是通过运行脚本语言来实现可编程资产以太坊。</li>
<li>激励机制：虚拟货币激励，比特币、以太币。</li>
<li>成员管理：为整个区块链网络提供身份管理、隐私、保密和可审计的服务。通过公钥基础设施和去中心化共识机制使得非许可的区块链变成许可制的区块链。多中心组网、私钥公钥生成等。</li>
</ul>


<p>这里需要提的是区块链中“地址”的含义。以比特币为例，地址本质上是一个私钥公钥对（ECDSA椭圆曲线算法），其存储和区块链和网络是没有关系的，可由用户的钱包软件生成并管理。而通常为了易于人们记忆，地址会在公钥的基础上做一个格式化转换。常用的格式包括：Base58Check（Base58+Checksum）、WIF压缩、130位和66位公钥。以最常用的Base58Check为例，可以概括为:<strong><em>Base58Check(RIPEMD160(SHA256(PubKey)))</em></strong>，其流程如下：</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/bitcoin-address.png" alt="" /></p>

<p>而以太坊则是使用SECP256K1椭圆曲线算法生成公钥私钥对，再把公钥去掉04，剩下的进行KECCAK-256的哈希，得到长度64的16进制字串，丢掉前面24个，拿后40个，再加上&#8221;0x&#8221;，即为以太坊地址。</p>

<h2>性能问题</h2>

<p>目前区块链无法得到大规模应用的一个很大问题就是性能，比特币的每秒交易量只有3/秒，而以太坊也就30/秒。虽然EOS这个项目号称能达到几百万/S，然而分布式系统的本质让这个指标有点难以相信，而且这个数据也仅仅是建立在其几百个结点的基础上。</p>

<p>目前，提升区块链的方案主要有以下两种种：</p>

<ul>
<li>链外解决方案：即允许小型和频繁的交易发生在与主链并行并由主链背书的侧链实例上。只将比特币区块链用作大额交易的结算网络——小规模交易由区块链之外的支付中心处理（off-chain scaling，链外扩展）。</li>
<li>链上解决方案：直接修改区块链设计以支持高性能，如提高区块的容量、按照地址分片验证（以太坊）等。具体的可见：<a href="https://mp.weixin.qq.com/s?__biz=MzAwOTcyNzA0OQ==&amp;mid=2658972665&amp;idx=1&amp;sn=a3b8cc3538099530270910ae12267795">区块链性能提升：链上设计之道</a>。</li>
</ul>


<p>当然，如果使用私有链或者联盟链，其中的共识机制采取传统的分布式一致性算法或者高效的其他一致性算法也可以解决性能的问题。</p>

<h2>应用场景</h2>

<p>由于区块链本身的去中心化、不可篡改、安全等特性，需要第三方机构的应用场景都可以使用区块链技术。主流的应用场景如下：</p>

<ul>
<li>公正防伪</li>
<li>资产交易</li>
<li>信用体系</li>
<li>物品溯源</li>
<li>身份验证</li>
<li>文件存储</li>
<li>银行结算</li>
<li>版权控制</li>
</ul>


<h2>技术平台</h2>

<p>区块链的技术平台总体上可以分为公有链、联盟链和私有链，其大体的对比如下：</p>

<table>
<thead>
<tr>
<th>. </th>
<th> 公有链 </th>
<th> 联盟链 </th>
<th> 私有链</th>
</tr>
</thead>
<tbody>
<tr>
<td>参与者 </td>
<td> 任何人自由进出 </td>
<td> 联盟成员 </td>
<td> 个体或公司内部</td>
</tr>
<tr>
<td>共识机制 </td>
<td> PoW/PoW/DPoS  </td>
<td> 分布式一致性算法 </td>
<td> 分布式一致性算法</td>
</tr>
<tr>
<td>记账人 </td>
<td> 所有参与者 </td>
<td> 联盟成员协商确定 </td>
<td> 自定义</td>
</tr>
<tr>
<td>激励机制 </td>
<td> 需要 </td>
<td> 可选 </td>
<td> 不需要</td>
</tr>
<tr>
<td>中心化程度 </td>
<td> 去中心化 </td>
<td> 多中心化 </td>
<td> （多）中心化</td>
</tr>
<tr>
<td>特点 </td>
<td> 信用的自建立 </td>
<td> 效率和成本优化 </td>
<td> 透明和可追溯</td>
</tr>
<tr>
<td>承载能力（交易数/s） </td>
<td> 3-20万/s </td>
<td> 1000-1万/s </td>
<td> 1000-10万/s</td>
</tr>
<tr>
<td>典型场景 </td>
<td> 虚拟货币 </td>
<td> 支付、结算 </td>
<td> 审计、发行</td>
</tr>
<tr>
<td>代表项目 </td>
<td> 比特币、以太坊 </td>
<td> Hyperledger、腾讯TrustSQL </td>
<td></td>
</tr>
</tbody>
</table>


<h3>比特币</h3>

<p>比特币(使用C++开发)早于区块链走入人们的视野，并且很长时间内许多人都把比特币和区块链看做同一个东西。</p>

<p><img src="http://www.rowkey.me/post_images/blockchain/bitcoin.png" alt="" /></p>

<p>如图，是比特币的架构，可以看出比特币是基于区块链技术的副产品，是基于区块链的第一个应用，后来其他技术平台基本都是在比特币的基础上开发出来的。区块链可以类比为我们平时使用的JavaEE技术，比特币则是基于JavaEE开发的应用。无法基于比特币这个平台开发自己的应用。</p>

<h3>以太坊</h3>

<p><img src="http://www.rowkey.me/post_images/blockchain/ethereum.png" alt="" /></p>

<p>如上图所示，以太坊的架构由比特币演化而来，其诞生是为了解决比特币只适合加密数字货币场景，不具备图灵完备性，也缺乏保存实时状态的账户概念的问题，同时也是为了解决PoW机制带来的效率和资源浪费的问题。以太坊既是一个数字货币系统，也是一个智能合约的开发平台（类似AppStore这种应用开发平台，一个智能合约即一个应用）。可以把以太坊看做一个完全去中心化的电脑，使用此电脑需要用以太币支付费用（Gas）。</p>

<p>智能合约是以太坊最为核心的一个概念：提供了一个功能更强大的合约编程环境。一个合约类似一个合同，一旦写好即无法修改。每个节点都执行软件的一部分。类比于数据库中的触发器和存储过程，智能合约在区块链中是一个沙箱中的脚本（无法调用外部API），用于执行业务逻辑，也可以用于各种检查。开发智能合约使用的是Solidity语言。其是在Javascript语言基础上做的修改。合约代码会编译成字节码发布到以太坊网络，在EVM(Ethereum Virtual Machine)中执行。开发智能合约主要用到两个框架：</p>

<ul>
<li>Truffle Framework：Truffle提供了一整套部署测试的工具，可以方便和web3.js（以太坊提供的NodeJS SDK）结合使用。</li>
<li>dapphub: 提供了很多实用的合约，比如数学运算、权限验证等。</li>
</ul>


<p>其实比特币的交易也可以看做智能合约，只不过在比特币中就是⼀对锁定与解锁脚本（基于逆波兰表示法的基于堆栈的执行语言），受限只能实现转账交易。</p>

<p>使用以太坊发行数字代币（符合ERC20标准的智能合约）是非常简单的事情，官网提供了配套的代码和工具：<a href="https://www.ethereum.org/token">https://www.ethereum.org/token</a>，也可以参照这个指引：<a href="https://learnblockchain.cn/2018/01/12/create_token/index.html">一步步教你创建自己的数字货币（代币）进行ICO</a>。</p>

<p>这里还要说明一下ETC和ETH的区别。2016年6月区块链业界最大的众筹项目TheDAO遭到黑客攻击,导致300多万以太币资产被分离出TheDAO资产池。鉴于区块链的去中心、匿名的特征，资金根本无法追回，于是以太坊的发明人V神决定从块高度1760000开始把任何与The DAO和child DAO相关的交易认做无效交易，把以太坊做了一次分叉（区块链软件升级，但由于去中心化的问题并不能保证所有软件版本都升级上来），以此阻止攻击者在27天之后提走被盗的以太币。但此次分叉由于设计缺陷问题后来进行了回滚，最终是在区块高度1920000进行了一次分叉。而另外一些人由于不认同这种解决办法，而继续使用旧版本的以太坊软件，于是以太坊便发生了硬分叉（区块链软件升级，老版本不能够识别新的数据），原来的以太坊被叫做了ETC（以太经典）。至于这次攻击能够成功的原因主要是因为智能合约的逻辑有问题，具体的原因分析可见：<a href="http://ethfans.org/posts/114">从技术角度剖析针对THE DAO的攻击手法
</a>。</p>

<h3>EOS</h3>

<p>Enterprise Operation System，是由和V神齐名的BM大神发起的区块链项目，从名字上看其目的就是构建一个商业操作系统。由于其是一个ICO项目，且被某比特币大V进行了投资，因此受到的议论比较多。EOS的设计针对的是区块链性能太低满足不了很多应用场景以及在以太坊上进行操作需要支付费用等问题。</p>

<p>EOS号称自己能够达到每秒百万级的处理量，且具有高度自治，并能够为开发dApp的开发者提供底层模块，降低开发门槛。EOS也不收取任何费用，并能够通过并行链和DPOS的方式解决延迟和数据吞吐量的难题。</p>

<p>在EOS上编写智能合约支持C/C++/WebAssembly以及RESTFul接口(比较简单)。</p>

<h3>NEO</h3>

<p>小蚁区块链，开源，使用dBFT（delegated BFT，授权拜占庭容错机制）做为其共识机制。市值国内第一，全球第七，支持C#、Java、GO、Python、js等开发区块链应用。其目的是利用区块链技术和数字身份进行资产数字化，利用智能合约对数字资产进行自动化管理，实现“智能经济”。</p>

<p>目前，NEO提供了配套设施搭建私有链。</p>

<h3>联盟链和私有链</h3>

<p>市面上有一些联盟链和私有链技术平台，可以基于此做一些区块链应用开发。如下：</p>

<ul>
<li>腾讯TrustSQL: 腾讯主导的可信数据库区块链平台，<a href="https://trustsql.qq.com/">https://trustsql.qq.com/</a>。</li>
<li>百度区块链开放平台：百度主导的区块链平台，<a href="https://chain.baidu.com/">https://chain.baidu.com/</a>。</li>
<li>IBM HyperLedger，也被称作超级账本，又叫fabric，是一个面向商业的区块链系统开发框架（开发用的半成品基础设施）。</li>
</ul>


<h2>ICO</h2>

<p>提到区块链，ICO是不得不提的一个概念，类比于IPO，ICO是首次发币代售，提供了一种平等、低门槛的方式让普通民众参与到经济活动中，目前能够进行ICO的平台(能够方便发代币)主要是以太坊和比特股(Bitshares)。这种东西本意是好的，可以降低公司融资的成本，好的项目不会再看风投脸色，好的Idea也不会再胎死腹中，用户ICO获得的Token还可以带来实际的经济效益。但是由于缺乏IPO一样的管制，已经彻底沦为了收割智商的工具。</p>

<p>如上文所说，其实基于以太坊发行虚拟货币是非常简单的，如果你文采够好随便写个白皮书，洋洋洒洒描绘一个去中心化的蓝图，再找几个所谓业界大神站个台，好了，剩下的就等着数钱吧。当然，不排除有真心想做出一个项目的，但绝大多数都是些空气项目，发起人不过是发了个空气币，然后卷钱跑路。</p>

<p>说到ICO，虚拟货币交易所也是关键的角色，在这里可以流通法币和各种虚拟货币。有点令人不解的是，去中心化的区块链虚拟货币竟然需要一个中心化的“交易所”。黑客们攻击不了区块链，攻击一个中心化的交易所还是有许多路可寻的。最近频频发生的虚拟货币交易所被攻击的事情也算是对这种模式的一种讽刺。</p>

<h2>开发参考</h2>

<p>如果想实现自己的区块链平台或者了解区块链的实现，可以通过比特币、以太坊的代码学习，也可以参考以下资料:</p>

<ul>
<li><a href="https://www.ibm.com/developerworks/library/j-chaincode-for-java-developers/index.html">面向Java开发人员的区块链代码</a></li>
<li><a href="http://www.spring4all.com/article/811">用Java创建你的第一个区块链-part1</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=2653549361&amp;idx=1&amp;sn=019f54713891cf33ef3bef3b24773a96&amp;chksm=813a62a9b64debbfdd24a8507bb974048a4456e5b0a2d5f685fb3bdf40366a25764c5df8afec&amp;mpshare=1&amp;scene=1&amp;srcid=0226W0WdpzjJ9Qo6F3FJstO6%23rd">只用200行Go代码写一个自己的区块链！</a></li>
</ul>


<h2>小结</h2>

<p>区块链技术的出现以一种全新的思路解决了分布式一致性的问题，技术+博弈学+金融学的使用巧妙的构建了一个安全健壮的系统。这些思路给开发者在平时的学习工作中会有很多的思考和提示。而随着比特币价格的水涨船高和各种资本的追捧，区块链目前是被过度炒作的，大部分应用都是联盟量和私有链，已经违背了区块链设计的初衷。虽然的确是有应用场景，但笔者认为这和共享分布式数据库没有本质上的区别。此外，虽然区块链上的数据是无法篡改的，但是如果数据上链有人工参与的环节，那么这一步如何防止篡改呢？这也是我开篇观点产生的原因。</p>

<p>至于能用区块链做什么？在笔者看来，去研究区块链技术平台只有大公司、政府能做并推广起来，不过最后也只不过是“联盟链”、“私有链”。而对于创业公司或者个人来说，基于公有链、联盟链做之上的应用则更为合适，比如在以太坊/EOS上做一个养宠物的游戏^_^。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://8btc.com/topic-mastering-bitcoin.html">精通比特币</a></li>
<li><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system">比特币白皮书:一种点对点的电子现金系统</a></li>
<li><a href="http://dataconomy.com/2015/10/wtf-is-the-blockchain-a-guide-for-total-beginners/">WTF IS THE BLOCKCHAIN? A GUIDE FOR TOTAL BEGINNERS</a></li>
<li><a href="http://blog.csdn.net/jeffrey__zhou/article/details/56672948">区块链共识机制浅谈</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;mid=2651818777&amp;idx=1&amp;sn=8cf64236f13e1196b28a2603744d4c0f&amp;chksm=f0dcdd65c7ab5473a239b47939d7586229122788c49fbac295c77627b4693a06b1ce8d73afdc&amp;mpshare=1&amp;scene=1&amp;srcid=0829NWygcU8u98YzRZ8TmQlN%23rd">白话区块链技术栈与应用</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzU4MTg5NQ==&amp;mid=2247484492&amp;idx=1&amp;sn=b37844e8ab32b5ce516ee92149f243d6&amp;chksm=e8c72764dfb0ae727b2a50da75ef1ded417ad3c303c47f61c666f8dd39e631f114ab350f2544&amp;mpshare=1&amp;scene=1&amp;srcid=0217E8nz8lHzcB3sBvSBAics%23rd">比特币的潜在激励</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247487013&amp;idx=1&amp;sn=4675dd398a3458af9ba519557675e406&amp;chksm=e929332ade5eba3c142a36f89677d71bf1e1395967ace0b9e4ff3d18c6cffd604420709967fe&amp;mpshare=1&amp;scene=1&amp;srcid=03126HIJoomFmy2JpebnHa5m%23rd">如何用架构师思维解读区块链技术？</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
