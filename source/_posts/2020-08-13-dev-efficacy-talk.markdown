---
layout: post
title: "研发效能杂谈"
date: 2020-08-13 19:29:34 +0800
comments: true
categories: manage
---

研发效能是什么？为什么现在都在谈如何提高研发效能？研发效能对于一个企业到底有多重要？本文按照Why、What、How三步走沉淀梳理了研发效能相关的知识点。

<!--more-->

## 一. 为什么要提升研发效能

- 传统的职能部门组织架构带来的效率竖井问题
- 人力的增加没有让项目进度加快
- 长久加班导致团队士气低落，后续的效率降低
- 上线前加班、熬夜，压力大
- 上线后Bug、事故频发，实现效果与需求不匹配
- 各种重复低效工作，疲于应付业务 
- 想要有限的人力做更多的产出

## 二. 什么是研发效能

对于一个企业来说，追求的是企业效能的最大化，包括：利润、用户规模、客户满意度、运营效率等。而对于需要研发自有产品的互联网公司来说，研发效能则是服务于企业效能的至关重要的因素。

一个软件研发的完整流程如下图所示：

![](/post_images/dev/devprocess.png)

此流程交付期望产品的效率和能力，即研发效能。更进一步的《研发效率破局之道》中将研发效能定义为团队能够持续地为用户产生有效价值的效率，包括 **有效性（Effectiveness）、效率（Efficiency）和可持续性（Sustainability）** 三个方面。其增加的可持续性指出研发效能应该着眼于长期效果。

一句话来讲，研发效能就是持续快速交付价值的能力。

## 三. 如何提升研发效能

对应于第一部分中讲述的软件开发流程，如果想要提升研发效能，那么需要落实到研发流程（组织结构、项目管理、持续交付）、工程方法、个人效能以管理和文化的实践上。本文重点从研发流程、工程方法两方面来讲。

![](/post_images/dev/whole.png)

### 3.1 衡量指标  

评估一个组织持续快速交付价值的能力，需要一组可量化的数据或参数，用来跟踪和评估开发过程的“健康”状况。

**指标分类**

- 持续发布能力
	- 发布频率：单位时间内的有效发布次数
	- 发布前置时间：从代码提交到功能上线花费的时间
- 需求响应周期
	- 交付周期时间：从确认用户提出的需求开始，到需求上线经历的平均时长。
	- 开发周期时间：从开发团队理解需求开始，到需求可以上线所经历的平均时长。
- 交付吞吐率
	- 单位时间交付用户需求数量：单个团队的对比
- 交付过程质量：质量内建
	- 缺陷创建和修复时间分布：缺陷能够持续和及时地被发现，并在发现后尽快修复。
	- 缺陷库存：开发过程控制缺陷库存量，让产品始终处于接近可发布状态，是持续交付的基础
- 交付质量：系统的可用性
	- 单位时间问题数目
	- 线上问题解决时长 

**通用目标**

- 2：2周交付周期。从想法提出并确认到上线的时间。【跨职能、组织的协调一致和紧密协作】
- 1：1周开发周期。从需求设计完成（对开发就绪）到达到可上线的时间。【需求的拆分和管理，开发团队的分工协作模式，持续交付实践】
- 1：1小时的发布前置时间。代码提交后可以在1小时内完成发布。【持续交付流水线】

**选择优化指标** **【ToDo】**

> 流程中总是有一个核心瓶颈。分析关键路径、定位瓶颈，针对优化

- 使用指标来发现问题而不是做绩效考核
- 使用指标来检验优化效果
- 使用价值流图/累积流程图发现全局瓶颈，从而确定需要提升的度量指标

### 3.2 组织结构&&项目管理

#### 3.2.1 组织结构

避免“效率竖井”： 采用以业务为单位的组织架构，保证业务线全栈配齐，目标一致。并从全局定位瓶颈进而进行优化工作。

#### 3.2.2 项目管理

敏捷开发、看板管理

- 敏捷 = 价值观 + 原则 + 一系列符合价值观和原则的方法。
	- 软件应该一直处于可工作状态
	- 每个迭代都能将软件部署到一个类生产环境中，并向用户演示
	- 迭代长度不超过两周
	- 透明性、协作性、纪律性和持续改进
- 使用MVP，度量驱动开发
- 流程尽快流动：工程方法支撑
- 发现整个流程中的瓶颈，并解决：可视化工作流、事故复盘
- 避免“小瀑布”
	- 价值排序
	- 满足客户需要
	- 需求拆分成能够独立测试的需求！！！ 
- 看板
	- 从个人转变到关注价值流动：待开发->设计->开发->开发自测->代码评审->测试->完成
	- 明确的“完成的定义”DoD，明确了状态迁移必须完成的活动
- 从实际出发、以终为始：以实用主义的态度，从原则出发，灵活优化流程

一个可供参考的项目管理标准动作可见：[项目管理标准模板](https://www.rowkey.cn/blog/2020/07/31/project-manage/)

### 3.3 持续交付

在短周期内完成软件产品，以保证软件保持在随时可以发布的状态。让每一个变更都经过一条自动化的检验流水线，来检查每一个变更的质量，通过就进入下一个阶段。**持续集成不是一种工具，而是一种实践！**

- **不要阻塞开发人员**
- 每个团队指定构建负责人或者发布工程师：优化交付流水线，提升交付效率
- 项目状态，应该对参与整个过程（包括构建、部署、测试和发布）的所有人都是可见的
- 风险管理
	- **迭代增量式交付**是有效风险管理的关键
	- 手工测试环境、试运行环境和生产环境总是需要严格的访问控制
	- 让风险识别成为每日立会的一部分
- 审计
	- 手工测试环境、试运行环境和生产环境总是需要严格的访问控制：指定谁能够访问“特权”环境。
	- 要求每次部署都要进行审计，以确切知道到底修改了哪些内容。
	- 文档自动化、自文档

#### 3.3.1 基础设施和准备

**基础设施和环境管理**

让所有测试环境（包括持续集成环境）都要与生产环境相似

- 开发人员要把运维人员当做重要用户
- 切忌吞噬错误信息
- 使用运维团队熟悉的技术：开发人员最早负责创建部署脚本，后面移交给运维团队负责维护
- 把创建和维护基础设施需要的所有内容都进行版本控制
- 以自动化方式进行配置和部署！
- 像对待生产环境一样对待测试环境！
- 容器化技术实现不可变基础设施

**配置管理**

版本控制、依赖管理、软件配置管理

- 各个环境的手工配置 -> 自动化配置
- 对所有内容进行版本控制
- 指定依赖库的确切版本，不要用快照或者模式匹配版本
- 配置文件与二进制文件分离

**测试策略**

- 创建全面的自动化测试套件：单元测试、组件测试、验收测试，每一种测试的代码覆盖率都高于80%以上
- 每次修改都能运行一次自动化测试集合
- 分层测试

**数据管理**

- 把创建和迁移数据库全部变成自动化过程，是部署流程的一个组成部分 **【ToDo】**
- 让测试自己创建它们所需的状态，并确保每个测试都独立于其他测试
- 对数据库进行版本管理，使用DbDeploy这样的工具管理数据迁移过程的自动化。
- 在大多数据情况下，不要在测试中使用生产数据集的副本。?
- 数据库回滚和无停机发布 
	- 蓝绿部署
	- 大多数修改应该是增加操作（比如向数据库中增加新表或字段），尽可能不修改已存在的结构
- 测试数据
	- 测试的独立性、原子性
	- 其他类型的测试，一定不要使用生产数据库的一个dump，除非有特殊情况
- 部署流水线中的数据管理
	- 提交测试：快速运行，避免复杂的数据准备
	- 验收测试：后续阶段可以复用
	- 容量测试：为测试提供足够的输入数据，可以看做验收测试的重复利用

**主干开发**

保持应用可发布
	
- 每次创建分支，都要认识到它带来的成本
- 频繁提交代码合并到主干
- 新功能隐藏：功能开关统一管理达到特性隐藏的目的(Togglz?)
- 增量开发：将所有的变更都变成一系列的增量式小修改，而且每次小的修改都是可发布的。
- 抽象模拟分支（无法使用增量开发）：修缮者模式，使用门面模式隔离待改造代码。
- 使用组件，根据不同部分修改的频率对应用程序进行解耦。

#### 3.3.2 本地开发

**让开发者不受阻塞、不受不必要的干扰 -> 持续开发**

![](/post_images/dev/localdev.png)

- 确保自动化测试、构建部署脚本都能够在开发机上运行
- 本地自动化测试：预测试提交pretested commit/个人构建personal build/试飞构建preflight build？ **【保证本地开发所有验证方式与流水线上的验证方式一致，提高开发人员在本地发现问题的能力】**  
- 提交前在本地运行所有的提交测试，等提交测试通过后再继续工作
- 在可控的环境上部署开发的应用程序
- 修复破坏应用程序的任意修改是最高优先级的任务，**构建失败后不要提交新代码**

##### a. 六步提交法

> 规范开发习惯。主动提前集成；小步提交、完整代码、不影响已有功能；关注代码规范、动静态扫描问题

- 检出最近成功的代码
- 修改代码
- 第一次个人构建
- 第二次个人构建： 拉取主干代码集成后本地测试
- 提交代码到主干
- 提交构建

提交不影响已有功能！！

- 增量迭代开发
- 抽象模拟分支
- 特性隐藏

##### b. 规范化、自动化核心步骤

![](/post_images/dev/localdev-detail.png)

- 提高开发环境的效率
	- 共享机器池
	- Git提交日志插入截图：Share Bucket+Google Drive
	- 远程开发机器/Web IDE
- 规范化、自动化本地检查
	- 语法检查、规范检查、单元测试：Maven/Gradle插件
- 建设并自动化代码入库前的检查流程
	- 持续集成前的必要工作
	- 代码审查

**研发环境**

环境获取的服务化、自助化；环境的一体化、一致性

- 本地环境
	- 单独的环境，让开发环境接入
	- 服务虚拟化工具来模拟以来的服务，Mountbank、WireMock
- 联调环境
	- 机器池

**代码审查**

人工代码检查

- 统一并明确代码审查标准
- 统一并明确日志提交规范
- 传达团队的代码规则、质量基准
- LGTM（Looks good to me）

方式

- 代码入库前的设计时检查：在设计阶段进行代码审查
	- 代码入库前门禁检查，需要考虑灵活性，提供绕过机制
	- 代码入库后检查
- 工具辅助的线下异步审查：依赖于Gitlab、Gerrit、Code Climate Engines，一对一审查 
- 面对面审查：架构问题、结对编程
- 代码增量审查/代码全量审查
- 团队审查：适合专项讨论
- 代码审查计入工作量和绩效考评

代码提交规范

- 原子提交
- 提交日志规范

原则

- 互相尊重
- 基于讨论

相关资料可见：[谷歌代码审查指南](https://github.com/google/eng-practices/blob/master/review/index.md)

##### c. 快速反馈、增量开发

> 边开发边验证

- 提高运行静态检查和测试的方便性、灵活性：Maven/Gradle插件
- 提供沙盒环境方便验证和测试
	- 容器
	- 小范围的增量构建和验证？
	- 测试数据：直接使用生产环境、生产数据的导出并脱敏
- 实时检验工具：IDE实时检验、Liveload

#### 3.3.3 自动化构建/部署流水线

![](/post_images/dev/deploy-pipeline.png)

- **流水线建设原则**
	- 测试尽量完整，保证产品质量->完备的测试机制
	- 运行速度够快->尽早反馈、提高交付速度
	- 使用的所有环境尽量和生产环境一致->复现问题
- 所有相关角色提供构建状态可视化：持续交付流水线大屏显示
- 存储构建结果报告
- 只要有环节失败，就停止整个流水线！
- 制品库是特殊的版本控制系统，不需要保存所有版本。
- 为部署流水线的每个阶段创建脚本：脚本是系统中的一等公民
- 增量式实现流水线：如果流程中有手工操作部分，就在流水线中为它创建一个占位符。
- **提交阶段**：从技术角度上断言整个系统是可以工作的。
	- **编译、单元测试、组装打包、代码分析**	
	- 少于五分钟，一定不要超过十分钟
	- 提交测试：单元测试、组件测试
	- 只有在某个错误让提交阶段的其他任务无法执行时，才停下来否则就直至提交阶段全部运行完后，汇总所有的错误和失败报告
	- 此阶段的结果：结果报告、二进制包、元数据
- **自动化验收测试**：验证一个用户故事或需求的验收条件是否被满足。针对业务！	- **配置环境、部署二进制文件、冒烟测试、验收测试**
	- 令验收测试失败的构建版本不能被部署
	- 先部署再测试，重用部署脚本。
	- 类生产环境运行验收测试：大部分是功能验收测试，关注功能正确性
	- 开发人员能够在自己的开发环境中运行自动化验收测试
	- 测试的关注点在系统的行为，而非数据本身。所以抵制使用生产数据的备份做为验收测试	- 验收测试的性能不是主要考虑问题，重点在测试的全面性。
	- 正确地做验收测试：不要幼稚地对照着验收测试条件，盲目地把所有东西都自动化。
	- 验收测试可以看作所有后续测试阶段（包括容量测试）的某种模板：从部署准备开始，然后核实环境和应用程序都已被正确配置和部署，最后执行测试。
- **后续测试**
	- 手工测试：探索性测试、易用性测试
	- 非功能测试：性能、安全、可维护、可扩展
- **部署发布**：此阶段的触发不需要自动，测试或者运维人员可以做到自服务即可
	- 对不同环境采用同一部署方式：使用同样的脚本向所有环境部署，包括开发机器
 	- 一键式部署是对环境进行修改的唯一途径。
 	- 部署测试：对部署进行冒烟测试，验证部署是否成功，证明其部署的可靠性
 	- 确保部署流程是幂等的
 	- 只有通过了自动化构建、测试和部署的那些修改才能发布！
 	- 明确每个环境的部署和发布都是由谁负责
 	- 发布计划：第一次发布，产出一些文档、自动化脚本或其他形式的流程步骤
 	- 首次部署：首个迭代的主要目标之一就是在迭代结束时，让部署流水线的前几个阶段可以运行，实现部署流水线的“抽水泵”。
 		- 部署流水线的提交阶段。
		- 一个用于部署的类生产环境。
		- 通过一个自动化过程获取在提交阶段中生成的二进制包，并将其部署到这个类生产环境中。
		- 一个简单的冒烟测试，用于验证本次部署是正确的，并且应用程序正在运行。
	- 对发布过程进行建模并让构建晋级
		- 为了达到发布质量，一个构建版本要通过哪些测试阶段
		- 每个阶段需要设置什么样的晋级门槛或需要什么样的签字许可。
		- 对于每个晋级门槛来说，谁有权批准让某个构建通过该阶段。
	- 将每次已通过验收测试的变更版本部署在试运行环境中
	- 紧急修复: 紧急修复版本也要走完标准的部署流水线，与其他代码变更没什么区别。
		- 结对做！
		- 有时候回滚比部署新的修复版本更划算。
	- 持续部署：每当有版本通过自动化测试之后，就将其部署到生产环境中。【需要依赖强大的自动化测试机制】
- **度量**：每次提交后都产生关于这些度量的报告和可视化效果并保存起来
	- 周期时间（cycle time），从决定要做某个特性开始，直到把这个特性交付给用户的这段时间
	- 自动化测试覆盖率
	- 代码库特征
	- 缺陷数量
	- 交付速度
	- 提交版本库次数
	- 构建次数
	- 构建失败次数
	- 构建所花时间

#### 3.2.4 其他

**DevOps**

Devops是这些年很流行的一个概念，其目的就是打通研发和运维环节，以达到全员目标一致，保障软件高效交付。

![](/post_images/dev/devops.png)

- 职能团队提供平台和工具，让全栈工程师能够自己处理端到端的工作，实现DevOps。
- 全栈开发：工程师不再只是对某一个单一职能负责，而是对最终产品负责。

**信息溯源**

打通研发流程中流动的多种标识信息，以方便相关人员快速获取需要的信息，提高工作效率。包括任务工单、代码提交号、版本号、代码审查 ID、测试用例 ID、Bug ID。

- 制品与源代码版本管理：放置在制品包中的元数据，体现源代码版本号。
- 源代码与需求/Bug的版本关联: 提交代码时需要在注释里注明需求ID、测试用例ID等。 

### 3.3 工程方法

#### 3.3.1 技术债

在开发产品或者功能的过程中，没有使用最佳的实现方法而引入的技术问题。需要持续关注业务和技术债。对业务机会敏感，敢放手一搏大量借贷，也知道什么时候必须偿还技术债。

- 利用技术债的好处，必要时要大胆“举债前行”
- 控制技术债，在适当的时候偿还适当部分的技术债。

#### 3.3.2 云计算

利用好云计算带来的**服务化、自助化和弹性伸缩**三大优势。初创公司在业务刚起步时，使用 SaaS 或者 PaaS 快速开发业务；业务成长到一定规模之后，再逐步转到 IaaS 以及私有云降低成本。

- 细节抽象得越多，云服务商负责的部分就越多，我们就越能够聚焦自己的业务，从而提高研发效能
- 使用云资源时，通过工具或者 API 调用来完成工作，减少人工参与，达到自动化
- 资源共享、弹性伸缩
- 容器：不可变基础设施；基于K8S建设PaaS

在使用云计算时，要妥善处理它带来的挑战，比如分布式系统带来的安全和控制方面的问题。

- 自治和集中管理相结合：信息可视化（系统整体的质量看板、调用链追踪）
- 错误处理

#### 3.3.3 测试机制

上文持续交付一部分中最关键的其实就是测试部分，只有具有完善、可靠的测试机制，才能保证研发质量和交付效果，才能从根本上提高研发效能。

- 测试左移：质量内建，即持续交付中的测试机制。
	- 按照功能的维度管理团队，让整个功能团队对产品负责；改变团队成员对测试工作的认知
	- 把测试添加到开发和产品需求步骤中
	- 频繁测试，快速测试：提升测试运行的速度，并行运行、提高构建速度、精准测试、分层测试、减少不必要的用例
- 测试右移
	- 利用线上的真实环境测试：需要有完备的数据隔离机制
	- 测试人员介入线上监控和预警，及时发现问题并跟进解决
	- 混沌工程：即在真实环境中通过模拟各种不可预期的故障来验证系统稳定性

#### 3.3.4 平台化

通过抽象共性组件、功能，达到代码、功能复用，从而减少重复开发，提高研发效能。

- 技术平台：技术设施的复用
- 数据中台：数据沉淀和输出能力
- 移动中台：前端组件、跨平台开发、插件化、热加载
- 业务中台
	- 业务能力的复用
	- 赋能业务

相关资料可见：[中台简谈](https://www.rowkey.cn/blog/2019/11/23/middle-talk/)

### 3.4 个人效能

如何提高开发人员自身的开发效率，除了每个人自身的天赋能力外，也有一些可以刻意使用的高效工具和方法。

- 高效工作方法
	- 抽象和分而治之
	- 快速迭代
	- DRY
	- 番茄工作法
- 高效开发工具
	- 好的IDE
	- 操作系统快捷键
	- 思维导图软件
	- 学习笔记软件
	- 文档撰写工具
- 持续学习：不断地学习新的开发技能，从而提升自己的开发效率

此外，还可以通过技术管理从外部驱动个人效能的提升，这在下面的技术管理部分会讲。

### 3.5 管理和文化

#### 3.5.1 技术管理

管理包括：看方向、管人、管事。做好技术管理是提高研发效能的关键部分。其中，3.4节个人效能部分的数字驱动也是技术管理的一部分。主要步骤包括：

- 制定目标：兼顾业务目标和技术目标
- 目标管理：使用OKR等目标管理方案
- 计划并执行去实现目标

此外，技术管理中一个很难的问题是如何进行考核。这里可以使用数字化的方式，以驱动个人效能的提升。

- 选择个人效能度量指标
- 根据代码提交日志自动生成工作日报和周报、个人贡献值
- 综合多维数据构建个人的数据画像
	- 社会地位：用排名、榜单来实现；
	- 工作本身：用复合型报告去综合评价，告知员工究竟做得好不好
	- 自我改变：通过雷达图，进行多维度的数据分析，精准提炼员工的优点与不足，员工可以有针对性的取长补短。

需要说明的是，如果指标不能全方面的衡量，就不要做为考核指标，仅仅用于发现问题，解决问题！

一个可参考的技术管理标准动作模板见：[技术管理标准模板](https://www.rowkey.cn/blog/2020/04/25/tech-leader-manage/)

#### 3.5.3 团队文化

团队文化是团队成员共同认可的价值观和行为准则，良好且有效的文化是保障团队高效产出的关键部分。很多互联网公司都是工程师文化主导的，包括Facebook、Google、百度等。他们也都具有自己独特的企业文化价值观，如百度的简单可依赖、谷歌的不作恶、Netflix的自由和责任。建立团队文化的步骤如下：

- 定义：总结、明确自己团队的文化，提炼出简单易记的文字。
- 主张：各种形式的传播。从我自己的经历来看，不断地念经是其中最有效的方式。
- 追求：在奖惩中体现出文化价值观的作用。如对于文化价值观贯彻优秀的同学给与公开的肯定与奖励。


## 四. 参考资料

- [《持续交付》](https://book.douban.com/subject/6862062/)
- [《持续交付2.0》](https://book.douban.com/subject/30419555/)
- [《研发效率破局之道》](https://time.geekbang.org/column/intro/100034501)
- [如何衡量研发效能？阿里资深技术专家提出了5组指标](https://developer.aliyun.com/article/690725)